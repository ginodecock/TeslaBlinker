
53L7A1_ThresholdDetection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008020  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000159e0  080081c0  080081c0  000091c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801dba0  0801dba0  0001f0a4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801dba0  0801dba0  0001eba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801dba8  0801dba8  0001f0a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801dba8  0801dba8  0001eba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801dbac  0801dbac  0001ebac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a4  20000000  0801dbb0  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003054  200000a4  0801dc54  0001f0a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  200030f8  0801dc54  0001f0f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001f0a4  2**0
                  CONTENTS, READONLY
 12 .debug_line   00013171  00000000  00000000  0001f0d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 000000a3  00000000  00000000  00032245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000eea7  00000000  00000000  000322e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002905  00000000  00000000  0004118f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000da0  00000000  00000000  00043a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008d9b7  00000000  00000000  00044838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000a72  00000000  00000000  000d21ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0001846b  00000000  00000000  000d2c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000eb0cc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f20  00000000  00000000  000eb110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a4 	.word	0x200000a4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080081a8 	.word	0x080081a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a8 	.word	0x200000a8
 80001dc:	080081a8 	.word	0x080081a8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80005ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80005b0:	f004 f8a0 	bl	80046f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80005b4:	480c      	ldr	r0, [pc, #48]	@ (80005e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80005b6:	490d      	ldr	r1, [pc, #52]	@ (80005ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80005b8:	4a0d      	ldr	r2, [pc, #52]	@ (80005f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80005ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005bc:	e002      	b.n	80005c4 <LoopCopyDataInit>

080005be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c2:	3304      	adds	r3, #4

080005c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c8:	d3f9      	bcc.n	80005be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ca:	4a0a      	ldr	r2, [pc, #40]	@ (80005f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80005cc:	4c0a      	ldr	r4, [pc, #40]	@ (80005f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80005ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d0:	e001      	b.n	80005d6 <LoopFillZerobss>

080005d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d4:	3204      	adds	r2, #4

080005d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d8:	d3fb      	bcc.n	80005d2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80005da:	f007 f875 	bl	80076c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005de:	f000 fa79 	bl	8000ad4 <main>
  bx  lr    
 80005e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80005e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80005e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005ec:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 80005f0:	0801dbb0 	.word	0x0801dbb0
  ldr r2, =_sbss
 80005f4:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 80005f8:	200030f8 	.word	0x200030f8

080005fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005fc:	e7fe      	b.n	80005fc <ADC_IRQHandler>

080005fe <MX_TOF_Init>:
static void MX_53L7A1_ThresholdDetection_Init(void);
static void MX_53L7A1_ThresholdDetection_Process(void);
static void print_result(RANGING_SENSOR_Result_t *Result);

void MX_TOF_Init(void)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */

  MX_53L7A1_ThresholdDetection_Init();
 8000602:	f000 f809 	bl	8000618 <MX_53L7A1_ThresholdDetection_Init>

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}

0800060a <MX_TOF_Process>:

/*
 * LM background task
 */
void MX_TOF_Process(void)
{
 800060a:	b580      	push	{r7, lr}
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TOF_Process_PreTreatment */

  /* USER CODE END TOF_Process_PreTreatment */

  MX_53L7A1_ThresholdDetection_Process();
 800060e:	f000 f84f 	bl	80006b0 <MX_53L7A1_ThresholdDetection_Process>

  /* USER CODE BEGIN TOF_Process_PostTreatment */

  /* USER CODE END TOF_Process_PostTreatment */
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
	...

08000618 <MX_53L7A1_ThresholdDetection_Init>:

static void MX_53L7A1_ThresholdDetection_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 800061c:	2000      	movs	r0, #0
 800061e:	f000 fbd5 	bl	8000dcc <BSP_COM_Init>

  /* Sensor reset */
  HAL_GPIO_WritePin(VL53L7A1_PWR_EN_C_PORT, VL53L7A1_PWR_EN_C_PIN, GPIO_PIN_RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	2101      	movs	r1, #1
 8000626:	481c      	ldr	r0, [pc, #112]	@ (8000698 <MX_53L7A1_ThresholdDetection_Init+0x80>)
 8000628:	f004 fc86 	bl	8004f38 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 800062c:	2002      	movs	r0, #2
 800062e:	f004 f8e5 	bl	80047fc <HAL_Delay>
  HAL_GPIO_WritePin(VL53L7A1_PWR_EN_C_PORT, VL53L7A1_PWR_EN_C_PIN, GPIO_PIN_SET);
 8000632:	2201      	movs	r2, #1
 8000634:	2101      	movs	r1, #1
 8000636:	4818      	ldr	r0, [pc, #96]	@ (8000698 <MX_53L7A1_ThresholdDetection_Init+0x80>)
 8000638:	f004 fc7e 	bl	8004f38 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 800063c:	2002      	movs	r0, #2
 800063e:	f004 f8dd 	bl	80047fc <HAL_Delay>
  HAL_GPIO_WritePin(VL53L7A1_LPn_C_PORT, VL53L7A1_LPn_C_PIN, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	2110      	movs	r1, #16
 8000646:	4814      	ldr	r0, [pc, #80]	@ (8000698 <MX_53L7A1_ThresholdDetection_Init+0x80>)
 8000648:	f004 fc76 	bl	8004f38 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 800064c:	2002      	movs	r0, #2
 800064e:	f004 f8d5 	bl	80047fc <HAL_Delay>
  HAL_GPIO_WritePin(VL53L7A1_LPn_C_PORT, VL53L7A1_LPn_C_PIN, GPIO_PIN_SET);
 8000652:	2201      	movs	r2, #1
 8000654:	2110      	movs	r1, #16
 8000656:	4810      	ldr	r0, [pc, #64]	@ (8000698 <MX_53L7A1_ThresholdDetection_Init+0x80>)
 8000658:	f004 fc6e 	bl	8004f38 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 800065c:	2002      	movs	r0, #2
 800065e:	f004 f8cd 	bl	80047fc <HAL_Delay>

  printf("\033[2H\033[2J");
 8000662:	480e      	ldr	r0, [pc, #56]	@ (800069c <MX_53L7A1_ThresholdDetection_Init+0x84>)
 8000664:	f006 fe8c 	bl	8007380 <iprintf>
  printf("53L7A1 Threshold Detection demo application\n");
 8000668:	480d      	ldr	r0, [pc, #52]	@ (80006a0 <MX_53L7A1_ThresholdDetection_Init+0x88>)
 800066a:	f006 fef9 	bl	8007460 <puts>
  printf("Sensor initialization...\n");
 800066e:	480d      	ldr	r0, [pc, #52]	@ (80006a4 <MX_53L7A1_ThresholdDetection_Init+0x8c>)
 8000670:	f006 fef6 	bl	8007460 <puts>

  status = VL53L7A1_RANGING_SENSOR_Init(VL53L7A1_DEV_CENTER);
 8000674:	2001      	movs	r0, #1
 8000676:	f000 fe7d 	bl	8001374 <VL53L7A1_RANGING_SENSOR_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	4a0a      	ldr	r2, [pc, #40]	@ (80006a8 <MX_53L7A1_ThresholdDetection_Init+0x90>)
 800067e:	6013      	str	r3, [r2, #0]

  if (status != BSP_ERROR_NONE)
 8000680:	4b09      	ldr	r3, [pc, #36]	@ (80006a8 <MX_53L7A1_ThresholdDetection_Init+0x90>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d004      	beq.n	8000692 <MX_53L7A1_ThresholdDetection_Init+0x7a>
  {
    printf("VL53L7A1_RANGING_SENSOR_Init failed\n");
 8000688:	4808      	ldr	r0, [pc, #32]	@ (80006ac <MX_53L7A1_ThresholdDetection_Init+0x94>)
 800068a:	f006 fee9 	bl	8007460 <puts>
    while (1);
 800068e:	bf00      	nop
 8000690:	e7fd      	b.n	800068e <MX_53L7A1_ThresholdDetection_Init+0x76>
  }
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40020400 	.word	0x40020400
 800069c:	080081c0 	.word	0x080081c0
 80006a0:	080081cc 	.word	0x080081cc
 80006a4:	080081f8 	.word	0x080081f8
 80006a8:	200005e8 	.word	0x200005e8
 80006ac:	08008214 	.word	0x08008214

080006b0 <MX_53L7A1_ThresholdDetection_Process>:

static void MX_53L7A1_ThresholdDetection_Process(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
  uint32_t Id;

  RANGING_SENSOR_ITConfig_t ITConfig;

  VL53L7A1_RANGING_SENSOR_ReadID(VL53L7A1_DEV_CENTER, &Id);
 80006b6:	f107 030c 	add.w	r3, r7, #12
 80006ba:	4619      	mov	r1, r3
 80006bc:	2001      	movs	r0, #1
 80006be:	f000 fe6d 	bl	800139c <VL53L7A1_RANGING_SENSOR_ReadID>
  VL53L7A1_RANGING_SENSOR_GetCapabilities(VL53L7A1_DEV_CENTER, &Cap);
 80006c2:	492c      	ldr	r1, [pc, #176]	@ (8000774 <MX_53L7A1_ThresholdDetection_Process+0xc4>)
 80006c4:	2001      	movs	r0, #1
 80006c6:	f000 fe91 	bl	80013ec <VL53L7A1_RANGING_SENSOR_GetCapabilities>

  Profile.RangingProfile = RS_PROFILE_4x4_CONTINUOUS;
 80006ca:	4b2b      	ldr	r3, [pc, #172]	@ (8000778 <MX_53L7A1_ThresholdDetection_Process+0xc8>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	601a      	str	r2, [r3, #0]
  Profile.TimingBudget = TIMING_BUDGET;
 80006d0:	4b29      	ldr	r3, [pc, #164]	@ (8000778 <MX_53L7A1_ThresholdDetection_Process+0xc8>)
 80006d2:	221e      	movs	r2, #30
 80006d4:	605a      	str	r2, [r3, #4]
  Profile.Frequency = RANGING_FREQUENCY; /* Ranging frequency Hz (shall be consistent with TimingBudget value) */
 80006d6:	4b28      	ldr	r3, [pc, #160]	@ (8000778 <MX_53L7A1_ThresholdDetection_Process+0xc8>)
 80006d8:	220a      	movs	r2, #10
 80006da:	609a      	str	r2, [r3, #8]
  Profile.EnableAmbient = 0; /* Enable: 1, Disable: 0 */
 80006dc:	4b26      	ldr	r3, [pc, #152]	@ (8000778 <MX_53L7A1_ThresholdDetection_Process+0xc8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  Profile.EnableSignal = 0; /* Enable: 1, Disable: 0 */
 80006e2:	4b25      	ldr	r3, [pc, #148]	@ (8000778 <MX_53L7A1_ThresholdDetection_Process+0xc8>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]

  /* set the profile if different from default one */
  VL53L7A1_RANGING_SENSOR_ConfigProfile(VL53L7A1_DEV_CENTER, &Profile);
 80006e8:	4923      	ldr	r1, [pc, #140]	@ (8000778 <MX_53L7A1_ThresholdDetection_Process+0xc8>)
 80006ea:	2001      	movs	r0, #1
 80006ec:	f000 fea6 	bl	800143c <VL53L7A1_RANGING_SENSOR_ConfigProfile>

  /* threshold parameters */
  ITConfig.Criteria = RS_IT_IN_WINDOW;
 80006f0:	2300      	movs	r3, #0
 80006f2:	603b      	str	r3, [r7, #0]
  ITConfig.LowThreshold = LOW_THRESHOLD; /* mm */
 80006f4:	23c8      	movs	r3, #200	@ 0xc8
 80006f6:	607b      	str	r3, [r7, #4]
  ITConfig.HighThreshold = HIGH_THRESHOLD; /* mm */
 80006f8:	f44f 7316 	mov.w	r3, #600	@ 0x258
 80006fc:	60bb      	str	r3, [r7, #8]

  VL53L7A1_RANGING_SENSOR_ConfigIT(VL53L7A1_DEV_CENTER, &ITConfig);
 80006fe:	463b      	mov	r3, r7
 8000700:	4619      	mov	r1, r3
 8000702:	2001      	movs	r0, #1
 8000704:	f000 fec2 	bl	800148c <VL53L7A1_RANGING_SENSOR_ConfigIT>

  status = VL53L7A1_RANGING_SENSOR_Start(VL53L7A1_DEV_CENTER, RS_MODE_ASYNC_CONTINUOUS);
 8000708:	2103      	movs	r1, #3
 800070a:	2001      	movs	r0, #1
 800070c:	f000 ff0e 	bl	800152c <VL53L7A1_RANGING_SENSOR_Start>
 8000710:	4603      	mov	r3, r0
 8000712:	4a1a      	ldr	r2, [pc, #104]	@ (800077c <MX_53L7A1_ThresholdDetection_Process+0xcc>)
 8000714:	6013      	str	r3, [r2, #0]

  if (status != BSP_ERROR_NONE)
 8000716:	4b19      	ldr	r3, [pc, #100]	@ (800077c <MX_53L7A1_ThresholdDetection_Process+0xcc>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d004      	beq.n	8000728 <MX_53L7A1_ThresholdDetection_Process+0x78>
  {
    printf("VL53L7A1_RANGING_SENSOR_Start failed\n");
 800071e:	4818      	ldr	r0, [pc, #96]	@ (8000780 <MX_53L7A1_ThresholdDetection_Process+0xd0>)
 8000720:	f006 fe9e 	bl	8007460 <puts>
    while (1);
 8000724:	bf00      	nop
 8000726:	e7fd      	b.n	8000724 <MX_53L7A1_ThresholdDetection_Process+0x74>
  }

  printf("\033[2H\033[2J");
 8000728:	4816      	ldr	r0, [pc, #88]	@ (8000784 <MX_53L7A1_ThresholdDetection_Process+0xd4>)
 800072a:	f006 fe29 	bl	8007380 <iprintf>
  printf("53L7A1 Threshold Detection demo application\n");
 800072e:	4816      	ldr	r0, [pc, #88]	@ (8000788 <MX_53L7A1_ThresholdDetection_Process+0xd8>)
 8000730:	f006 fe96 	bl	8007460 <puts>
  printf("-------------------------------------------\n\n");
 8000734:	4815      	ldr	r0, [pc, #84]	@ (800078c <MX_53L7A1_ThresholdDetection_Process+0xdc>)
 8000736:	f006 fe93 	bl	8007460 <puts>
  printf("please put a target between %d and %d millimeters from the sensor\n",
 800073a:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800073e:	21c8      	movs	r1, #200	@ 0xc8
 8000740:	4813      	ldr	r0, [pc, #76]	@ (8000790 <MX_53L7A1_ThresholdDetection_Process+0xe0>)
 8000742:	f006 fe1d 	bl	8007380 <iprintf>
		  LOW_THRESHOLD, HIGH_THRESHOLD);

  while (1)
  {
    /* interrupt mode */
    if (ToF_EventDetected != 0)
 8000746:	4b13      	ldr	r3, [pc, #76]	@ (8000794 <MX_53L7A1_ThresholdDetection_Process+0xe4>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	b2db      	uxtb	r3, r3
 800074c:	2b00      	cmp	r3, #0
 800074e:	d0fa      	beq.n	8000746 <MX_53L7A1_ThresholdDetection_Process+0x96>
    {
      ToF_EventDetected = 0;
 8000750:	4b10      	ldr	r3, [pc, #64]	@ (8000794 <MX_53L7A1_ThresholdDetection_Process+0xe4>)
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]

      status = VL53L7A1_RANGING_SENSOR_GetDistance(VL53L7A1_DEV_CENTER, &Result);
 8000756:	4910      	ldr	r1, [pc, #64]	@ (8000798 <MX_53L7A1_ThresholdDetection_Process+0xe8>)
 8000758:	2001      	movs	r0, #1
 800075a:	f000 febf 	bl	80014dc <VL53L7A1_RANGING_SENSOR_GetDistance>
 800075e:	4603      	mov	r3, r0
 8000760:	4a06      	ldr	r2, [pc, #24]	@ (800077c <MX_53L7A1_ThresholdDetection_Process+0xcc>)
 8000762:	6013      	str	r3, [r2, #0]

      if (status == BSP_ERROR_NONE)
 8000764:	4b05      	ldr	r3, [pc, #20]	@ (800077c <MX_53L7A1_ThresholdDetection_Process+0xcc>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d1ec      	bne.n	8000746 <MX_53L7A1_ThresholdDetection_Process+0x96>
      {
        print_result(&Result);
 800076c:	480a      	ldr	r0, [pc, #40]	@ (8000798 <MX_53L7A1_ThresholdDetection_Process+0xe8>)
 800076e:	f000 f815 	bl	800079c <print_result>
    if (ToF_EventDetected != 0)
 8000772:	e7e8      	b.n	8000746 <MX_53L7A1_ThresholdDetection_Process+0x96>
 8000774:	200000c0 	.word	0x200000c0
 8000778:	200000d0 	.word	0x200000d0
 800077c:	200005e8 	.word	0x200005e8
 8000780:	08008238 	.word	0x08008238
 8000784:	080081c0 	.word	0x080081c0
 8000788:	080081cc 	.word	0x080081cc
 800078c:	08008260 	.word	0x08008260
 8000790:	08008290 	.word	0x08008290
 8000794:	200005ec 	.word	0x200005ec
 8000798:	200000e4 	.word	0x200000e4

0800079c <print_result>:
    }
  }
}

static void print_result(RANGING_SENSOR_Result_t *Result)
{
 800079c:	b590      	push	{r4, r7, lr}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  int8_t j;
  int8_t k;
  int8_t l;
  uint8_t zones_per_line;

  zones_per_line = ((Profile.RangingProfile == RS_PROFILE_8x8_AUTONOMOUS) ||
 80007a4:	4bab      	ldr	r3, [pc, #684]	@ (8000a54 <print_result+0x2b8>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2b04      	cmp	r3, #4
 80007aa:	d003      	beq.n	80007b4 <print_result+0x18>
                    (Profile.RangingProfile == RS_PROFILE_8x8_CONTINUOUS)) ? 8 : 4;
 80007ac:	4ba9      	ldr	r3, [pc, #676]	@ (8000a54 <print_result+0x2b8>)
 80007ae:	681b      	ldr	r3, [r3, #0]
  zones_per_line = ((Profile.RangingProfile == RS_PROFILE_8x8_AUTONOMOUS) ||
 80007b0:	2b03      	cmp	r3, #3
 80007b2:	d101      	bne.n	80007b8 <print_result+0x1c>
 80007b4:	2308      	movs	r3, #8
 80007b6:	e000      	b.n	80007ba <print_result+0x1e>
 80007b8:	2304      	movs	r3, #4
 80007ba:	72fb      	strb	r3, [r7, #11]

  printf("%c[2H", 27); /* clear screen */
 80007bc:	211b      	movs	r1, #27
 80007be:	48a6      	ldr	r0, [pc, #664]	@ (8000a58 <print_result+0x2bc>)
 80007c0:	f006 fdde 	bl	8007380 <iprintf>
  printf("53L7A1 Threshold Detection demo application\n");
 80007c4:	48a5      	ldr	r0, [pc, #660]	@ (8000a5c <print_result+0x2c0>)
 80007c6:	f006 fe4b 	bl	8007460 <puts>
  printf("-------------------------------------------\n\n");
 80007ca:	48a5      	ldr	r0, [pc, #660]	@ (8000a60 <print_result+0x2c4>)
 80007cc:	f006 fe48 	bl	8007460 <puts>

  printf("Cell Format :\n\n");
 80007d0:	48a4      	ldr	r0, [pc, #656]	@ (8000a64 <print_result+0x2c8>)
 80007d2:	f006 fe45 	bl	8007460 <puts>
  for (l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++)
 80007d6:	2300      	movs	r3, #0
 80007d8:	733b      	strb	r3, [r7, #12]
 80007da:	e017      	b.n	800080c <print_result+0x70>
  {
    printf(" \033[38;5;10m%20s\033[0m : %20s\n", "Distance [mm]", "Status");
 80007dc:	4aa2      	ldr	r2, [pc, #648]	@ (8000a68 <print_result+0x2cc>)
 80007de:	49a3      	ldr	r1, [pc, #652]	@ (8000a6c <print_result+0x2d0>)
 80007e0:	48a3      	ldr	r0, [pc, #652]	@ (8000a70 <print_result+0x2d4>)
 80007e2:	f006 fdcd 	bl	8007380 <iprintf>
    if ((Profile.EnableAmbient != 0) || (Profile.EnableSignal != 0))
 80007e6:	4b9b      	ldr	r3, [pc, #620]	@ (8000a54 <print_result+0x2b8>)
 80007e8:	68db      	ldr	r3, [r3, #12]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d103      	bne.n	80007f6 <print_result+0x5a>
 80007ee:	4b99      	ldr	r3, [pc, #612]	@ (8000a54 <print_result+0x2b8>)
 80007f0:	691b      	ldr	r3, [r3, #16]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d004      	beq.n	8000800 <print_result+0x64>
    {
      printf(" %20s : %20s\n", "Signal [kcps/spad]", "Ambient [kcps/spad]");
 80007f6:	4a9f      	ldr	r2, [pc, #636]	@ (8000a74 <print_result+0x2d8>)
 80007f8:	499f      	ldr	r1, [pc, #636]	@ (8000a78 <print_result+0x2dc>)
 80007fa:	48a0      	ldr	r0, [pc, #640]	@ (8000a7c <print_result+0x2e0>)
 80007fc:	f006 fdc0 	bl	8007380 <iprintf>
  for (l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++)
 8000800:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8000804:	b2db      	uxtb	r3, r3
 8000806:	3301      	adds	r3, #1
 8000808:	b2db      	uxtb	r3, r3
 800080a:	733b      	strb	r3, [r7, #12]
 800080c:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d0e3      	beq.n	80007dc <print_result+0x40>
    }
  }

  printf("\n\n");
 8000814:	489a      	ldr	r0, [pc, #616]	@ (8000a80 <print_result+0x2e4>)
 8000816:	f006 fe23 	bl	8007460 <puts>

  for (j = 0; j < Result->NumberOfZones; j += zones_per_line)
 800081a:	2300      	movs	r3, #0
 800081c:	73bb      	strb	r3, [r7, #14]
 800081e:	e0f9      	b.n	8000a14 <print_result+0x278>
  {
    for (i = 0; i < zones_per_line; i++) /* number of zones per line */
 8000820:	2300      	movs	r3, #0
 8000822:	73fb      	strb	r3, [r7, #15]
 8000824:	e008      	b.n	8000838 <print_result+0x9c>
    {
      printf(" -----------------");
 8000826:	4897      	ldr	r0, [pc, #604]	@ (8000a84 <print_result+0x2e8>)
 8000828:	f006 fdaa 	bl	8007380 <iprintf>
    for (i = 0; i < zones_per_line; i++) /* number of zones per line */
 800082c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000830:	b2db      	uxtb	r3, r3
 8000832:	3301      	adds	r3, #1
 8000834:	b2db      	uxtb	r3, r3
 8000836:	73fb      	strb	r3, [r7, #15]
 8000838:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800083c:	7afb      	ldrb	r3, [r7, #11]
 800083e:	429a      	cmp	r2, r3
 8000840:	dbf1      	blt.n	8000826 <print_result+0x8a>
    }
    printf("\n");
 8000842:	200a      	movs	r0, #10
 8000844:	f006 fdae 	bl	80073a4 <putchar>

    for (i = 0; i < zones_per_line; i++)
 8000848:	2300      	movs	r3, #0
 800084a:	73fb      	strb	r3, [r7, #15]
 800084c:	e008      	b.n	8000860 <print_result+0xc4>
    {
      printf("|                 ");
 800084e:	488e      	ldr	r0, [pc, #568]	@ (8000a88 <print_result+0x2ec>)
 8000850:	f006 fd96 	bl	8007380 <iprintf>
    for (i = 0; i < zones_per_line; i++)
 8000854:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000858:	b2db      	uxtb	r3, r3
 800085a:	3301      	adds	r3, #1
 800085c:	b2db      	uxtb	r3, r3
 800085e:	73fb      	strb	r3, [r7, #15]
 8000860:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000864:	7afb      	ldrb	r3, [r7, #11]
 8000866:	429a      	cmp	r2, r3
 8000868:	dbf1      	blt.n	800084e <print_result+0xb2>
    }
    printf("|\n");
 800086a:	4888      	ldr	r0, [pc, #544]	@ (8000a8c <print_result+0x2f0>)
 800086c:	f006 fdf8 	bl	8007460 <puts>

    for (l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++)
 8000870:	2300      	movs	r3, #0
 8000872:	733b      	strb	r3, [r7, #12]
 8000874:	e0c4      	b.n	8000a00 <print_result+0x264>
    {
      /* Print distance and status */
      for (k = (zones_per_line - 1); k >= 0; k--)
 8000876:	7afb      	ldrb	r3, [r7, #11]
 8000878:	3b01      	subs	r3, #1
 800087a:	b2db      	uxtb	r3, r3
 800087c:	737b      	strb	r3, [r7, #13]
 800087e:	e03f      	b.n	8000900 <print_result+0x164>
      {
        if (Result->ZoneResult[j + k].NumberOfTargets > 0)
 8000880:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8000884:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000888:	441a      	add	r2, r3
 800088a:	6879      	ldr	r1, [r7, #4]
 800088c:	4613      	mov	r3, r2
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	4413      	add	r3, r2
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	440b      	add	r3, r1
 8000896:	3304      	adds	r3, #4
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d025      	beq.n	80008ea <print_result+0x14e>
          printf("| \033[38;5;10m%5ld\033[0m  :  %5ld ",
                 (long)Result->ZoneResult[j + k].Distance[l],
 800089e:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80008a2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80008a6:	441a      	add	r2, r3
 80008a8:	f997 000c 	ldrsb.w	r0, [r7, #12]
 80008ac:	6879      	ldr	r1, [r7, #4]
 80008ae:	4613      	mov	r3, r2
 80008b0:	009b      	lsls	r3, r3, #2
 80008b2:	4413      	add	r3, r2
 80008b4:	4403      	add	r3, r0
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	440b      	add	r3, r1
 80008ba:	689b      	ldr	r3, [r3, #8]
          printf("| \033[38;5;10m%5ld\033[0m  :  %5ld ",
 80008bc:	461c      	mov	r4, r3
                 (long)Result->ZoneResult[j + k].Status[l]);
 80008be:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80008c2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80008c6:	441a      	add	r2, r3
 80008c8:	f997 000c 	ldrsb.w	r0, [r7, #12]
 80008cc:	6879      	ldr	r1, [r7, #4]
 80008ce:	4613      	mov	r3, r2
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	4413      	add	r3, r2
 80008d4:	4403      	add	r3, r0
 80008d6:	3302      	adds	r3, #2
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	440b      	add	r3, r1
 80008dc:	685b      	ldr	r3, [r3, #4]
          printf("| \033[38;5;10m%5ld\033[0m  :  %5ld ",
 80008de:	461a      	mov	r2, r3
 80008e0:	4621      	mov	r1, r4
 80008e2:	486b      	ldr	r0, [pc, #428]	@ (8000a90 <print_result+0x2f4>)
 80008e4:	f006 fd4c 	bl	8007380 <iprintf>
 80008e8:	e004      	b.n	80008f4 <print_result+0x158>
        else
          printf("| %5s  :  %5s ", "X", "X");
 80008ea:	4a6a      	ldr	r2, [pc, #424]	@ (8000a94 <print_result+0x2f8>)
 80008ec:	4969      	ldr	r1, [pc, #420]	@ (8000a94 <print_result+0x2f8>)
 80008ee:	486a      	ldr	r0, [pc, #424]	@ (8000a98 <print_result+0x2fc>)
 80008f0:	f006 fd46 	bl	8007380 <iprintf>
      for (k = (zones_per_line - 1); k >= 0; k--)
 80008f4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	3b01      	subs	r3, #1
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	737b      	strb	r3, [r7, #13]
 8000900:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000904:	2b00      	cmp	r3, #0
 8000906:	dabb      	bge.n	8000880 <print_result+0xe4>
      }
      printf("|\n");
 8000908:	4860      	ldr	r0, [pc, #384]	@ (8000a8c <print_result+0x2f0>)
 800090a:	f006 fda9 	bl	8007460 <puts>

      if ((Profile.EnableAmbient != 0) || (Profile.EnableSignal != 0))
 800090e:	4b51      	ldr	r3, [pc, #324]	@ (8000a54 <print_result+0x2b8>)
 8000910:	68db      	ldr	r3, [r3, #12]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d103      	bne.n	800091e <print_result+0x182>
 8000916:	4b4f      	ldr	r3, [pc, #316]	@ (8000a54 <print_result+0x2b8>)
 8000918:	691b      	ldr	r3, [r3, #16]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d06a      	beq.n	80009f4 <print_result+0x258>
      {
        /* Print Signal and Ambient */
        for (k = (zones_per_line - 1); k >= 0; k--)
 800091e:	7afb      	ldrb	r3, [r7, #11]
 8000920:	3b01      	subs	r3, #1
 8000922:	b2db      	uxtb	r3, r3
 8000924:	737b      	strb	r3, [r7, #13]
 8000926:	e05e      	b.n	80009e6 <print_result+0x24a>
        {
          if (Result->ZoneResult[j + k].NumberOfTargets > 0)
 8000928:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800092c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000930:	441a      	add	r2, r3
 8000932:	6879      	ldr	r1, [r7, #4]
 8000934:	4613      	mov	r3, r2
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	4413      	add	r3, r2
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	440b      	add	r3, r1
 800093e:	3304      	adds	r3, #4
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d044      	beq.n	80009d0 <print_result+0x234>
          {
            if (Profile.EnableSignal != 0)
 8000946:	4b43      	ldr	r3, [pc, #268]	@ (8000a54 <print_result+0x2b8>)
 8000948:	691b      	ldr	r3, [r3, #16]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d019      	beq.n	8000982 <print_result+0x1e6>
            {
              printf("| %5ld  :  ", (long)Result->ZoneResult[j + k].Signal[l]);
 800094e:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8000952:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000956:	441a      	add	r2, r3
 8000958:	f997 000c 	ldrsb.w	r0, [r7, #12]
 800095c:	6879      	ldr	r1, [r7, #4]
 800095e:	4613      	mov	r3, r2
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	4413      	add	r3, r2
 8000964:	4403      	add	r3, r0
 8000966:	3304      	adds	r3, #4
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	440b      	add	r3, r1
 800096c:	3304      	adds	r3, #4
 800096e:	edd3 7a00 	vldr	s15, [r3]
 8000972:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000976:	ee17 1a90 	vmov	r1, s15
 800097a:	4848      	ldr	r0, [pc, #288]	@ (8000a9c <print_result+0x300>)
 800097c:	f006 fd00 	bl	8007380 <iprintf>
 8000980:	e003      	b.n	800098a <print_result+0x1ee>
            }
            else
              printf("| %5s  :  ", "X");
 8000982:	4944      	ldr	r1, [pc, #272]	@ (8000a94 <print_result+0x2f8>)
 8000984:	4846      	ldr	r0, [pc, #280]	@ (8000aa0 <print_result+0x304>)
 8000986:	f006 fcfb 	bl	8007380 <iprintf>

            if (Profile.EnableAmbient != 0)
 800098a:	4b32      	ldr	r3, [pc, #200]	@ (8000a54 <print_result+0x2b8>)
 800098c:	68db      	ldr	r3, [r3, #12]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d019      	beq.n	80009c6 <print_result+0x22a>
            {
              printf("%5ld ", (long)Result->ZoneResult[j + k].Ambient[l]);
 8000992:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8000996:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800099a:	441a      	add	r2, r3
 800099c:	f997 000c 	ldrsb.w	r0, [r7, #12]
 80009a0:	6879      	ldr	r1, [r7, #4]
 80009a2:	4613      	mov	r3, r2
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	4413      	add	r3, r2
 80009a8:	4403      	add	r3, r0
 80009aa:	3302      	adds	r3, #2
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	440b      	add	r3, r1
 80009b0:	3308      	adds	r3, #8
 80009b2:	edd3 7a00 	vldr	s15, [r3]
 80009b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009ba:	ee17 1a90 	vmov	r1, s15
 80009be:	4839      	ldr	r0, [pc, #228]	@ (8000aa4 <print_result+0x308>)
 80009c0:	f006 fcde 	bl	8007380 <iprintf>
 80009c4:	e009      	b.n	80009da <print_result+0x23e>
            }
            else
              printf("%5s ", "X");
 80009c6:	4933      	ldr	r1, [pc, #204]	@ (8000a94 <print_result+0x2f8>)
 80009c8:	4837      	ldr	r0, [pc, #220]	@ (8000aa8 <print_result+0x30c>)
 80009ca:	f006 fcd9 	bl	8007380 <iprintf>
 80009ce:	e004      	b.n	80009da <print_result+0x23e>
          }
          else
            printf("| %5s  :  %5s ", "X", "X");
 80009d0:	4a30      	ldr	r2, [pc, #192]	@ (8000a94 <print_result+0x2f8>)
 80009d2:	4930      	ldr	r1, [pc, #192]	@ (8000a94 <print_result+0x2f8>)
 80009d4:	4830      	ldr	r0, [pc, #192]	@ (8000a98 <print_result+0x2fc>)
 80009d6:	f006 fcd3 	bl	8007380 <iprintf>
        for (k = (zones_per_line - 1); k >= 0; k--)
 80009da:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	3b01      	subs	r3, #1
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	737b      	strb	r3, [r7, #13]
 80009e6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	da9c      	bge.n	8000928 <print_result+0x18c>
        }
        printf("|\n");
 80009ee:	4827      	ldr	r0, [pc, #156]	@ (8000a8c <print_result+0x2f0>)
 80009f0:	f006 fd36 	bl	8007460 <puts>
    for (l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++)
 80009f4:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	3301      	adds	r3, #1
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	733b      	strb	r3, [r7, #12]
 8000a00:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	f43f af36 	beq.w	8000876 <print_result+0xda>
  for (j = 0; j < Result->NumberOfZones; j += zones_per_line)
 8000a0a:	7bba      	ldrb	r2, [r7, #14]
 8000a0c:	7afb      	ldrb	r3, [r7, #11]
 8000a0e:	4413      	add	r3, r2
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	73bb      	strb	r3, [r7, #14]
 8000a14:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	f4ff aeff 	bcc.w	8000820 <print_result+0x84>
      }
    }
  }

  for (i = 0; i < zones_per_line; i++)
 8000a22:	2300      	movs	r3, #0
 8000a24:	73fb      	strb	r3, [r7, #15]
 8000a26:	e008      	b.n	8000a3a <print_result+0x29e>
  {
    printf(" -----------------");
 8000a28:	4816      	ldr	r0, [pc, #88]	@ (8000a84 <print_result+0x2e8>)
 8000a2a:	f006 fca9 	bl	8007380 <iprintf>
  for (i = 0; i < zones_per_line; i++)
 8000a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	3301      	adds	r3, #1
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	73fb      	strb	r3, [r7, #15]
 8000a3a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000a3e:	7afb      	ldrb	r3, [r7, #11]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	dbf1      	blt.n	8000a28 <print_result+0x28c>
  }
  printf("\n");
 8000a44:	200a      	movs	r0, #10
 8000a46:	f006 fcad 	bl	80073a4 <putchar>
}
 8000a4a:	bf00      	nop
 8000a4c:	3714      	adds	r7, #20
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd90      	pop	{r4, r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200000d0 	.word	0x200000d0
 8000a58:	080082d4 	.word	0x080082d4
 8000a5c:	080081cc 	.word	0x080081cc
 8000a60:	08008260 	.word	0x08008260
 8000a64:	080082dc 	.word	0x080082dc
 8000a68:	080082ec 	.word	0x080082ec
 8000a6c:	080082f4 	.word	0x080082f4
 8000a70:	08008304 	.word	0x08008304
 8000a74:	08008320 	.word	0x08008320
 8000a78:	08008334 	.word	0x08008334
 8000a7c:	08008348 	.word	0x08008348
 8000a80:	08008358 	.word	0x08008358
 8000a84:	0800835c 	.word	0x0800835c
 8000a88:	08008370 	.word	0x08008370
 8000a8c:	08008384 	.word	0x08008384
 8000a90:	08008388 	.word	0x08008388
 8000a94:	080083a8 	.word	0x080083a8
 8000a98:	080083ac 	.word	0x080083ac
 8000a9c:	080083bc 	.word	0x080083bc
 8000aa0:	080083c8 	.word	0x080083c8
 8000aa4:	080083d4 	.word	0x080083d4
 8000aa8:	080083dc 	.word	0x080083dc

08000aac <HAL_GPIO_EXTI_Callback>:
    ToF_EventDetected = 1;
  }
}
#else
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == TOF_INT_EXTI_PIN)
 8000ab6:	88fb      	ldrh	r3, [r7, #6]
 8000ab8:	2b10      	cmp	r3, #16
 8000aba:	d102      	bne.n	8000ac2 <HAL_GPIO_EXTI_Callback+0x16>
  {
    ToF_EventDetected = 1;
 8000abc:	4b04      	ldr	r3, [pc, #16]	@ (8000ad0 <HAL_GPIO_EXTI_Callback+0x24>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	701a      	strb	r2, [r3, #0]
  }
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	200005ec 	.word	0x200005ec

08000ad4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ad8:	f003 fe1e 	bl	8004718 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000adc:	f000 f808 	bl	8000af0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae0:	f000 f872 	bl	8000bc8 <MX_GPIO_Init>
  MX_TOF_Init();
 8000ae4:	f7ff fd8b 	bl	80005fe <MX_TOF_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_TOF_Process();
 8000ae8:	f7ff fd8f 	bl	800060a <MX_TOF_Process>
 8000aec:	e7fc      	b.n	8000ae8 <main+0x14>
	...

08000af0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b094      	sub	sp, #80	@ 0x50
 8000af4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af6:	f107 0320 	add.w	r3, r7, #32
 8000afa:	2230      	movs	r2, #48	@ 0x30
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f006 fd8e 	bl	8007620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b14:	2300      	movs	r3, #0
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	4b29      	ldr	r3, [pc, #164]	@ (8000bc0 <SystemClock_Config+0xd0>)
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1c:	4a28      	ldr	r2, [pc, #160]	@ (8000bc0 <SystemClock_Config+0xd0>)
 8000b1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b22:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b24:	4b26      	ldr	r3, [pc, #152]	@ (8000bc0 <SystemClock_Config+0xd0>)
 8000b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b30:	2300      	movs	r3, #0
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	4b23      	ldr	r3, [pc, #140]	@ (8000bc4 <SystemClock_Config+0xd4>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b3c:	4a21      	ldr	r2, [pc, #132]	@ (8000bc4 <SystemClock_Config+0xd4>)
 8000b3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b42:	6013      	str	r3, [r2, #0]
 8000b44:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc4 <SystemClock_Config+0xd4>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b50:	2302      	movs	r3, #2
 8000b52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b54:	2301      	movs	r3, #1
 8000b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b58:	2310      	movs	r3, #16
 8000b5a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b60:	2300      	movs	r3, #0
 8000b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b64:	2310      	movs	r3, #16
 8000b66:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b68:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000b6c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b6e:	2304      	movs	r3, #4
 8000b70:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b72:	2307      	movs	r3, #7
 8000b74:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b76:	f107 0320 	add.w	r3, r7, #32
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f005 fa90 	bl	80060a0 <HAL_RCC_OscConfig>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b86:	f000 f8bd 	bl	8000d04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b8a:	230f      	movs	r3, #15
 8000b8c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b9a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ba0:	f107 030c 	add.w	r3, r7, #12
 8000ba4:	2102      	movs	r1, #2
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f005 fcf2 	bl	8006590 <HAL_RCC_ClockConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000bb2:	f000 f8a7 	bl	8000d04 <Error_Handler>
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	3750      	adds	r7, #80	@ 0x50
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40007000 	.word	0x40007000

08000bc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	@ 0x28
 8000bcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
 8000bdc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	4b44      	ldr	r3, [pc, #272]	@ (8000cf4 <MX_GPIO_Init+0x12c>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	4a43      	ldr	r2, [pc, #268]	@ (8000cf4 <MX_GPIO_Init+0x12c>)
 8000be8:	f043 0304 	orr.w	r3, r3, #4
 8000bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bee:	4b41      	ldr	r3, [pc, #260]	@ (8000cf4 <MX_GPIO_Init+0x12c>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	f003 0304 	and.w	r3, r3, #4
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	4b3d      	ldr	r3, [pc, #244]	@ (8000cf4 <MX_GPIO_Init+0x12c>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	4a3c      	ldr	r2, [pc, #240]	@ (8000cf4 <MX_GPIO_Init+0x12c>)
 8000c04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0a:	4b3a      	ldr	r3, [pc, #232]	@ (8000cf4 <MX_GPIO_Init+0x12c>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	4b36      	ldr	r3, [pc, #216]	@ (8000cf4 <MX_GPIO_Init+0x12c>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	4a35      	ldr	r2, [pc, #212]	@ (8000cf4 <MX_GPIO_Init+0x12c>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c26:	4b33      	ldr	r3, [pc, #204]	@ (8000cf4 <MX_GPIO_Init+0x12c>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	4b2f      	ldr	r3, [pc, #188]	@ (8000cf4 <MX_GPIO_Init+0x12c>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	4a2e      	ldr	r2, [pc, #184]	@ (8000cf4 <MX_GPIO_Init+0x12c>)
 8000c3c:	f043 0302 	orr.w	r3, r3, #2
 8000c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c42:	4b2c      	ldr	r3, [pc, #176]	@ (8000cf4 <MX_GPIO_Init+0x12c>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2120      	movs	r1, #32
 8000c52:	4829      	ldr	r0, [pc, #164]	@ (8000cf8 <MX_GPIO_Init+0x130>)
 8000c54:	f004 f970 	bl	8004f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_4, GPIO_PIN_SET);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	2111      	movs	r1, #17
 8000c5c:	4827      	ldr	r0, [pc, #156]	@ (8000cfc <MX_GPIO_Init+0x134>)
 8000c5e:	f004 f96b 	bl	8004f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2108      	movs	r1, #8
 8000c66:	4825      	ldr	r0, [pc, #148]	@ (8000cfc <MX_GPIO_Init+0x134>)
 8000c68:	f004 f966 	bl	8004f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c72:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4619      	mov	r1, r3
 8000c82:	481f      	ldr	r0, [pc, #124]	@ (8000d00 <MX_GPIO_Init+0x138>)
 8000c84:	f003 fef0 	bl	8004a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c88:	2310      	movs	r3, #16
 8000c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c8c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4816      	ldr	r0, [pc, #88]	@ (8000cf8 <MX_GPIO_Init+0x130>)
 8000c9e:	f003 fee3 	bl	8004a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ca2:	2320      	movs	r3, #32
 8000ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	480f      	ldr	r0, [pc, #60]	@ (8000cf8 <MX_GPIO_Init+0x130>)
 8000cba:	f003 fed5 	bl	8004a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8000cbe:	2319      	movs	r3, #25
 8000cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4809      	ldr	r0, [pc, #36]	@ (8000cfc <MX_GPIO_Init+0x134>)
 8000cd6:	f003 fec7 	bl	8004a68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2100      	movs	r1, #0
 8000cde:	200a      	movs	r0, #10
 8000ce0:	f003 fe8b 	bl	80049fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000ce4:	200a      	movs	r0, #10
 8000ce6:	f003 fea4 	bl	8004a32 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cea:	bf00      	nop
 8000cec:	3728      	adds	r7, #40	@ 0x28
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40020000 	.word	0x40020000
 8000cfc:	40020400 	.word	0x40020400
 8000d00:	40020800 	.word	0x40020800

08000d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d08:	b672      	cpsid	i
}
 8000d0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <Error_Handler+0x8>

08000d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	4b10      	ldr	r3, [pc, #64]	@ (8000d5c <HAL_MspInit+0x4c>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d1e:	4a0f      	ldr	r2, [pc, #60]	@ (8000d5c <HAL_MspInit+0x4c>)
 8000d20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d24:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d26:	4b0d      	ldr	r3, [pc, #52]	@ (8000d5c <HAL_MspInit+0x4c>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	603b      	str	r3, [r7, #0]
 8000d36:	4b09      	ldr	r3, [pc, #36]	@ (8000d5c <HAL_MspInit+0x4c>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3a:	4a08      	ldr	r2, [pc, #32]	@ (8000d5c <HAL_MspInit+0x4c>)
 8000d3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d42:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <HAL_MspInit+0x4c>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d4a:	603b      	str	r3, [r7, #0]
 8000d4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	40023800 	.word	0x40023800

08000d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <NMI_Handler+0x4>

08000d68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <HardFault_Handler+0x4>

08000d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <MemManage_Handler+0x4>

08000d78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <BusFault_Handler+0x4>

08000d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <UsageFault_Handler+0x4>

08000d88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db6:	f003 fd01 	bl	80047bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000dc2:	2010      	movs	r0, #16
 8000dc4:	f004 f8d2 	bl	8004f6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d903      	bls.n	8000de8 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000de0:	f06f 0301 	mvn.w	r3, #1
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	e025      	b.n	8000e34 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	79fa      	ldrb	r2, [r7, #7]
 8000dec:	4914      	ldr	r1, [pc, #80]	@ (8000e40 <BSP_COM_Init+0x74>)
 8000dee:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8000df2:	4814      	ldr	r0, [pc, #80]	@ (8000e44 <BSP_COM_Init+0x78>)
 8000df4:	4613      	mov	r3, r2
 8000df6:	00db      	lsls	r3, r3, #3
 8000df8:	4413      	add	r3, r2
 8000dfa:	00db      	lsls	r3, r3, #3
 8000dfc:	4403      	add	r3, r0
 8000dfe:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8000e00:	79fa      	ldrb	r2, [r7, #7]
 8000e02:	4613      	mov	r3, r2
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	4413      	add	r3, r2
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e44 <BSP_COM_Init+0x78>)
 8000e0c:	4413      	add	r3, r2
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 f864 	bl	8000edc <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8000e14:	79fa      	ldrb	r2, [r7, #7]
 8000e16:	4613      	mov	r3, r2
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	4413      	add	r3, r2
 8000e1c:	00db      	lsls	r3, r3, #3
 8000e1e:	4a09      	ldr	r2, [pc, #36]	@ (8000e44 <BSP_COM_Init+0x78>)
 8000e20:	4413      	add	r3, r2
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 f810 	bl	8000e48 <MX_USART2_UART_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d002      	beq.n	8000e34 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000e2e:	f06f 0303 	mvn.w	r3, #3
 8000e32:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000e34:	68fb      	ldr	r3, [r7, #12]
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000000 	.word	0x20000000
 8000e44:	200005f0 	.word	0x200005f0

08000e48 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000e50:	2300      	movs	r3, #0
 8000e52:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a12      	ldr	r2, [pc, #72]	@ (8000ea0 <MX_USART2_UART_Init+0x58>)
 8000e58:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 460800;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 8000e60:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2200      	movs	r2, #0
 8000e72:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	220c      	movs	r2, #12
 8000e78:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2200      	movs	r2, #0
 8000e84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f005 fda2 	bl	80069d0 <HAL_UART_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40004400 	.word	0x40004400

08000ea4 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8000eac:	4b09      	ldr	r3, [pc, #36]	@ (8000ed4 <__io_putchar+0x30>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	4413      	add	r3, r2
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	4a07      	ldr	r2, [pc, #28]	@ (8000ed8 <__io_putchar+0x34>)
 8000ebc:	1898      	adds	r0, r3, r2
 8000ebe:	1d39      	adds	r1, r7, #4
 8000ec0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	f005 fddd 	bl	8006a84 <HAL_UART_Transmit>
  return ch;
 8000eca:	687b      	ldr	r3, [r7, #4]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000638 	.word	0x20000638
 8000ed8:	200005f0 	.word	0x200005f0

08000edc <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08a      	sub	sp, #40	@ 0x28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f64 <USART2_MspInit+0x88>)
 8000eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eec:	4a1d      	ldr	r2, [pc, #116]	@ (8000f64 <USART2_MspInit+0x88>)
 8000eee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ef2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ef4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f64 <USART2_MspInit+0x88>)
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f00:	2300      	movs	r3, #0
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	4b17      	ldr	r3, [pc, #92]	@ (8000f64 <USART2_MspInit+0x88>)
 8000f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f08:	4a16      	ldr	r2, [pc, #88]	@ (8000f64 <USART2_MspInit+0x88>)
 8000f0a:	f043 0301 	orr.w	r3, r3, #1
 8000f0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f10:	4b14      	ldr	r3, [pc, #80]	@ (8000f64 <USART2_MspInit+0x88>)
 8000f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8000f1c:	2304      	movs	r3, #4
 8000f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8000f2c:	2307      	movs	r3, #7
 8000f2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	480c      	ldr	r0, [pc, #48]	@ (8000f68 <USART2_MspInit+0x8c>)
 8000f38:	f003 fd96 	bl	8004a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8000f3c:	2308      	movs	r3, #8
 8000f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2302      	movs	r3, #2
 8000f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8000f4c:	2307      	movs	r3, #7
 8000f4e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	4619      	mov	r1, r3
 8000f56:	4804      	ldr	r0, [pc, #16]	@ (8000f68 <USART2_MspInit+0x8c>)
 8000f58:	f003 fd86 	bl	8004a68 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	3728      	adds	r7, #40	@ 0x28
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40020000 	.word	0x40020000

08000f6c <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000f72:	2300      	movs	r3, #0
 8000f74:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000f76:	4b13      	ldr	r3, [pc, #76]	@ (8000fc4 <BSP_I2C1_Init+0x58>)
 8000f78:	4a13      	ldr	r2, [pc, #76]	@ (8000fc8 <BSP_I2C1_Init+0x5c>)
 8000f7a:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000f7c:	4b13      	ldr	r3, [pc, #76]	@ (8000fcc <BSP_I2C1_Init+0x60>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	1c5a      	adds	r2, r3, #1
 8000f82:	4912      	ldr	r1, [pc, #72]	@ (8000fcc <BSP_I2C1_Init+0x60>)
 8000f84:	600a      	str	r2, [r1, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d117      	bne.n	8000fba <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000f8a:	480e      	ldr	r0, [pc, #56]	@ (8000fc4 <BSP_I2C1_Init+0x58>)
 8000f8c:	f004 fcba 	bl	8005904 <HAL_I2C_GetState>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d111      	bne.n	8000fba <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000f96:	480b      	ldr	r0, [pc, #44]	@ (8000fc4 <BSP_I2C1_Init+0x58>)
 8000f98:	f000 f8e2 	bl	8001160 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d10b      	bne.n	8000fba <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000fa2:	4808      	ldr	r0, [pc, #32]	@ (8000fc4 <BSP_I2C1_Init+0x58>)
 8000fa4:	f000 f8a8 	bl	80010f8 <MX_I2C1_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d003      	beq.n	8000fb6 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000fae:	f06f 0307 	mvn.w	r3, #7
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	e001      	b.n	8000fba <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000fba:	687b      	ldr	r3, [r7, #4]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	2000063c 	.word	0x2000063c
 8000fc8:	40005400 	.word	0x40005400
 8000fcc:	20000690 	.word	0x20000690

08000fd0 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8000fda:	4b0f      	ldr	r3, [pc, #60]	@ (8001018 <BSP_I2C1_DeInit+0x48>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d014      	beq.n	800100c <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8001018 <BSP_I2C1_DeInit+0x48>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	4a0b      	ldr	r2, [pc, #44]	@ (8001018 <BSP_I2C1_DeInit+0x48>)
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	4b0a      	ldr	r3, [pc, #40]	@ (8001018 <BSP_I2C1_DeInit+0x48>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d10b      	bne.n	800100c <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8000ff4:	4809      	ldr	r0, [pc, #36]	@ (800101c <BSP_I2C1_DeInit+0x4c>)
 8000ff6:	f000 f8fd 	bl	80011f4 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8000ffa:	4808      	ldr	r0, [pc, #32]	@ (800101c <BSP_I2C1_DeInit+0x4c>)
 8000ffc:	f004 f912 	bl	8005224 <HAL_I2C_DeInit>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d002      	beq.n	800100c <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001006:	f06f 0307 	mvn.w	r3, #7
 800100a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 800100c:	687b      	ldr	r3, [r7, #4]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000690 	.word	0x20000690
 800101c:	2000063c 	.word	0x2000063c

08001020 <BSP_I2C1_WriteReg16>:
  * @param  pData  Pointer to data buffer to write
  * @param  Length Data Length
  * @retval BSP statu
  */
int32_t BSP_I2C1_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	@ 0x28
 8001024:	af04      	add	r7, sp, #16
 8001026:	60ba      	str	r2, [r7, #8]
 8001028:	461a      	mov	r2, r3
 800102a:	4603      	mov	r3, r0
 800102c:	81fb      	strh	r3, [r7, #14]
 800102e:	460b      	mov	r3, r1
 8001030:	81bb      	strh	r3, [r7, #12]
 8001032:	4613      	mov	r3, r2
 8001034:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800103a:	89ba      	ldrh	r2, [r7, #12]
 800103c:	89f9      	ldrh	r1, [r7, #14]
 800103e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001042:	9302      	str	r3, [sp, #8]
 8001044:	88fb      	ldrh	r3, [r7, #6]
 8001046:	9301      	str	r3, [sp, #4]
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2310      	movs	r3, #16
 800104e:	480c      	ldr	r0, [pc, #48]	@ (8001080 <BSP_I2C1_WriteReg16+0x60>)
 8001050:	f004 f92c 	bl	80052ac <HAL_I2C_Mem_Write>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d00c      	beq.n	8001074 <BSP_I2C1_WriteReg16+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800105a:	4809      	ldr	r0, [pc, #36]	@ (8001080 <BSP_I2C1_WriteReg16+0x60>)
 800105c:	f004 fc60 	bl	8005920 <HAL_I2C_GetError>
 8001060:	4603      	mov	r3, r0
 8001062:	2b04      	cmp	r3, #4
 8001064:	d103      	bne.n	800106e <BSP_I2C1_WriteReg16+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001066:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800106a:	617b      	str	r3, [r7, #20]
 800106c:	e002      	b.n	8001074 <BSP_I2C1_WriteReg16+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800106e:	f06f 0303 	mvn.w	r3, #3
 8001072:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001074:	697b      	ldr	r3, [r7, #20]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2000063c 	.word	0x2000063c

08001084 <BSP_I2C1_ReadReg16>:
  * @param  Reg: The target register address to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	@ 0x28
 8001088:	af04      	add	r7, sp, #16
 800108a:	60ba      	str	r2, [r7, #8]
 800108c:	461a      	mov	r2, r3
 800108e:	4603      	mov	r3, r0
 8001090:	81fb      	strh	r3, [r7, #14]
 8001092:	460b      	mov	r3, r1
 8001094:	81bb      	strh	r3, [r7, #12]
 8001096:	4613      	mov	r3, r2
 8001098:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800109e:	89ba      	ldrh	r2, [r7, #12]
 80010a0:	89f9      	ldrh	r1, [r7, #14]
 80010a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010a6:	9302      	str	r3, [sp, #8]
 80010a8:	88fb      	ldrh	r3, [r7, #6]
 80010aa:	9301      	str	r3, [sp, #4]
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	2310      	movs	r3, #16
 80010b2:	480c      	ldr	r0, [pc, #48]	@ (80010e4 <BSP_I2C1_ReadReg16+0x60>)
 80010b4:	f004 f9f4 	bl	80054a0 <HAL_I2C_Mem_Read>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d00c      	beq.n	80010d8 <BSP_I2C1_ReadReg16+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 80010be:	4809      	ldr	r0, [pc, #36]	@ (80010e4 <BSP_I2C1_ReadReg16+0x60>)
 80010c0:	f004 fc2e 	bl	8005920 <HAL_I2C_GetError>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	d003      	beq.n	80010d2 <BSP_I2C1_ReadReg16+0x4e>
    {
      ret =  BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80010ca:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	e002      	b.n	80010d8 <BSP_I2C1_ReadReg16+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80010d2:	f06f 0303 	mvn.w	r3, #3
 80010d6:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80010d8:	697b      	ldr	r3, [r7, #20]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	2000063c 	.word	0x2000063c

080010e8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80010ec:	f003 fb7a 	bl	80047e4 <HAL_GetTick>
 80010f0:	4603      	mov	r3, r0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001100:	2300      	movs	r3, #0
 8001102:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a14      	ldr	r2, [pc, #80]	@ (8001158 <MX_I2C1_Init+0x60>)
 8001108:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a13      	ldr	r2, [pc, #76]	@ (800115c <MX_I2C1_Init+0x64>)
 800110e:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001122:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f003 ff2d 	bl	8004f9c <HAL_I2C_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800114c:	7bfb      	ldrb	r3, [r7, #15]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40005400 	.word	0x40005400
 800115c:	00061a80 	.word	0x00061a80

08001160 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	@ 0x28
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001168:	2300      	movs	r3, #0
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	4b1f      	ldr	r3, [pc, #124]	@ (80011ec <I2C1_MspInit+0x8c>)
 800116e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001170:	4a1e      	ldr	r2, [pc, #120]	@ (80011ec <I2C1_MspInit+0x8c>)
 8001172:	f043 0302 	orr.w	r3, r3, #2
 8001176:	6313      	str	r3, [r2, #48]	@ 0x30
 8001178:	4b1c      	ldr	r3, [pc, #112]	@ (80011ec <I2C1_MspInit+0x8c>)
 800117a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117c:	f003 0302 	and.w	r3, r3, #2
 8001180:	613b      	str	r3, [r7, #16]
 8001182:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001184:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800118a:	2312      	movs	r3, #18
 800118c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800118e:	2301      	movs	r3, #1
 8001190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001192:	2303      	movs	r3, #3
 8001194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001196:	2304      	movs	r3, #4
 8001198:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	4619      	mov	r1, r3
 80011a0:	4813      	ldr	r0, [pc, #76]	@ (80011f0 <I2C1_MspInit+0x90>)
 80011a2:	f003 fc61 	bl	8004a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80011a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ac:	2312      	movs	r3, #18
 80011ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011b0:	2301      	movs	r3, #1
 80011b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b4:	2303      	movs	r3, #3
 80011b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80011b8:	2304      	movs	r3, #4
 80011ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4619      	mov	r1, r3
 80011c2:	480b      	ldr	r0, [pc, #44]	@ (80011f0 <I2C1_MspInit+0x90>)
 80011c4:	f003 fc50 	bl	8004a68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	4b07      	ldr	r3, [pc, #28]	@ (80011ec <I2C1_MspInit+0x8c>)
 80011ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d0:	4a06      	ldr	r2, [pc, #24]	@ (80011ec <I2C1_MspInit+0x8c>)
 80011d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80011d8:	4b04      	ldr	r3, [pc, #16]	@ (80011ec <I2C1_MspInit+0x8c>)
 80011da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80011e4:	bf00      	nop
 80011e6:	3728      	adds	r7, #40	@ 0x28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40020400 	.word	0x40020400

080011f4 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80011fc:	4b09      	ldr	r3, [pc, #36]	@ (8001224 <I2C1_MspDeInit+0x30>)
 80011fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001200:	4a08      	ldr	r2, [pc, #32]	@ (8001224 <I2C1_MspDeInit+0x30>)
 8001202:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001206:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001208:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800120c:	4806      	ldr	r0, [pc, #24]	@ (8001228 <I2C1_MspDeInit+0x34>)
 800120e:	f003 fdaf 	bl	8004d70 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8001212:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001216:	4804      	ldr	r0, [pc, #16]	@ (8001228 <I2C1_MspDeInit+0x34>)
 8001218:	f003 fdaa 	bl	8004d70 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40023800 	.word	0x40023800
 8001228:	40020400 	.word	0x40020400

0800122c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	e00a      	b.n	8001254 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800123e:	f3af 8000 	nop.w
 8001242:	4601      	mov	r1, r0
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	1c5a      	adds	r2, r3, #1
 8001248:	60ba      	str	r2, [r7, #8]
 800124a:	b2ca      	uxtb	r2, r1
 800124c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	3301      	adds	r3, #1
 8001252:	617b      	str	r3, [r7, #20]
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	429a      	cmp	r2, r3
 800125a:	dbf0      	blt.n	800123e <_read+0x12>
  }

  return len;
 800125c:	687b      	ldr	r3, [r7, #4]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3718      	adds	r7, #24
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b086      	sub	sp, #24
 800126a:	af00      	add	r7, sp, #0
 800126c:	60f8      	str	r0, [r7, #12]
 800126e:	60b9      	str	r1, [r7, #8]
 8001270:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
 8001276:	e009      	b.n	800128c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	1c5a      	adds	r2, r3, #1
 800127c:	60ba      	str	r2, [r7, #8]
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fe0f 	bl	8000ea4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	3301      	adds	r3, #1
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	429a      	cmp	r2, r3
 8001292:	dbf1      	blt.n	8001278 <_write+0x12>
  }
  return len;
 8001294:	687b      	ldr	r3, [r7, #4]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <_close>:

int _close(int file)
{
 800129e:	b480      	push	{r7}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b083      	sub	sp, #12
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
 80012be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012c6:	605a      	str	r2, [r3, #4]
  return 0;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <_isatty>:

int _isatty(int file)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012de:	2301      	movs	r3, #1
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3714      	adds	r7, #20
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001310:	4a14      	ldr	r2, [pc, #80]	@ (8001364 <_sbrk+0x5c>)
 8001312:	4b15      	ldr	r3, [pc, #84]	@ (8001368 <_sbrk+0x60>)
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800131c:	4b13      	ldr	r3, [pc, #76]	@ (800136c <_sbrk+0x64>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d102      	bne.n	800132a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001324:	4b11      	ldr	r3, [pc, #68]	@ (800136c <_sbrk+0x64>)
 8001326:	4a12      	ldr	r2, [pc, #72]	@ (8001370 <_sbrk+0x68>)
 8001328:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800132a:	4b10      	ldr	r3, [pc, #64]	@ (800136c <_sbrk+0x64>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	429a      	cmp	r2, r3
 8001336:	d207      	bcs.n	8001348 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001338:	f006 f9c0 	bl	80076bc <__errno>
 800133c:	4603      	mov	r3, r0
 800133e:	220c      	movs	r2, #12
 8001340:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001342:	f04f 33ff 	mov.w	r3, #4294967295
 8001346:	e009      	b.n	800135c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001348:	4b08      	ldr	r3, [pc, #32]	@ (800136c <_sbrk+0x64>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800134e:	4b07      	ldr	r3, [pc, #28]	@ (800136c <_sbrk+0x64>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	4a05      	ldr	r2, [pc, #20]	@ (800136c <_sbrk+0x64>)
 8001358:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800135a:	68fb      	ldr	r3, [r7, #12]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20018000 	.word	0x20018000
 8001368:	00000800 	.word	0x00000800
 800136c:	20000694 	.word	0x20000694
 8001370:	200030f8 	.word	0x200030f8

08001374 <VL53L7A1_RANGING_SENSOR_Init>:
  * @brief Initializes the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L7A1_RANGING_SENSOR_Init(uint32_t Instance)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b02      	cmp	r3, #2
 8001380:	d903      	bls.n	800138a <VL53L7A1_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001382:	f06f 0301 	mvn.w	r3, #1
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	e003      	b.n	8001392 <VL53L7A1_RANGING_SENSOR_Init+0x1e>
  }
  else
  {
    ret = VL53L7CX_Probe(Instance);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 f8f6 	bl	800157c <VL53L7CX_Probe>
 8001390:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001392:	68fb      	ldr	r3, [r7, #12]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <VL53L7A1_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t VL53L7A1_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d903      	bls.n	80013b4 <VL53L7A1_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80013ac:	f06f 0301 	mvn.w	r3, #1
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	e012      	b.n	80013da <VL53L7A1_RANGING_SENSOR_ReadID+0x3e>
  }
  else if (VL53L7A1_RANGING_SENSOR_Drv->ReadID(VL53L7A1_RANGING_SENSOR_CompObj[Instance], pId) < 0)
 80013b4:	4b0b      	ldr	r3, [pc, #44]	@ (80013e4 <VL53L7A1_RANGING_SENSOR_ReadID+0x48>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	490b      	ldr	r1, [pc, #44]	@ (80013e8 <VL53L7A1_RANGING_SENSOR_ReadID+0x4c>)
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80013c2:	6839      	ldr	r1, [r7, #0]
 80013c4:	4610      	mov	r0, r2
 80013c6:	4798      	blx	r3
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	da03      	bge.n	80013d6 <VL53L7A1_RANGING_SENSOR_ReadID+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80013ce:	f06f 0304 	mvn.w	r3, #4
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	e001      	b.n	80013da <VL53L7A1_RANGING_SENSOR_ReadID+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80013da:	68fb      	ldr	r3, [r7, #12]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	200006a4 	.word	0x200006a4
 80013e8:	20000698 	.word	0x20000698

080013ec <VL53L7A1_RANGING_SENSOR_GetCapabilities>:
  * @param Instance    Ranging sensor instance.
  * @param pCapabilities    Pointer to the ranging sensor capabilities.
  * @retval BSP status
  */
int32_t VL53L7A1_RANGING_SENSOR_GetCapabilities(uint32_t Instance, RANGING_SENSOR_Capabilities_t *pCapabilities)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d903      	bls.n	8001404 <VL53L7A1_RANGING_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80013fc:	f06f 0301 	mvn.w	r3, #1
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	e012      	b.n	800142a <VL53L7A1_RANGING_SENSOR_GetCapabilities+0x3e>
  }
  else if (VL53L7A1_RANGING_SENSOR_Drv->GetCapabilities(VL53L7A1_RANGING_SENSOR_CompObj[Instance], pCapabilities) < 0)
 8001404:	4b0b      	ldr	r3, [pc, #44]	@ (8001434 <VL53L7A1_RANGING_SENSOR_GetCapabilities+0x48>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	490b      	ldr	r1, [pc, #44]	@ (8001438 <VL53L7A1_RANGING_SENSOR_GetCapabilities+0x4c>)
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001412:	6839      	ldr	r1, [r7, #0]
 8001414:	4610      	mov	r0, r2
 8001416:	4798      	blx	r3
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	da03      	bge.n	8001426 <VL53L7A1_RANGING_SENSOR_GetCapabilities+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800141e:	f06f 0304 	mvn.w	r3, #4
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	e001      	b.n	800142a <VL53L7A1_RANGING_SENSOR_GetCapabilities+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800142a:	68fb      	ldr	r3, [r7, #12]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	200006a4 	.word	0x200006a4
 8001438:	20000698 	.word	0x20000698

0800143c <VL53L7A1_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t VL53L7A1_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2b02      	cmp	r3, #2
 800144a:	d903      	bls.n	8001454 <VL53L7A1_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800144c:	f06f 0301 	mvn.w	r3, #1
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	e012      	b.n	800147a <VL53L7A1_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else if (VL53L7A1_RANGING_SENSOR_Drv->ConfigProfile(VL53L7A1_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 8001454:	4b0b      	ldr	r3, [pc, #44]	@ (8001484 <VL53L7A1_RANGING_SENSOR_ConfigProfile+0x48>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	490b      	ldr	r1, [pc, #44]	@ (8001488 <VL53L7A1_RANGING_SENSOR_ConfigProfile+0x4c>)
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001462:	6839      	ldr	r1, [r7, #0]
 8001464:	4610      	mov	r0, r2
 8001466:	4798      	blx	r3
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	da03      	bge.n	8001476 <VL53L7A1_RANGING_SENSOR_ConfigProfile+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800146e:	f06f 0304 	mvn.w	r3, #4
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	e001      	b.n	800147a <VL53L7A1_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800147a:	68fb      	ldr	r3, [r7, #12]
}
 800147c:	4618      	mov	r0, r3
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	200006a4 	.word	0x200006a4
 8001488:	20000698 	.word	0x20000698

0800148c <VL53L7A1_RANGING_SENSOR_ConfigIT>:
  * @retval BSP status
  */
int32_t VL53L7A1_RANGING_SENSOR_ConfigIT(
  uint32_t Instance,
  RANGING_SENSOR_ITConfig_t *pConfig)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b02      	cmp	r3, #2
 800149a:	d903      	bls.n	80014a4 <VL53L7A1_RANGING_SENSOR_ConfigIT+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800149c:	f06f 0301 	mvn.w	r3, #1
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	e012      	b.n	80014ca <VL53L7A1_RANGING_SENSOR_ConfigIT+0x3e>
  }
  else if (VL53L7A1_RANGING_SENSOR_Drv->ConfigIT(
 80014a4:	4b0b      	ldr	r3, [pc, #44]	@ (80014d4 <VL53L7A1_RANGING_SENSOR_ConfigIT+0x48>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	490b      	ldr	r1, [pc, #44]	@ (80014d8 <VL53L7A1_RANGING_SENSOR_ConfigIT+0x4c>)
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80014b2:	6839      	ldr	r1, [r7, #0]
 80014b4:	4610      	mov	r0, r2
 80014b6:	4798      	blx	r3
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	da03      	bge.n	80014c6 <VL53L7A1_RANGING_SENSOR_ConfigIT+0x3a>
             VL53L7A1_RANGING_SENSOR_CompObj[Instance],
             pConfig) < 0)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80014be:	f06f 0304 	mvn.w	r3, #4
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	e001      	b.n	80014ca <VL53L7A1_RANGING_SENSOR_ConfigIT+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80014ca:	68fb      	ldr	r3, [r7, #12]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	200006a4 	.word	0x200006a4
 80014d8:	20000698 	.word	0x20000698

080014dc <VL53L7A1_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t VL53L7A1_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d903      	bls.n	80014f4 <VL53L7A1_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80014ec:	f06f 0301 	mvn.w	r3, #1
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	e012      	b.n	800151a <VL53L7A1_RANGING_SENSOR_GetDistance+0x3e>
  }
  else if (VL53L7A1_RANGING_SENSOR_Drv->GetDistance(VL53L7A1_RANGING_SENSOR_CompObj[Instance], pResult) < 0)
 80014f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001524 <VL53L7A1_RANGING_SENSOR_GetDistance+0x48>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	490b      	ldr	r1, [pc, #44]	@ (8001528 <VL53L7A1_RANGING_SENSOR_GetDistance+0x4c>)
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001502:	6839      	ldr	r1, [r7, #0]
 8001504:	4610      	mov	r0, r2
 8001506:	4798      	blx	r3
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	da03      	bge.n	8001516 <VL53L7A1_RANGING_SENSOR_GetDistance+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800150e:	f06f 0304 	mvn.w	r3, #4
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	e001      	b.n	800151a <VL53L7A1_RANGING_SENSOR_GetDistance+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800151a:	68fb      	ldr	r3, [r7, #12]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	200006a4 	.word	0x200006a4
 8001528:	20000698 	.word	0x20000698

0800152c <VL53L7A1_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired ranging mode
  * @retval BSP status
  */
int32_t VL53L7A1_RANGING_SENSOR_Start(uint32_t Instance, uint32_t Mode)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b02      	cmp	r3, #2
 800153a:	d903      	bls.n	8001544 <VL53L7A1_RANGING_SENSOR_Start+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800153c:	f06f 0301 	mvn.w	r3, #1
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	e012      	b.n	800156a <VL53L7A1_RANGING_SENSOR_Start+0x3e>
  }
  else if (VL53L7A1_RANGING_SENSOR_Drv->Start(VL53L7A1_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 8001544:	4b0b      	ldr	r3, [pc, #44]	@ (8001574 <VL53L7A1_RANGING_SENSOR_Start+0x48>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6a1b      	ldr	r3, [r3, #32]
 800154a:	490b      	ldr	r1, [pc, #44]	@ (8001578 <VL53L7A1_RANGING_SENSOR_Start+0x4c>)
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001552:	6839      	ldr	r1, [r7, #0]
 8001554:	4610      	mov	r0, r2
 8001556:	4798      	blx	r3
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	da03      	bge.n	8001566 <VL53L7A1_RANGING_SENSOR_Start+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800155e:	f06f 0304 	mvn.w	r3, #4
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	e001      	b.n	800156a <VL53L7A1_RANGING_SENSOR_Start+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800156a:	68fb      	ldr	r3, [r7, #12]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	200006a4 	.word	0x200006a4
 8001578:	20000698 	.word	0x20000698

0800157c <VL53L7CX_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L7CX_Probe(uint32_t Instance)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	@ 0x28
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  VL53L7CX_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L7CX_Object_t   VL53L7CXObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L7CX_ADDRESS;
 8001584:	2352      	movs	r3, #82	@ 0x52
 8001586:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = VL53L7A1_I2C_INIT;
 8001588:	4b38      	ldr	r3, [pc, #224]	@ (800166c <VL53L7CX_Probe+0xf0>)
 800158a:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = VL53L7A1_I2C_DEINIT;
 800158c:	4b38      	ldr	r3, [pc, #224]	@ (8001670 <VL53L7CX_Probe+0xf4>)
 800158e:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = VL53L7A1_I2C_WRITEREG;
 8001590:	4b38      	ldr	r3, [pc, #224]	@ (8001674 <VL53L7CX_Probe+0xf8>)
 8001592:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = VL53L7A1_I2C_READREG;
 8001594:	4b38      	ldr	r3, [pc, #224]	@ (8001678 <VL53L7CX_Probe+0xfc>)
 8001596:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = VL53L7A1_GETTICK;
 8001598:	4b38      	ldr	r3, [pc, #224]	@ (800167c <VL53L7CX_Probe+0x100>)
 800159a:	623b      	str	r3, [r7, #32]

  if (VL53L7CX_RegisterBusIO(&(VL53L7CXObj[Instance]), &IOCtx) != VL53L7CX_OK)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f44f 622e 	mov.w	r2, #2784	@ 0xae0
 80015a2:	fb02 f303 	mul.w	r3, r2, r3
 80015a6:	4a36      	ldr	r2, [pc, #216]	@ (8001680 <VL53L7CX_Probe+0x104>)
 80015a8:	4413      	add	r3, r2
 80015aa:	f107 020c 	add.w	r2, r7, #12
 80015ae:	4611      	mov	r1, r2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f000 f918 	bl	80017e6 <VL53L7CX_RegisterBusIO>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d003      	beq.n	80015c4 <VL53L7CX_Probe+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80015bc:	f06f 0304 	mvn.w	r3, #4
 80015c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80015c2:	e04d      	b.n	8001660 <VL53L7CX_Probe+0xe4>
  }
  else
  {
    VL53L7A1_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L7CX_RANGING_SENSOR_Driver;
 80015c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001684 <VL53L7CX_Probe+0x108>)
 80015c6:	4a30      	ldr	r2, [pc, #192]	@ (8001688 <VL53L7CX_Probe+0x10c>)
 80015c8:	601a      	str	r2, [r3, #0]
    VL53L7A1_RANGING_SENSOR_CompObj[Instance] = &(VL53L7CXObj[Instance]);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f44f 622e 	mov.w	r2, #2784	@ 0xae0
 80015d0:	fb02 f303 	mul.w	r3, r2, r3
 80015d4:	4a2a      	ldr	r2, [pc, #168]	@ (8001680 <VL53L7CX_Probe+0x104>)
 80015d6:	441a      	add	r2, r3
 80015d8:	492c      	ldr	r1, [pc, #176]	@ (800168c <VL53L7CX_Probe+0x110>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if (VL53L7CX_ReadID(&(VL53L7CXObj[Instance]), &id) != VL53L7CX_OK)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f44f 622e 	mov.w	r2, #2784	@ 0xae0
 80015e6:	fb02 f303 	mul.w	r3, r2, r3
 80015ea:	4a25      	ldr	r2, [pc, #148]	@ (8001680 <VL53L7CX_Probe+0x104>)
 80015ec:	4413      	add	r3, r2
 80015ee:	f107 0208 	add.w	r2, r7, #8
 80015f2:	4611      	mov	r1, r2
 80015f4:	4618      	mov	r0, r3
 80015f6:	f000 f9a6 	bl	8001946 <VL53L7CX_ReadID>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <VL53L7CX_Probe+0x8c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8001600:	f06f 0304 	mvn.w	r3, #4
 8001604:	627b      	str	r3, [r7, #36]	@ 0x24
 8001606:	e02b      	b.n	8001660 <VL53L7CX_Probe+0xe4>
    }
    else if (id != VL53L7CX_ID)
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	f24f 0202 	movw	r2, #61442	@ 0xf002
 800160e:	4293      	cmp	r3, r2
 8001610:	d003      	beq.n	800161a <VL53L7CX_Probe+0x9e>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8001612:	f06f 0306 	mvn.w	r3, #6
 8001616:	627b      	str	r3, [r7, #36]	@ 0x24
 8001618:	e022      	b.n	8001660 <VL53L7CX_Probe+0xe4>
    }
    else if (VL53L7A1_RANGING_SENSOR_Drv->Init(VL53L7A1_RANGING_SENSOR_CompObj[Instance]) != VL53L7CX_OK)
 800161a:	4b1a      	ldr	r3, [pc, #104]	@ (8001684 <VL53L7CX_Probe+0x108>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	491a      	ldr	r1, [pc, #104]	@ (800168c <VL53L7CX_Probe+0x110>)
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001628:	4610      	mov	r0, r2
 800162a:	4798      	blx	r3
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <VL53L7CX_Probe+0xbe>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8001632:	f06f 0304 	mvn.w	r3, #4
 8001636:	627b      	str	r3, [r7, #36]	@ 0x24
 8001638:	e012      	b.n	8001660 <VL53L7CX_Probe+0xe4>
    }
    else if (VL53L7A1_RANGING_SENSOR_Drv->GetCapabilities(VL53L7A1_RANGING_SENSOR_CompObj[Instance],
 800163a:	4b12      	ldr	r3, [pc, #72]	@ (8001684 <VL53L7CX_Probe+0x108>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	4912      	ldr	r1, [pc, #72]	@ (800168c <VL53L7CX_Probe+0x110>)
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001648:	4911      	ldr	r1, [pc, #68]	@ (8001690 <VL53L7CX_Probe+0x114>)
 800164a:	4610      	mov	r0, r2
 800164c:	4798      	blx	r3
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <VL53L7CX_Probe+0xe0>
                                                          &VL53L7A1_RANGING_SENSOR_Cap) != VL53L7CX_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8001654:	f06f 0304 	mvn.w	r3, #4
 8001658:	627b      	str	r3, [r7, #36]	@ 0x24
 800165a:	e001      	b.n	8001660 <VL53L7CX_Probe+0xe4>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 800165c:	2300      	movs	r3, #0
 800165e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }

  return ret;
 8001660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001662:	4618      	mov	r0, r3
 8001664:	3728      	adds	r7, #40	@ 0x28
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	08000f6d 	.word	0x08000f6d
 8001670:	08000fd1 	.word	0x08000fd1
 8001674:	08001021 	.word	0x08001021
 8001678:	08001085 	.word	0x08001085
 800167c:	080010e9 	.word	0x080010e9
 8001680:	200006b8 	.word	0x200006b8
 8001684:	200006a4 	.word	0x200006a4
 8001688:	20000004 	.word	0x20000004
 800168c:	20000698 	.word	0x20000698
 8001690:	200006a8 	.word	0x200006a8

08001694 <VL53L7CX_RdByte>:

uint8_t VL53L7CX_RdByte(
		VL53L7CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 8001694:	b590      	push	{r4, r7, lr}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	460b      	mov	r3, r1
 800169e:	607a      	str	r2, [r7, #4]
 80016a0:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_value, 1U);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	689c      	ldr	r4, [r3, #8]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	8818      	ldrh	r0, [r3, #0]
 80016aa:	8979      	ldrh	r1, [r7, #10]
 80016ac:	2301      	movs	r3, #1
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	47a0      	blx	r4
 80016b2:	4603      	mov	r3, r0
 80016b4:	b2db      	uxtb	r3, r3
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd90      	pop	{r4, r7, pc}

080016be <VL53L7CX_WrByte>:

uint8_t VL53L7CX_WrByte(
		VL53L7CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 80016be:	b590      	push	{r4, r7, lr}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
 80016c6:	460b      	mov	r3, r1
 80016c8:	807b      	strh	r3, [r7, #2]
 80016ca:	4613      	mov	r3, r2
 80016cc:	707b      	strb	r3, [r7, #1]
  return p_platform->Write(p_platform->address, RegisterAdress, &value, 1U);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685c      	ldr	r4, [r3, #4]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	8818      	ldrh	r0, [r3, #0]
 80016d6:	1c7a      	adds	r2, r7, #1
 80016d8:	8879      	ldrh	r1, [r7, #2]
 80016da:	2301      	movs	r3, #1
 80016dc:	47a0      	blx	r4
 80016de:	4603      	mov	r3, r0
 80016e0:	b2db      	uxtb	r3, r3
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd90      	pop	{r4, r7, pc}

080016ea <VL53L7CX_WrMulti>:
uint8_t VL53L7CX_WrMulti(
		VL53L7CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 80016ea:	b590      	push	{r4, r7, lr}
 80016ec:	b085      	sub	sp, #20
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	60f8      	str	r0, [r7, #12]
 80016f2:	607a      	str	r2, [r7, #4]
 80016f4:	603b      	str	r3, [r7, #0]
 80016f6:	460b      	mov	r3, r1
 80016f8:	817b      	strh	r3, [r7, #10]
  return p_platform->Write(p_platform->address, RegisterAdress, p_values, size);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	685c      	ldr	r4, [r3, #4]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	8818      	ldrh	r0, [r3, #0]
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	b29b      	uxth	r3, r3
 8001706:	8979      	ldrh	r1, [r7, #10]
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	47a0      	blx	r4
 800170c:	4603      	mov	r3, r0
 800170e:	b2db      	uxtb	r3, r3
}
 8001710:	4618      	mov	r0, r3
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	bd90      	pop	{r4, r7, pc}

08001718 <VL53L7CX_RdMulti>:
uint8_t VL53L7CX_RdMulti(
		VL53L7CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8001718:	b590      	push	{r4, r7, lr}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	607a      	str	r2, [r7, #4]
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	460b      	mov	r3, r1
 8001726:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_values, size);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	689c      	ldr	r4, [r3, #8]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	8818      	ldrh	r0, [r3, #0]
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	b29b      	uxth	r3, r3
 8001734:	8979      	ldrh	r1, [r7, #10]
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	47a0      	blx	r4
 800173a:	4603      	mov	r3, r0
 800173c:	b2db      	uxtb	r3, r3
}
 800173e:	4618      	mov	r0, r3
 8001740:	3714      	adds	r7, #20
 8001742:	46bd      	mov	sp, r7
 8001744:	bd90      	pop	{r4, r7, pc}

08001746 <VL53L7CX_SwapBuffer>:

void VL53L7CX_SwapBuffer(
    uint8_t     *buffer,
    uint16_t     size)
{
 8001746:	b480      	push	{r7}
 8001748:	b085      	sub	sp, #20
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
 800174e:	460b      	mov	r3, r1
 8001750:	807b      	strh	r3, [r7, #2]
  uint32_t i, tmp;

  /* Example of possible implementation using <string.h> */
  for(i = 0; i < size; i = i + 4)
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	e021      	b.n	800179c <VL53L7CX_SwapBuffer+0x56>
  {
    tmp = (
      buffer[i]<<24)
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4413      	add	r3, r2
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	061a      	lsls	r2, r3, #24
    |(buffer[i+1]<<16)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	3301      	adds	r3, #1
 8001766:	6879      	ldr	r1, [r7, #4]
 8001768:	440b      	add	r3, r1
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	041b      	lsls	r3, r3, #16
 800176e:	431a      	orrs	r2, r3
    |(buffer[i+2]<<8)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	3302      	adds	r3, #2
 8001774:	6879      	ldr	r1, [r7, #4]
 8001776:	440b      	add	r3, r1
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	021b      	lsls	r3, r3, #8
 800177c:	4313      	orrs	r3, r2
    |(buffer[i+3]);
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	3203      	adds	r2, #3
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	440a      	add	r2, r1
 8001786:	7812      	ldrb	r2, [r2, #0]
 8001788:	4313      	orrs	r3, r2
    tmp = (
 800178a:	60bb      	str	r3, [r7, #8]

    memcpy(&(buffer[i]), &tmp, 4);
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	4413      	add	r3, r2
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	601a      	str	r2, [r3, #0]
  for(i = 0; i < size; i = i + 4)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	3304      	adds	r3, #4
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	887b      	ldrh	r3, [r7, #2]
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d3d9      	bcc.n	8001758 <VL53L7CX_SwapBuffer+0x12>
  }
}
 80017a4:	bf00      	nop
 80017a6:	bf00      	nop
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <VL53L7CX_WaitMs>:

uint8_t VL53L7CX_WaitMs(
		VL53L7CX_Platform *p_platform,
		uint32_t TimeMs)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b084      	sub	sp, #16
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
 80017ba:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = p_platform->GetTick();
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	4798      	blx	r3
 80017c2:	4603      	mov	r3, r0
 80017c4:	60fb      	str	r3, [r7, #12]

  while ((p_platform->GetTick() - tickstart) < TimeMs);
 80017c6:	bf00      	nop
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	4798      	blx	r3
 80017ce:	4603      	mov	r3, r0
 80017d0:	461a      	mov	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d8f5      	bhi.n	80017c8 <VL53L7CX_WaitMs+0x16>

  return 0;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <VL53L7CX_RegisterBusIO>:
  * @param pObj    vl53l7cx context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_RegisterBusIO(VL53L7CX_Object_t *pObj, VL53L7CX_IO_t *pIO)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b084      	sub	sp, #16
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pIO == NULL))
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d002      	beq.n	80017fc <VL53L7CX_RegisterBusIO+0x16>
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d103      	bne.n	8001804 <VL53L7CX_RegisterBusIO+0x1e>
  {
    ret = VL53L7CX_INVALID_PARAM;
 80017fc:	f06f 0301 	mvn.w	r3, #1
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	e033      	b.n	800186c <VL53L7CX_RegisterBusIO+0x86>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	891a      	ldrh	r2, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	68da      	ldr	r2, [r3, #12]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	691a      	ldr	r2, [r3, #16]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	695a      	ldr	r2, [r3, #20]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	615a      	str	r2, [r3, #20]

    /* fill vl53l7cx platform structure */
    pObj->Dev.platform.address = pIO->Address;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	891a      	ldrh	r2, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	831a      	strh	r2, [r3, #24]
    pObj->Dev.platform.Read = pIO->ReadReg;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	691a      	ldr	r2, [r3, #16]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	621a      	str	r2, [r3, #32]
    pObj->Dev.platform.Write = pIO->WriteReg;
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	61da      	str	r2, [r3, #28]
    pObj->Dev.platform.GetTick = pIO->GetTick;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	695a      	ldr	r2, [r3, #20]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	625a      	str	r2, [r3, #36]	@ 0x24

    if (pObj->IO.Init != NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d004      	beq.n	8001866 <VL53L7CX_RegisterBusIO+0x80>
    {
      ret = pObj->IO.Init();
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4798      	blx	r3
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	e002      	b.n	800186c <VL53L7CX_RegisterBusIO+0x86>
    }
    else
    {
      ret = VL53L7CX_ERROR;
 8001866:	f04f 33ff 	mov.w	r3, #4294967295
 800186a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800186c:	68fb      	ldr	r3, [r7, #12]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <VL53L7CX_Init>:
  * @brief Initializes the vl53l7cx.
  * @param pObj    vl53l7cx context object.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_Init(VL53L7CX_Object_t *pObj)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b084      	sub	sp, #16
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d103      	bne.n	800188c <VL53L7CX_Init+0x16>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8001884:	f06f 0301 	mvn.w	r3, #1
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	e02e      	b.n	80018ea <VL53L7CX_Init+0x74>
  }
  else if (pObj->IsInitialized != 0U)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 3ad8 	ldrb.w	r3, [r3, #2776]	@ 0xad8
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <VL53L7CX_Init+0x28>
  {
    ret =  VL53L7CX_ERROR;
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	e025      	b.n	80018ea <VL53L7CX_Init+0x74>
  }
  else if (vl53l7cx_init(&pObj->Dev) != VL53L7CX_STATUS_OK)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	3318      	adds	r3, #24
 80018a2:	4618      	mov	r0, r3
 80018a4:	f001 f876 	bl	8002994 <vl53l7cx_init>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <VL53L7CX_Init+0x40>
  {
    ret = VL53L7CX_ERROR;
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	e019      	b.n	80018ea <VL53L7CX_Init+0x74>
  }
  else
  {
    pObj->IsRanging = 0U;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2ad9 	strb.w	r2, [r3, #2777]	@ 0xad9
    pObj->IsBlocking = 0U;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2ada 	strb.w	r2, [r3, #2778]	@ 0xada
    pObj->IsContinuous = 0U;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2adb 	strb.w	r2, [r3, #2779]	@ 0xadb
    pObj->IsAmbientEnabled = 0U;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2adc 	strb.w	r2, [r3, #2780]	@ 0xadc
    pObj->IsSignalEnabled = 0U;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2add 	strb.w	r2, [r3, #2781]	@ 0xadd
    pObj->IsInitialized = 1U;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2201      	movs	r2, #1
 80018e2:	f883 2ad8 	strb.w	r2, [r3, #2776]	@ 0xad8
    ret = VL53L7CX_OK;
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80018ea:	68fb      	ldr	r3, [r7, #12]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <VL53L7CX_DeInit>:
  * @brief Deinitializes the vl53l7cx.
  * @param pObj    vl53l7cx context object.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_DeInit(VL53L7CX_Object_t *pObj)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d103      	bne.n	800190a <VL53L7CX_DeInit+0x16>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8001902:	f06f 0301 	mvn.w	r3, #1
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	e018      	b.n	800193c <VL53L7CX_DeInit+0x48>
  }
  else if (pObj->IsInitialized == 1U)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 3ad8 	ldrb.w	r3, [r3, #2776]	@ 0xad8
 8001910:	2b01      	cmp	r3, #1
 8001912:	d110      	bne.n	8001936 <VL53L7CX_DeInit+0x42>
  {
    /* De-initialize the vl53l7cx interface */
    if (pObj->IO.DeInit() != 0)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	4798      	blx	r3
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d003      	beq.n	8001928 <VL53L7CX_DeInit+0x34>
    {
      ret = VL53L7CX_ERROR;
 8001920:	f04f 33ff 	mov.w	r3, #4294967295
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	e009      	b.n	800193c <VL53L7CX_DeInit+0x48>
    }
    else
    {
      ret = VL53L7CX_OK;
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 2ad8 	strb.w	r2, [r3, #2776]	@ 0xad8
 8001934:	e002      	b.n	800193c <VL53L7CX_DeInit+0x48>
    }
  }
  else
  {
    /* if device not initialized return error */
    ret = VL53L7CX_ERROR;
 8001936:	f04f 33ff 	mov.w	r3, #4294967295
 800193a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800193c:	68fb      	ldr	r3, [r7, #12]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <VL53L7CX_ReadID>:
  * @param pObj    vl53l7cx context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_ReadID(VL53L7CX_Object_t *pObj, uint32_t *pId)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b084      	sub	sp, #16
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t device_id = 0;
 8001950:	2300      	movs	r3, #0
 8001952:	72bb      	strb	r3, [r7, #10]
  uint8_t revision_id = 0;
 8001954:	2300      	movs	r3, #0
 8001956:	727b      	strb	r3, [r7, #9]
  uint8_t status = VL53L7CX_STATUS_OK;
 8001958:	2300      	movs	r3, #0
 800195a:	72fb      	strb	r3, [r7, #11]

  if ((pObj == NULL) || (pId == NULL))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d002      	beq.n	8001968 <VL53L7CX_ReadID+0x22>
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d103      	bne.n	8001970 <VL53L7CX_ReadID+0x2a>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8001968:	f06f 0301 	mvn.w	r3, #1
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	e045      	b.n	80019fc <VL53L7CX_ReadID+0xb6>
  }
  else
  {
    status |= VL53L7CX_WrByte(&pObj->Dev.platform, 0x7fff, 0x00);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3318      	adds	r3, #24
 8001974:	2200      	movs	r2, #0
 8001976:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff fe9f 	bl	80016be <VL53L7CX_WrByte>
 8001980:	4603      	mov	r3, r0
 8001982:	461a      	mov	r2, r3
 8001984:	7afb      	ldrb	r3, [r7, #11]
 8001986:	4313      	orrs	r3, r2
 8001988:	72fb      	strb	r3, [r7, #11]
    status |= VL53L7CX_RdByte(&pObj->Dev.platform, 0, &device_id);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	3318      	adds	r3, #24
 800198e:	f107 020a 	add.w	r2, r7, #10
 8001992:	2100      	movs	r1, #0
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff fe7d 	bl	8001694 <VL53L7CX_RdByte>
 800199a:	4603      	mov	r3, r0
 800199c:	461a      	mov	r2, r3
 800199e:	7afb      	ldrb	r3, [r7, #11]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	72fb      	strb	r3, [r7, #11]
    status |= VL53L7CX_RdByte(&pObj->Dev.platform, 1, &revision_id);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3318      	adds	r3, #24
 80019a8:	f107 0209 	add.w	r2, r7, #9
 80019ac:	2101      	movs	r1, #1
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff fe70 	bl	8001694 <VL53L7CX_RdByte>
 80019b4:	4603      	mov	r3, r0
 80019b6:	461a      	mov	r2, r3
 80019b8:	7afb      	ldrb	r3, [r7, #11]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	72fb      	strb	r3, [r7, #11]
    status |= VL53L7CX_WrByte(&pObj->Dev.platform, 0x7fff, 0x02);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	3318      	adds	r3, #24
 80019c2:	2202      	movs	r2, #2
 80019c4:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff fe78 	bl	80016be <VL53L7CX_WrByte>
 80019ce:	4603      	mov	r3, r0
 80019d0:	461a      	mov	r2, r3
 80019d2:	7afb      	ldrb	r3, [r7, #11]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	72fb      	strb	r3, [r7, #11]

    if (status == 0U)
 80019d8:	7afb      	ldrb	r3, [r7, #11]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d108      	bne.n	80019f0 <VL53L7CX_ReadID+0xaa>
    {
      *pId = ((uint32_t)device_id << 8) + revision_id;
 80019de:	7abb      	ldrb	r3, [r7, #10]
 80019e0:	021b      	lsls	r3, r3, #8
 80019e2:	7a7a      	ldrb	r2, [r7, #9]
 80019e4:	441a      	add	r2, r3
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	601a      	str	r2, [r3, #0]
      ret = VL53L7CX_OK;
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	e005      	b.n	80019fc <VL53L7CX_ReadID+0xb6>
    }
    else
    {
      *pId = 0;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
      ret = VL53L7CX_ERROR;
 80019f6:	f04f 33ff 	mov.w	r3, #4294967295
 80019fa:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80019fc:	68fb      	ldr	r3, [r7, #12]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <VL53L7CX_GetCapabilities>:
  * @param pObj    vl53l7cx context object.
  * @param pCap    Pointer to the vl53l7cx capabilities.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_GetCapabilities(VL53L7CX_Object_t *pObj, VL53L7CX_Capabilities_t *pCap)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b085      	sub	sp, #20
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
 8001a0e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d002      	beq.n	8001a1c <VL53L7CX_GetCapabilities+0x16>
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d103      	bne.n	8001a24 <VL53L7CX_GetCapabilities+0x1e>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8001a1c:	f06f 0301 	mvn.w	r3, #1
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	e00d      	b.n	8001a40 <VL53L7CX_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = VL53L7CX_RESOLUTION_8X8;
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	2240      	movs	r2, #64	@ 0x40
 8001a28:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L7CX_TARGET_PER_ZONE;
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 0;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 1;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	60da      	str	r2, [r3, #12]

    ret = VL53L7CX_OK;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001a40:	68fb      	ldr	r3, [r7, #12]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
	...

08001a50 <VL53L7CX_ConfigProfile>:
  * @param pObj    vl53l7cx context object.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_ConfigProfile(VL53L7CX_Object_t *pObj, VL53L7CX_ProfileConfig_t *pConfig)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  int32_t ret = VL53L7CX_OK;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
  uint8_t resolution;
  uint8_t ranging_mode;
  uint8_t ranging_frequency;
  uint32_t integration_time;

  if ((pObj != NULL) && (pConfig != NULL))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d01b      	beq.n	8001a9c <VL53L7CX_ConfigProfile+0x4c>
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d018      	beq.n	8001a9c <VL53L7CX_ConfigProfile+0x4c>
  {
    profile = pConfig->RangingProfile;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	747b      	strb	r3, [r7, #17]
    integration_time = pConfig->TimingBudget;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	60fb      	str	r3, [r7, #12]
    ranging_frequency = (uint8_t)pConfig->Frequency;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L7CX_INVALID_PARAM;
  }

  switch (profile)
 8001a7c:	7c7b      	ldrb	r3, [r7, #17]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	2b03      	cmp	r3, #3
 8001a82:	d822      	bhi.n	8001aca <VL53L7CX_ConfigProfile+0x7a>
 8001a84:	a201      	add	r2, pc, #4	@ (adr r2, 8001a8c <VL53L7CX_ConfigProfile+0x3c>)
 8001a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a8a:	bf00      	nop
 8001a8c:	08001aa3 	.word	0x08001aa3
 8001a90:	08001aad 	.word	0x08001aad
 8001a94:	08001ab7 	.word	0x08001ab7
 8001a98:	08001ac1 	.word	0x08001ac1
    return VL53L7CX_INVALID_PARAM;
 8001a9c:	f06f 0301 	mvn.w	r3, #1
 8001aa0:	e070      	b.n	8001b84 <VL53L7CX_ConfigProfile+0x134>
  {
  case VL53L7CX_PROFILE_4x4_CONTINUOUS:
    resolution = VL53L7CX_RESOLUTION_4X4;
 8001aa2:	2310      	movs	r3, #16
 8001aa4:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L7CX_RANGING_MODE_CONTINUOUS;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	74bb      	strb	r3, [r7, #18]
    break;
 8001aaa:	e016      	b.n	8001ada <VL53L7CX_ConfigProfile+0x8a>
  case VL53L7CX_PROFILE_4x4_AUTONOMOUS:
    resolution = VL53L7CX_RESOLUTION_4X4;
 8001aac:	2310      	movs	r3, #16
 8001aae:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L7CX_RANGING_MODE_AUTONOMOUS;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	74bb      	strb	r3, [r7, #18]
    break;
 8001ab4:	e011      	b.n	8001ada <VL53L7CX_ConfigProfile+0x8a>
  case VL53L7CX_PROFILE_8x8_CONTINUOUS:
    resolution = VL53L7CX_RESOLUTION_8X8;
 8001ab6:	2340      	movs	r3, #64	@ 0x40
 8001ab8:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L7CX_RANGING_MODE_CONTINUOUS;
 8001aba:	2301      	movs	r3, #1
 8001abc:	74bb      	strb	r3, [r7, #18]
    break;
 8001abe:	e00c      	b.n	8001ada <VL53L7CX_ConfigProfile+0x8a>
  case VL53L7CX_PROFILE_8x8_AUTONOMOUS:
    resolution = VL53L7CX_RESOLUTION_8X8;
 8001ac0:	2340      	movs	r3, #64	@ 0x40
 8001ac2:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L7CX_RANGING_MODE_AUTONOMOUS;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	74bb      	strb	r3, [r7, #18]
    break;
 8001ac8:	e007      	b.n	8001ada <VL53L7CX_ConfigProfile+0x8a>
  default:
    resolution = 0; /* silence MISRA rule 1.3 warning */
 8001aca:	2300      	movs	r3, #0
 8001acc:	74fb      	strb	r3, [r7, #19]
    ranging_mode = 0; /* silence MISRA rule 1.3 warning */
 8001ace:	2300      	movs	r3, #0
 8001ad0:	74bb      	strb	r3, [r7, #18]
    ret = VL53L7CX_INVALID_PARAM;
 8001ad2:	f06f 0301 	mvn.w	r3, #1
 8001ad6:	617b      	str	r3, [r7, #20]
    break;
 8001ad8:	bf00      	nop
  }

  if (ret != VL53L7CX_OK)
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <VL53L7CX_ConfigProfile+0x94>
  {
    return ret;
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	e04f      	b.n	8001b84 <VL53L7CX_ConfigProfile+0x134>
  }
  else if (vl53l7cx_set_resolution(&pObj->Dev, resolution) != VL53L7CX_STATUS_OK)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3318      	adds	r3, #24
 8001ae8:	7cfa      	ldrb	r2, [r7, #19]
 8001aea:	4611      	mov	r1, r2
 8001aec:	4618      	mov	r0, r3
 8001aee:	f002 f98e 	bl	8003e0e <vl53l7cx_set_resolution>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <VL53L7CX_ConfigProfile+0xb0>
  {
    ret = VL53L7CX_ERROR;
 8001af8:	f04f 33ff 	mov.w	r3, #4294967295
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	e040      	b.n	8001b82 <VL53L7CX_ConfigProfile+0x132>
  }
  else if (vl53l7cx_set_ranging_mode(&pObj->Dev, ranging_mode) != VL53L7CX_STATUS_OK)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3318      	adds	r3, #24
 8001b04:	7cba      	ldrb	r2, [r7, #18]
 8001b06:	4611      	mov	r1, r2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f002 faaa 	bl	8004062 <vl53l7cx_set_ranging_mode>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d003      	beq.n	8001b1c <VL53L7CX_ConfigProfile+0xcc>
  {
    ret = VL53L7CX_ERROR;
 8001b14:	f04f 33ff 	mov.w	r3, #4294967295
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	e032      	b.n	8001b82 <VL53L7CX_ConfigProfile+0x132>
  }
  else if (vl53l7cx_set_integration_time_ms(&pObj->Dev, integration_time) != VL53L7CX_STATUS_OK)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3318      	adds	r3, #24
 8001b20:	68f9      	ldr	r1, [r7, #12]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f002 fa68 	bl	8003ff8 <vl53l7cx_set_integration_time_ms>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <VL53L7CX_ConfigProfile+0xe6>
  {
    ret = VL53L7CX_ERROR;
 8001b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	e025      	b.n	8001b82 <VL53L7CX_ConfigProfile+0x132>
  }
  else if (vl53l7cx_set_ranging_frequency_hz(&pObj->Dev, ranging_frequency) != VL53L7CX_STATUS_OK)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	3318      	adds	r3, #24
 8001b3a:	7afa      	ldrb	r2, [r7, #11]
 8001b3c:	4611      	mov	r1, r2
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f002 fa39 	bl	8003fb6 <vl53l7cx_set_ranging_frequency_hz>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <VL53L7CX_ConfigProfile+0x102>
  {
    ret = VL53L7CX_ERROR;
 8001b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	e017      	b.n	8001b82 <VL53L7CX_ConfigProfile+0x132>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	bf14      	ite	ne
 8001b5a:	2301      	movne	r3, #1
 8001b5c:	2300      	moveq	r3, #0
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	461a      	mov	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f883 2adc 	strb.w	r2, [r3, #2780]	@ 0xadc
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	bf14      	ite	ne
 8001b70:	2301      	movne	r3, #1
 8001b72:	2300      	moveq	r3, #0
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	461a      	mov	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f883 2add 	strb.w	r2, [r3, #2781]	@ 0xadd

    ret = VL53L7CX_OK;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8001b82:	697b      	ldr	r3, [r7, #20]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <VL53L7CX_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note This device does not support this function.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_ConfigROI(VL53L7CX_Object_t *pObj, VL53L7CX_ROIConfig_t *pROIConfig)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pROIConfig);
  return VL53L7CX_NOT_IMPLEMENTED;
 8001b96:	f06f 0303 	mvn.w	r3, #3
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
	...

08001ba8 <VL53L7CX_ConfigIT>:
  * @param pObj    vl53l7cx context object.
  * @param pITConfig    Pointer to the IT configuration struct.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_ConfigIT(VL53L7CX_Object_t *pObj, VL53L7CX_ITConfig_t *pITConfig)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t i;
  uint8_t res; /* current resolution */
  uint8_t status = 0U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	72bb      	strb	r3, [r7, #10]
  static VL53L7CX_DetectionThresholds thresholds[VL53L7CX_NB_THRESHOLDS];

  if ((pObj == NULL) || (pITConfig == NULL))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d002      	beq.n	8001bc2 <VL53L7CX_ConfigIT+0x1a>
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d103      	bne.n	8001bca <VL53L7CX_ConfigIT+0x22>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8001bc2:	f06f 0301 	mvn.w	r3, #1
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	e09f      	b.n	8001d0a <VL53L7CX_ConfigIT+0x162>
  }
  else if (pITConfig->Criteria == VL53L7CX_IT_DEFAULT)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2bff      	cmp	r3, #255	@ 0xff
 8001bd0:	d113      	bne.n	8001bfa <VL53L7CX_ConfigIT+0x52>
  {
    /* disable thresholds detection */
    status |= vl53l7cx_set_detection_thresholds_enable(&pObj->Dev, 0U);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	3318      	adds	r3, #24
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f002 fbed 	bl	80043b8 <vl53l7cx_set_detection_thresholds_enable>
 8001bde:	4603      	mov	r3, r0
 8001be0:	461a      	mov	r2, r3
 8001be2:	7abb      	ldrb	r3, [r7, #10]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	72bb      	strb	r3, [r7, #10]
    ret = (status != 0U) ? VL53L7CX_ERROR : VL53L7CX_OK;
 8001be8:	7abb      	ldrb	r3, [r7, #10]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d002      	beq.n	8001bf4 <VL53L7CX_ConfigIT+0x4c>
 8001bee:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf2:	e000      	b.n	8001bf6 <VL53L7CX_ConfigIT+0x4e>
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	e087      	b.n	8001d0a <VL53L7CX_ConfigIT+0x162>
  }
  else
  {
    (void)vl53l7cx_get_resolution(&pObj->Dev, &res);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3318      	adds	r3, #24
 8001bfe:	f107 0209 	add.w	r2, r7, #9
 8001c02:	4611      	mov	r1, r2
 8001c04:	4618      	mov	r0, r3
 8001c06:	f002 f8dd 	bl	8003dc4 <vl53l7cx_get_resolution>

    /* configure thresholds on each active zone */
    for (i = 0; i < res; i++)
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	72fb      	strb	r3, [r7, #11]
 8001c0e:	e044      	b.n	8001c9a <VL53L7CX_ConfigIT+0xf2>
    {
      thresholds[i].zone_num = i;
 8001c10:	7afa      	ldrb	r2, [r7, #11]
 8001c12:	4940      	ldr	r1, [pc, #256]	@ (8001d14 <VL53L7CX_ConfigIT+0x16c>)
 8001c14:	4613      	mov	r3, r2
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	4413      	add	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	330a      	adds	r3, #10
 8001c20:	7afa      	ldrb	r2, [r7, #11]
 8001c22:	701a      	strb	r2, [r3, #0]
      thresholds[i].measurement = VL53L7CX_DISTANCE_MM;
 8001c24:	7afa      	ldrb	r2, [r7, #11]
 8001c26:	493b      	ldr	r1, [pc, #236]	@ (8001d14 <VL53L7CX_ConfigIT+0x16c>)
 8001c28:	4613      	mov	r3, r2
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	4413      	add	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	440b      	add	r3, r1
 8001c32:	3308      	adds	r3, #8
 8001c34:	2201      	movs	r2, #1
 8001c36:	701a      	strb	r2, [r3, #0]
      thresholds[i].type = (uint8_t)pITConfig->Criteria;
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	7afa      	ldrb	r2, [r7, #11]
 8001c3e:	b2d8      	uxtb	r0, r3
 8001c40:	4934      	ldr	r1, [pc, #208]	@ (8001d14 <VL53L7CX_ConfigIT+0x16c>)
 8001c42:	4613      	mov	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4413      	add	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	440b      	add	r3, r1
 8001c4c:	3309      	adds	r3, #9
 8001c4e:	4602      	mov	r2, r0
 8001c50:	701a      	strb	r2, [r3, #0]
      thresholds[i].mathematic_operation = VL53L7CX_OPERATION_NONE;
 8001c52:	7afa      	ldrb	r2, [r7, #11]
 8001c54:	492f      	ldr	r1, [pc, #188]	@ (8001d14 <VL53L7CX_ConfigIT+0x16c>)
 8001c56:	4613      	mov	r3, r2
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	4413      	add	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	440b      	add	r3, r1
 8001c60:	330b      	adds	r3, #11
 8001c62:	2200      	movs	r2, #0
 8001c64:	701a      	strb	r2, [r3, #0]
      thresholds[i].param_low_thresh = (int32_t)pITConfig->LowThreshold;
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	7afa      	ldrb	r2, [r7, #11]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	4929      	ldr	r1, [pc, #164]	@ (8001d14 <VL53L7CX_ConfigIT+0x16c>)
 8001c70:	4613      	mov	r3, r2
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	4413      	add	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	440b      	add	r3, r1
 8001c7a:	6018      	str	r0, [r3, #0]
      thresholds[i].param_high_thresh = (int32_t)pITConfig->HighThreshold;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	7afa      	ldrb	r2, [r7, #11]
 8001c82:	4618      	mov	r0, r3
 8001c84:	4923      	ldr	r1, [pc, #140]	@ (8001d14 <VL53L7CX_ConfigIT+0x16c>)
 8001c86:	4613      	mov	r3, r2
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	4413      	add	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	440b      	add	r3, r1
 8001c90:	3304      	adds	r3, #4
 8001c92:	6018      	str	r0, [r3, #0]
    for (i = 0; i < res; i++)
 8001c94:	7afb      	ldrb	r3, [r7, #11]
 8001c96:	3301      	adds	r3, #1
 8001c98:	72fb      	strb	r3, [r7, #11]
 8001c9a:	7a7b      	ldrb	r3, [r7, #9]
 8001c9c:	7afa      	ldrb	r2, [r7, #11]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d3b6      	bcc.n	8001c10 <VL53L7CX_ConfigIT+0x68>
    }

    /* the last threshold must be clearly indicated */
    thresholds[i].zone_num |= VL53L7CX_LAST_THRESHOLD;
 8001ca2:	7afa      	ldrb	r2, [r7, #11]
 8001ca4:	491b      	ldr	r1, [pc, #108]	@ (8001d14 <VL53L7CX_ConfigIT+0x16c>)
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	4413      	add	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	440b      	add	r3, r1
 8001cb0:	330a      	adds	r3, #10
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	7afa      	ldrb	r2, [r7, #11]
 8001cb6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001cba:	b2d8      	uxtb	r0, r3
 8001cbc:	4915      	ldr	r1, [pc, #84]	@ (8001d14 <VL53L7CX_ConfigIT+0x16c>)
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	4413      	add	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	330a      	adds	r3, #10
 8001cca:	4602      	mov	r2, r0
 8001ccc:	701a      	strb	r2, [r3, #0]

    /* send array of thresholds to the sensor */
    status |= vl53l7cx_set_detection_thresholds(&pObj->Dev, thresholds);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3318      	adds	r3, #24
 8001cd2:	4910      	ldr	r1, [pc, #64]	@ (8001d14 <VL53L7CX_ConfigIT+0x16c>)
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f002 fbb5 	bl	8004444 <vl53l7cx_set_detection_thresholds>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	461a      	mov	r2, r3
 8001cde:	7abb      	ldrb	r3, [r7, #10]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	72bb      	strb	r3, [r7, #10]

    /* enable thresholds detection */
    status |= vl53l7cx_set_detection_thresholds_enable(&pObj->Dev, 1U);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3318      	adds	r3, #24
 8001ce8:	2101      	movs	r1, #1
 8001cea:	4618      	mov	r0, r3
 8001cec:	f002 fb64 	bl	80043b8 <vl53l7cx_set_detection_thresholds_enable>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	7abb      	ldrb	r3, [r7, #10]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	72bb      	strb	r3, [r7, #10]

    ret = (status != 0U) ? VL53L7CX_ERROR : VL53L7CX_OK;
 8001cfa:	7abb      	ldrb	r3, [r7, #10]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d002      	beq.n	8001d06 <VL53L7CX_ConfigIT+0x15e>
 8001d00:	f04f 33ff 	mov.w	r3, #4294967295
 8001d04:	e000      	b.n	8001d08 <VL53L7CX_ConfigIT+0x160>
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20002758 	.word	0x20002758

08001d18 <VL53L7CX_GetDistance>:
  * @param pObj    vl53l7cx context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_GetDistance(VL53L7CX_Object_t *pObj, VL53L7CX_Result_t *pResult)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = VL53L7CX_OK;
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
  if ((pObj == NULL) || (pResult == NULL))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d002      	beq.n	8001d32 <VL53L7CX_GetDistance+0x1a>
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d103      	bne.n	8001d3a <VL53L7CX_GetDistance+0x22>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8001d32:	f06f 0301 	mvn.w	r3, #1
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	e007      	b.n	8001d4a <VL53L7CX_GetDistance+0x32>
  }
  else if (pObj->IsRanging == 0U)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 3ad9 	ldrb.w	r3, [r3, #2777]	@ 0xad9
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d102      	bne.n	8001d4a <VL53L7CX_GetDistance+0x32>
  {
    ret = VL53L7CX_ERROR;
 8001d44:	f04f 33ff 	mov.w	r3, #4294967295
 8001d48:	60fb      	str	r3, [r7, #12]
  }
  if (ret == VL53L7CX_OK)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d110      	bne.n	8001d72 <VL53L7CX_GetDistance+0x5a>
  {
    if (pObj->IsBlocking == 1U)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f893 3ada 	ldrb.w	r3, [r3, #2778]	@ 0xada
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d106      	bne.n	8001d68 <VL53L7CX_GetDistance+0x50>
    {
      ret = vl53l7cx_poll_for_measurement(pObj, V53L7CX_POLL_TIMEOUT);
 8001d5a:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f939 	bl	8001fd6 <vl53l7cx_poll_for_measurement>
 8001d64:	60f8      	str	r0, [r7, #12]
 8001d66:	e004      	b.n	8001d72 <VL53L7CX_GetDistance+0x5a>
    }
    else
    {
      ret = vl53l7cx_poll_for_measurement(pObj, 0U);
 8001d68:	2100      	movs	r1, #0
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f933 	bl	8001fd6 <vl53l7cx_poll_for_measurement>
 8001d70:	60f8      	str	r0, [r7, #12]
    }
  }

  /* a new measure is available if no error is returned by the poll function */
  if (ret == VL53L7CX_OK)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d104      	bne.n	8001d82 <VL53L7CX_GetDistance+0x6a>
  {
    ret = vl53l7cx_get_result(pObj, pResult);
 8001d78:	6839      	ldr	r1, [r7, #0]
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f95e 	bl	800203c <vl53l7cx_get_result>
 8001d80:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001d82:	68fb      	ldr	r3, [r7, #12]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <VL53L7CX_Start>:
  * @param pObj    vl53l7cx context object.
  * @param Mode        The desired @ref RANGING_SENSOR_Mode_t
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_Start(VL53L7CX_Object_t *pObj, uint32_t Mode)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d103      	bne.n	8001da4 <VL53L7CX_Start+0x18>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8001d9c:	f06f 0301 	mvn.w	r3, #1
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	e04c      	b.n	8001e3e <VL53L7CX_Start+0xb2>
  }
  else if (vl53l7cx_start_ranging(&pObj->Dev) == VL53L7CX_STATUS_OK)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3318      	adds	r3, #24
 8001da8:	4618      	mov	r0, r3
 8001daa:	f001 fb57 	bl	800345c <vl53l7cx_start_ranging>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d141      	bne.n	8001e38 <VL53L7CX_Start+0xac>
  {
    pObj->IsRanging = 1U;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2ad9 	strb.w	r2, [r3, #2777]	@ 0xad9
    ret = VL53L7CX_OK;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60fb      	str	r3, [r7, #12]

    switch (Mode)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	2b03      	cmp	r3, #3
 8001dc6:	d82f      	bhi.n	8001e28 <VL53L7CX_Start+0x9c>
 8001dc8:	a201      	add	r2, pc, #4	@ (adr r2, 8001dd0 <VL53L7CX_Start+0x44>)
 8001dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dce:	bf00      	nop
 8001dd0:	08001de1 	.word	0x08001de1
 8001dd4:	08001df3 	.word	0x08001df3
 8001dd8:	08001e05 	.word	0x08001e05
 8001ddc:	08001e17 	.word	0x08001e17
    {
      case VL53L7CX_MODE_BLOCKING_CONTINUOUS:
        pObj->IsContinuous = 1U;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2adb 	strb.w	r2, [r3, #2779]	@ 0xadb
        pObj->IsBlocking = 1U;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2ada 	strb.w	r2, [r3, #2778]	@ 0xada
        break;
 8001df0:	e025      	b.n	8001e3e <VL53L7CX_Start+0xb2>

      case VL53L7CX_MODE_BLOCKING_ONESHOT:
        pObj->IsContinuous = 0U;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 2adb 	strb.w	r2, [r3, #2779]	@ 0xadb
        pObj->IsBlocking = 1U;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 2ada 	strb.w	r2, [r3, #2778]	@ 0xada
        break;
 8001e02:	e01c      	b.n	8001e3e <VL53L7CX_Start+0xb2>

      case VL53L7CX_MODE_ASYNC_CONTINUOUS:
        pObj->IsContinuous = 1U;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2adb 	strb.w	r2, [r3, #2779]	@ 0xadb
        pObj->IsBlocking = 0U;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2ada 	strb.w	r2, [r3, #2778]	@ 0xada
        break;
 8001e14:	e013      	b.n	8001e3e <VL53L7CX_Start+0xb2>

      case VL53L7CX_MODE_ASYNC_ONESHOT:
        pObj->IsContinuous = 0U;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 2adb 	strb.w	r2, [r3, #2779]	@ 0xadb
        pObj->IsBlocking = 0U;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2ada 	strb.w	r2, [r3, #2778]	@ 0xada
        break;
 8001e26:	e00a      	b.n	8001e3e <VL53L7CX_Start+0xb2>

      default:
        pObj->IsRanging = 0U;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 2ad9 	strb.w	r2, [r3, #2777]	@ 0xad9
        ret = VL53L7CX_INVALID_PARAM;
 8001e30:	f06f 0301 	mvn.w	r3, #1
 8001e34:	60fb      	str	r3, [r7, #12]
        break;
 8001e36:	e002      	b.n	8001e3e <VL53L7CX_Start+0xb2>
    }
  }
  else
  {
    ret = VL53L7CX_ERROR;
 8001e38:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <VL53L7CX_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l7cx context object.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_Stop(VL53L7CX_Object_t *pObj)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d103      	bne.n	8001e5e <VL53L7CX_Stop+0x16>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8001e56:	f06f 0301 	mvn.w	r3, #1
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	e01a      	b.n	8001e94 <VL53L7CX_Stop+0x4c>
  }
  else if (pObj->IsRanging == 0U)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 3ad9 	ldrb.w	r3, [r3, #2777]	@ 0xad9
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d103      	bne.n	8001e70 <VL53L7CX_Stop+0x28>
  {
    /* ranging not started */
    ret = VL53L7CX_ERROR;
 8001e68:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	e011      	b.n	8001e94 <VL53L7CX_Stop+0x4c>
  }
  else if (vl53l7cx_stop_ranging(&pObj->Dev) == VL53L7CX_STATUS_OK)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3318      	adds	r3, #24
 8001e74:	4618      	mov	r0, r3
 8001e76:	f001 fc6b 	bl	8003750 <vl53l7cx_stop_ranging>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d106      	bne.n	8001e8e <VL53L7CX_Stop+0x46>
  {
    pObj->IsRanging = 0U;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 2ad9 	strb.w	r2, [r3, #2777]	@ 0xad9
    ret = VL53L7CX_OK;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	e002      	b.n	8001e94 <VL53L7CX_Stop+0x4c>
  }
  else
  {
    ret = VL53L7CX_ERROR;
 8001e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e92:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001e94:	68fb      	ldr	r3, [r7, #12]
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <VL53L7CX_SetAddress>:
  * @param pObj    vl53l7cx context object.
  * @param Address     New I2C address.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_SetAddress(VL53L7CX_Object_t *pObj, uint32_t Address)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b084      	sub	sp, #16
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
 8001ea6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d103      	bne.n	8001eb6 <VL53L7CX_SetAddress+0x18>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8001eae:	f06f 0301 	mvn.w	r3, #1
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	e015      	b.n	8001ee2 <VL53L7CX_SetAddress+0x44>
  }
  else if (vl53l7cx_set_i2c_address(&pObj->Dev, (uint8_t)Address) != VL53L7CX_STATUS_OK)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3318      	adds	r3, #24
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f001 f9d3 	bl	800326c <vl53l7cx_set_i2c_address>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <VL53L7CX_SetAddress+0x36>
  {
    ret = VL53L7CX_ERROR;
 8001ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	e006      	b.n	8001ee2 <VL53L7CX_SetAddress+0x44>
  }
  else
  {
    pObj->IO.Address = (uint8_t)(Address & 0xFFU);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	461a      	mov	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	811a      	strh	r2, [r3, #8]
    ret = VL53L7CX_OK;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <VL53L7CX_GetAddress>:
  * @param pObj    vl53l7cx context object.
  * @param *pAddress     New I2C address.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_GetAddress(VL53L7CX_Object_t *pObj, uint32_t *pAddress)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d002      	beq.n	8001f02 <VL53L7CX_GetAddress+0x16>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d103      	bne.n	8001f0a <VL53L7CX_GetAddress+0x1e>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8001f02:	f06f 0301 	mvn.w	r3, #1
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	e006      	b.n	8001f18 <VL53L7CX_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	891b      	ldrh	r3, [r3, #8]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	601a      	str	r2, [r3, #0]
    ret = VL53L7CX_OK;
 8001f14:	2300      	movs	r3, #0
 8001f16:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001f18:	68fb      	ldr	r3, [r7, #12]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <VL53L7CX_SetPowerMode>:
  * @param pObj    vl53l7cx context object.
  * @param PowerMode    New power mode to be entered.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_SetPowerMode(VL53L7CX_Object_t *pObj, uint32_t PowerMode)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b084      	sub	sp, #16
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
 8001f2e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d103      	bne.n	8001f3e <VL53L7CX_SetPowerMode+0x18>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8001f36:	f06f 0301 	mvn.w	r3, #1
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	e01a      	b.n	8001f74 <VL53L7CX_SetPowerMode+0x4e>
  }
  else if ((PowerMode != VL53L7CX_POWER_MODE_SLEEP) &&
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d006      	beq.n	8001f52 <VL53L7CX_SetPowerMode+0x2c>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d003      	beq.n	8001f52 <VL53L7CX_SetPowerMode+0x2c>
           (PowerMode != VL53L7CX_POWER_MODE_WAKEUP))
  {
    ret = VL53L7CX_INVALID_PARAM;
 8001f4a:	f06f 0301 	mvn.w	r3, #1
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	e010      	b.n	8001f74 <VL53L7CX_SetPowerMode+0x4e>
  }
  else if (vl53l7cx_set_power_mode(&pObj->Dev, (uint8_t)PowerMode) != VL53L7CX_STATUS_OK)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	3318      	adds	r3, #24
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f001 f9fe 	bl	800335e <vl53l7cx_set_power_mode>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <VL53L7CX_SetPowerMode+0x4a>
  {
    ret = VL53L7CX_ERROR;
 8001f68:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	e001      	b.n	8001f74 <VL53L7CX_SetPowerMode+0x4e>
  }
  else
  {
    ret = VL53L7CX_OK;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001f74:	68fb      	ldr	r3, [r7, #12]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <VL53L7CX_GetPowerMode>:
  * @param pObj    vl53l7cx context object.
  * @param *pPowerMode    pointer to variable to be filled with power mode value.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_GetPowerMode(VL53L7CX_Object_t *pObj, uint32_t *pPowerMode)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b084      	sub	sp, #16
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
 8001f86:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t powermode;

  if ((pObj == NULL) || (pPowerMode == NULL))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d002      	beq.n	8001f94 <VL53L7CX_GetPowerMode+0x16>
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d103      	bne.n	8001f9c <VL53L7CX_GetPowerMode+0x1e>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8001f94:	f06f 0301 	mvn.w	r3, #1
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	e017      	b.n	8001fcc <VL53L7CX_GetPowerMode+0x4e>
  }
  else if (vl53l7cx_get_power_mode(&pObj->Dev, &powermode) != VL53L7CX_STATUS_OK)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3318      	adds	r3, #24
 8001fa0:	f107 020b 	add.w	r2, r7, #11
 8001fa4:	4611      	mov	r1, r2
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f001 f996 	bl	80032d8 <vl53l7cx_get_power_mode>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d006      	beq.n	8001fc0 <VL53L7CX_GetPowerMode+0x42>
  {
    *pPowerMode = 0;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
    ret = VL53L7CX_ERROR;
 8001fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	e005      	b.n	8001fcc <VL53L7CX_GetPowerMode+0x4e>
  }
  else
  {
    *pPowerMode = (uint32_t)powermode;
 8001fc0:	7afb      	ldrb	r3, [r7, #11]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	601a      	str	r2, [r3, #0]
    ret = VL53L7CX_OK;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <vl53l7cx_poll_for_measurement>:

/** @defgroup VL53L7CX_Private_Functions Private Functions
  * @{
  */
static int32_t vl53l7cx_poll_for_measurement(VL53L7CX_Object_t *pObj, uint32_t Timeout)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b086      	sub	sp, #24
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
 8001fde:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	73fb      	strb	r3, [r7, #15]

  if (pObj == NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d103      	bne.n	8001ff2 <vl53l7cx_poll_for_measurement+0x1c>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8001fea:	f06f 0301 	mvn.w	r3, #1
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	e01f      	b.n	8002032 <vl53l7cx_poll_for_measurement+0x5c>
  }
  else
  {
    ret =  VL53L7CX_TIMEOUT;
 8001ff2:	f06f 0302 	mvn.w	r3, #2
 8001ff6:	617b      	str	r3, [r7, #20]
    TickStart = pObj->IO.GetTick();
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	4798      	blx	r3
 8001ffe:	4603      	mov	r3, r0
 8002000:	613b      	str	r3, [r7, #16]

    do
    {
      (void)vl53l7cx_check_data_ready(&pObj->Dev, &NewDataReady);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	3318      	adds	r3, #24
 8002006:	f107 020f 	add.w	r2, r7, #15
 800200a:	4611      	mov	r1, r2
 800200c:	4618      	mov	r0, r3
 800200e:	f001 fc6f 	bl	80038f0 <vl53l7cx_check_data_ready>

      if (NewDataReady == 1U)
 8002012:	7bfb      	ldrb	r3, [r7, #15]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d102      	bne.n	800201e <vl53l7cx_poll_for_measurement+0x48>
      {
        ret = VL53L7CX_OK;
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]
        break;
 800201c:	e009      	b.n	8002032 <vl53l7cx_poll_for_measurement+0x5c>
      }
    } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	4798      	blx	r3
 8002024:	4603      	mov	r3, r0
 8002026:	461a      	mov	r2, r3
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	d8e7      	bhi.n	8002002 <vl53l7cx_poll_for_measurement+0x2c>

  }

  return ret;
 8002032:	697b      	ldr	r3, [r7, #20]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <vl53l7cx_get_result>:

static int32_t vl53l7cx_get_result(VL53L7CX_Object_t *pObj, VL53L7CX_Result_t *pResult)
{
 800203c:	b590      	push	{r4, r7, lr}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint8_t resolution;
  uint8_t target_status;
  static VL53L7CX_ResultsData data;

  if ((pObj == NULL) || (pResult == NULL))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d002      	beq.n	8002052 <vl53l7cx_get_result+0x16>
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d103      	bne.n	800205a <vl53l7cx_get_result+0x1e>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8002052:	f06f 0301 	mvn.w	r3, #1
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	e0cf      	b.n	80021fa <vl53l7cx_get_result+0x1be>
  }
  else if (vl53l7cx_get_resolution(&pObj->Dev, &resolution) != VL53L7CX_STATUS_OK)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3318      	adds	r3, #24
 800205e:	f107 0208 	add.w	r2, r7, #8
 8002062:	4611      	mov	r1, r2
 8002064:	4618      	mov	r0, r3
 8002066:	f001 fead 	bl	8003dc4 <vl53l7cx_get_resolution>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <vl53l7cx_get_result+0x3c>
  {
    ret = VL53L7CX_ERROR;
 8002070:	f04f 33ff 	mov.w	r3, #4294967295
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	e0c0      	b.n	80021fa <vl53l7cx_get_result+0x1be>
  }
  else if (vl53l7cx_get_ranging_data(&pObj->Dev, &data) != VL53L7CX_STATUS_OK)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3318      	adds	r3, #24
 800207c:	4961      	ldr	r1, [pc, #388]	@ (8002204 <vl53l7cx_get_result+0x1c8>)
 800207e:	4618      	mov	r0, r3
 8002080:	f001 fc86 	bl	8003990 <vl53l7cx_get_ranging_data>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <vl53l7cx_get_result+0x56>
  {
    ret = VL53L7CX_ERROR;
 800208a:	f04f 33ff 	mov.w	r3, #4294967295
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	e0b3      	b.n	80021fa <vl53l7cx_get_result+0x1be>
  }
  else
  {
    pResult->NumberOfZones = resolution;
 8002092:	7a3b      	ldrb	r3, [r7, #8]
 8002094:	461a      	mov	r2, r3
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	601a      	str	r2, [r3, #0]

    for (i = 0; i < resolution; i++)
 800209a:	2300      	movs	r3, #0
 800209c:	72fb      	strb	r3, [r7, #11]
 800209e:	e0a5      	b.n	80021ec <vl53l7cx_get_result+0x1b0>
    {
      pResult->ZoneResult[i].NumberOfTargets = data.nb_target_detected[i];
 80020a0:	7afb      	ldrb	r3, [r7, #11]
 80020a2:	7afa      	ldrb	r2, [r7, #11]
 80020a4:	4957      	ldr	r1, [pc, #348]	@ (8002204 <vl53l7cx_get_result+0x1c8>)
 80020a6:	440b      	add	r3, r1
 80020a8:	f893 0104 	ldrb.w	r0, [r3, #260]	@ 0x104
 80020ac:	6839      	ldr	r1, [r7, #0]
 80020ae:	4613      	mov	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	440b      	add	r3, r1
 80020b8:	3304      	adds	r3, #4
 80020ba:	4602      	mov	r2, r0
 80020bc:	701a      	strb	r2, [r3, #0]

      for (j = 0; j < data.nb_target_detected[i]; j++)
 80020be:	2300      	movs	r3, #0
 80020c0:	72bb      	strb	r3, [r7, #10]
 80020c2:	e087      	b.n	80021d4 <vl53l7cx_get_result+0x198>
      {
        pResult->ZoneResult[i].Distance[j] = (uint32_t)data.distance_mm[(VL53L7CX_NB_TARGET_PER_ZONE * i) + j];
 80020c4:	7afa      	ldrb	r2, [r7, #11]
 80020c6:	7abb      	ldrb	r3, [r7, #10]
 80020c8:	4413      	add	r3, r2
 80020ca:	4a4e      	ldr	r2, [pc, #312]	@ (8002204 <vl53l7cx_get_result+0x1c8>)
 80020cc:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	4413      	add	r3, r2
 80020d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80020d8:	7afa      	ldrb	r2, [r7, #11]
 80020da:	7ab8      	ldrb	r0, [r7, #10]
 80020dc:	461c      	mov	r4, r3
 80020de:	6839      	ldr	r1, [r7, #0]
 80020e0:	4613      	mov	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	4403      	add	r3, r0
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	609c      	str	r4, [r3, #8]

        /* return Ambient value if ambient rate output is enabled */
        if (pObj->IsAmbientEnabled == 1U)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 3adc 	ldrb.w	r3, [r3, #2780]	@ 0xadc
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d116      	bne.n	8002126 <vl53l7cx_get_result+0xea>
        {
          /* apply ambient value to all targets in a given zone */
          pResult->ZoneResult[i].Ambient[j] = (float_t)data.ambient_per_spad[i];
 80020f8:	7afb      	ldrb	r3, [r7, #11]
 80020fa:	4a42      	ldr	r2, [pc, #264]	@ (8002204 <vl53l7cx_get_result+0x1c8>)
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	7afa      	ldrb	r2, [r7, #11]
 8002104:	7ab8      	ldrb	r0, [r7, #10]
 8002106:	ee07 3a90 	vmov	s15, r3
 800210a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800210e:	6839      	ldr	r1, [r7, #0]
 8002110:	4613      	mov	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	4403      	add	r3, r0
 8002118:	3302      	adds	r3, #2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	440b      	add	r3, r1
 800211e:	3308      	adds	r3, #8
 8002120:	edc3 7a00 	vstr	s15, [r3]
 8002124:	e00d      	b.n	8002142 <vl53l7cx_get_result+0x106>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 8002126:	7afa      	ldrb	r2, [r7, #11]
 8002128:	7ab8      	ldrb	r0, [r7, #10]
 800212a:	6839      	ldr	r1, [r7, #0]
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	4403      	add	r3, r0
 8002134:	3302      	adds	r3, #2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	3308      	adds	r3, #8
 800213c:	f04f 0200 	mov.w	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
        }

        /* return Signal value if signal rate output is enabled */
        if (pObj->IsSignalEnabled == 1U)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 3add 	ldrb.w	r3, [r3, #2781]	@ 0xadd
 8002148:	2b01      	cmp	r3, #1
 800214a:	d119      	bne.n	8002180 <vl53l7cx_get_result+0x144>
        {
          pResult->ZoneResult[i].Signal[j] =
            (float_t)data.signal_per_spad[(VL53L7CX_NB_TARGET_PER_ZONE * i) + j];
 800214c:	7afa      	ldrb	r2, [r7, #11]
 800214e:	7abb      	ldrb	r3, [r7, #10]
 8002150:	4413      	add	r3, r2
 8002152:	4a2c      	ldr	r2, [pc, #176]	@ (8002204 <vl53l7cx_get_result+0x1c8>)
 8002154:	3390      	adds	r3, #144	@ 0x90
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	685b      	ldr	r3, [r3, #4]
          pResult->ZoneResult[i].Signal[j] =
 800215c:	7afa      	ldrb	r2, [r7, #11]
 800215e:	7ab8      	ldrb	r0, [r7, #10]
            (float_t)data.signal_per_spad[(VL53L7CX_NB_TARGET_PER_ZONE * i) + j];
 8002160:	ee07 3a90 	vmov	s15, r3
 8002164:	eef8 7a67 	vcvt.f32.u32	s15, s15
          pResult->ZoneResult[i].Signal[j] =
 8002168:	6839      	ldr	r1, [r7, #0]
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	4403      	add	r3, r0
 8002172:	3304      	adds	r3, #4
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	440b      	add	r3, r1
 8002178:	3304      	adds	r3, #4
 800217a:	edc3 7a00 	vstr	s15, [r3]
 800217e:	e00d      	b.n	800219c <vl53l7cx_get_result+0x160>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 8002180:	7afa      	ldrb	r2, [r7, #11]
 8002182:	7ab8      	ldrb	r0, [r7, #10]
 8002184:	6839      	ldr	r1, [r7, #0]
 8002186:	4613      	mov	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	4403      	add	r3, r0
 800218e:	3304      	adds	r3, #4
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	440b      	add	r3, r1
 8002194:	3304      	adds	r3, #4
 8002196:	f04f 0200 	mov.w	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
        }

        target_status = data.target_status[(VL53L7CX_NB_TARGET_PER_ZONE * i) + j];
 800219c:	7afa      	ldrb	r2, [r7, #11]
 800219e:	7abb      	ldrb	r3, [r7, #10]
 80021a0:	4413      	add	r3, r2
 80021a2:	4a18      	ldr	r2, [pc, #96]	@ (8002204 <vl53l7cx_get_result+0x1c8>)
 80021a4:	4413      	add	r3, r2
 80021a6:	f893 3484 	ldrb.w	r3, [r3, #1156]	@ 0x484
 80021aa:	727b      	strb	r3, [r7, #9]
        pResult->ZoneResult[i].Status[j] = vl53l7cx_map_target_status(target_status);
 80021ac:	7a7b      	ldrb	r3, [r7, #9]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 f82a 	bl	8002208 <vl53l7cx_map_target_status>
 80021b4:	4603      	mov	r3, r0
 80021b6:	7afa      	ldrb	r2, [r7, #11]
 80021b8:	7ab8      	ldrb	r0, [r7, #10]
 80021ba:	461c      	mov	r4, r3
 80021bc:	6839      	ldr	r1, [r7, #0]
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	4403      	add	r3, r0
 80021c6:	3302      	adds	r3, #2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	440b      	add	r3, r1
 80021cc:	605c      	str	r4, [r3, #4]
      for (j = 0; j < data.nb_target_detected[i]; j++)
 80021ce:	7abb      	ldrb	r3, [r7, #10]
 80021d0:	3301      	adds	r3, #1
 80021d2:	72bb      	strb	r3, [r7, #10]
 80021d4:	7afb      	ldrb	r3, [r7, #11]
 80021d6:	4a0b      	ldr	r2, [pc, #44]	@ (8002204 <vl53l7cx_get_result+0x1c8>)
 80021d8:	4413      	add	r3, r2
 80021da:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80021de:	7aba      	ldrb	r2, [r7, #10]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	f4ff af6f 	bcc.w	80020c4 <vl53l7cx_get_result+0x88>
    for (i = 0; i < resolution; i++)
 80021e6:	7afb      	ldrb	r3, [r7, #11]
 80021e8:	3301      	adds	r3, #1
 80021ea:	72fb      	strb	r3, [r7, #11]
 80021ec:	7a3b      	ldrb	r3, [r7, #8]
 80021ee:	7afa      	ldrb	r2, [r7, #11]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	f4ff af55 	bcc.w	80020a0 <vl53l7cx_get_result+0x64>
      }
    }

    ret = VL53L7CX_OK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80021fa:	68fb      	ldr	r3, [r7, #12]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	bd90      	pop	{r4, r7, pc}
 8002204:	20002a58 	.word	0x20002a58

08002208 <vl53l7cx_map_target_status>:

static uint8_t vl53l7cx_map_target_status(uint8_t status)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	71fb      	strb	r3, [r7, #7]
  uint8_t ret;

  if ((status == 5U) || (status == 9U))
 8002212:	79fb      	ldrb	r3, [r7, #7]
 8002214:	2b05      	cmp	r3, #5
 8002216:	d002      	beq.n	800221e <vl53l7cx_map_target_status+0x16>
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	2b09      	cmp	r3, #9
 800221c:	d102      	bne.n	8002224 <vl53l7cx_map_target_status+0x1c>
  {
    ret = 0U; /* ranging is OK */
 800221e:	2300      	movs	r3, #0
 8002220:	73fb      	strb	r3, [r7, #15]
 8002222:	e007      	b.n	8002234 <vl53l7cx_map_target_status+0x2c>
  }
  else if (status == 0U)
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d102      	bne.n	8002230 <vl53l7cx_map_target_status+0x28>
  {
    ret = 255U; /* no update */
 800222a:	23ff      	movs	r3, #255	@ 0xff
 800222c:	73fb      	strb	r3, [r7, #15]
 800222e:	e001      	b.n	8002234 <vl53l7cx_map_target_status+0x2c>
  }
  else
  {
    ret = status; /* return device status otherwise */
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002234:	7bfb      	ldrb	r3, [r7, #15]
}
 8002236:	4618      	mov	r0, r3
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <_vl53l7cx_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b084      	sub	sp, #16
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
 800224a:	4608      	mov	r0, r1
 800224c:	4611      	mov	r1, r2
 800224e:	461a      	mov	r2, r3
 8002250:	4603      	mov	r3, r0
 8002252:	70fb      	strb	r3, [r7, #3]
 8002254:	460b      	mov	r3, r1
 8002256:	70bb      	strb	r3, [r7, #2]
 8002258:	4613      	mov	r3, r2
 800225a:	803b      	strh	r3, [r7, #0]
	uint8_t status = VL53L7CX_STATUS_OK;
 800225c:	2300      	movs	r3, #0
 800225e:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	73bb      	strb	r3, [r7, #14]

	do {
		status |= VL53L7CX_RdMulti(&(p_dev->platform), address,
 8002264:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
		status |= VL53L7CX_RdMulti(&(p_dev->platform), address,
 800226c:	78fb      	ldrb	r3, [r7, #3]
 800226e:	8839      	ldrh	r1, [r7, #0]
 8002270:	f7ff fa52 	bl	8001718 <VL53L7CX_RdMulti>
 8002274:	4603      	mov	r3, r0
 8002276:	461a      	mov	r2, r3
 8002278:	7bfb      	ldrb	r3, [r7, #15]
 800227a:	4313      	orrs	r3, r2
 800227c:	73fb      	strb	r3, [r7, #15]
		status |= VL53L7CX_WaitMs(&(p_dev->platform), 10);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	210a      	movs	r1, #10
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff fa95 	bl	80017b2 <VL53L7CX_WaitMs>
 8002288:	4603      	mov	r3, r0
 800228a:	461a      	mov	r2, r3
 800228c:	7bfb      	ldrb	r3, [r7, #15]
 800228e:	4313      	orrs	r3, r2
 8002290:	73fb      	strb	r3, [r7, #15]

		if(timeout >= (uint8_t)200)	/* 2s timeout */
 8002292:	7bbb      	ldrb	r3, [r7, #14]
 8002294:	2bc7      	cmp	r3, #199	@ 0xc7
 8002296:	d904      	bls.n	80022a2 <_vl53l7cx_poll_for_answer+0x60>
		{
			status |= (uint8_t)VL53L7CX_STATUS_TIMEOUT_ERROR;
 8002298:	7bfb      	ldrb	r3, [r7, #15]
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	73fb      	strb	r3, [r7, #15]
			break;
 80022a0:	e01a      	b.n	80022d8 <_vl53l7cx_poll_for_answer+0x96>
		}else if((size >= (uint8_t)4) 
 80022a2:	78fb      	ldrb	r3, [r7, #3]
 80022a4:	2b03      	cmp	r3, #3
 80022a6:	d909      	bls.n	80022bc <_vl53l7cx_poll_for_answer+0x7a>
                         && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 3512 	ldrb.w	r3, [r3, #1298]	@ 0x512
 80022ae:	2b7e      	cmp	r3, #126	@ 0x7e
 80022b0:	d904      	bls.n	80022bc <_vl53l7cx_poll_for_answer+0x7a>
		{
			status |= VL53L7CX_MCU_ERROR;
 80022b2:	7bfb      	ldrb	r3, [r7, #15]
 80022b4:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80022b8:	73fb      	strb	r3, [r7, #15]
			break;
 80022ba:	e00d      	b.n	80022d8 <_vl53l7cx_poll_for_answer+0x96>
		}
		else
		{
			timeout++;
 80022bc:	7bbb      	ldrb	r3, [r7, #14]
 80022be:	3301      	adds	r3, #1
 80022c0:	73bb      	strb	r3, [r7, #14]
		}
	}while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 80022c2:	78bb      	ldrb	r3, [r7, #2]
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	4413      	add	r3, r2
 80022c8:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 80022cc:	7e3b      	ldrb	r3, [r7, #24]
 80022ce:	4013      	ands	r3, r2
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	7f3a      	ldrb	r2, [r7, #28]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d1c5      	bne.n	8002264 <_vl53l7cx_poll_for_answer+0x22>

	return status;
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <_vl53l7cx_poll_for_mcu_boot>:
 * Inner function, not available outside this file. This function is used to
 * wait for the MCU to boot.
 */
static uint8_t _vl53l7cx_poll_for_mcu_boot(
              VL53L7CX_Configuration      *p_dev)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b084      	sub	sp, #16
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
   uint8_t go2_status0, go2_status1, status = VL53L7CX_STATUS_OK;
 80022ea:	2300      	movs	r3, #0
 80022ec:	73fb      	strb	r3, [r7, #15]
   uint16_t timeout = 0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	81bb      	strh	r3, [r7, #12]

   do {
		status |= VL53L7CX_RdByte(&(p_dev->platform), 0x06, &go2_status0);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f107 020b 	add.w	r2, r7, #11
 80022f8:	2106      	movs	r1, #6
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff f9ca 	bl	8001694 <VL53L7CX_RdByte>
 8002300:	4603      	mov	r3, r0
 8002302:	461a      	mov	r2, r3
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	4313      	orrs	r3, r2
 8002308:	73fb      	strb	r3, [r7, #15]
		if((go2_status0 & (uint8_t)0x80) != (uint8_t)0){
 800230a:	7afb      	ldrb	r3, [r7, #11]
 800230c:	b25b      	sxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	da10      	bge.n	8002334 <_vl53l7cx_poll_for_mcu_boot+0x52>
			status |= VL53L7CX_RdByte(&(p_dev->platform), 0x07, &go2_status1);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f107 020a 	add.w	r2, r7, #10
 8002318:	2107      	movs	r1, #7
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff f9ba 	bl	8001694 <VL53L7CX_RdByte>
 8002320:	4603      	mov	r3, r0
 8002322:	461a      	mov	r2, r3
 8002324:	7bfb      	ldrb	r3, [r7, #15]
 8002326:	4313      	orrs	r3, r2
 8002328:	73fb      	strb	r3, [r7, #15]
			status |= go2_status1;
 800232a:	7aba      	ldrb	r2, [r7, #10]
 800232c:	7bfb      	ldrb	r3, [r7, #15]
 800232e:	4313      	orrs	r3, r2
 8002330:	73fb      	strb	r3, [r7, #15]
			break;
 8002332:	e012      	b.n	800235a <_vl53l7cx_poll_for_mcu_boot+0x78>
		}
		(void)VL53L7CX_WaitMs(&(p_dev->platform), 1);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2101      	movs	r1, #1
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff fa3a 	bl	80017b2 <VL53L7CX_WaitMs>
		timeout++;
 800233e:	89bb      	ldrh	r3, [r7, #12]
 8002340:	3301      	adds	r3, #1
 8002342:	81bb      	strh	r3, [r7, #12]

		if((go2_status0 & (uint8_t)0x1) != (uint8_t)0){
 8002344:	7afb      	ldrb	r3, [r7, #11]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d104      	bne.n	8002358 <_vl53l7cx_poll_for_mcu_boot+0x76>
			break;
		}

	}while (timeout < (uint16_t)500);
 800234e:	89bb      	ldrh	r3, [r7, #12]
 8002350:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002354:	d3cd      	bcc.n	80022f2 <_vl53l7cx_poll_for_mcu_boot+0x10>
 8002356:	e000      	b.n	800235a <_vl53l7cx_poll_for_mcu_boot+0x78>
			break;
 8002358:	bf00      	nop

   return status;
 800235a:	7bfb      	ldrb	r3, [r7, #15]
}
 800235c:	4618      	mov	r0, r3
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <_vl53l7cx_send_offset_data>:
 */

static uint8_t _vl53l7cx_send_offset_data(
		VL53L7CX_Configuration		*p_dev,
		uint8_t						resolution)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b0ea      	sub	sp, #424	@ 0x1a8
 8002368:	af02      	add	r7, sp, #8
 800236a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800236e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002372:	6018      	str	r0, [r3, #0]
 8002374:	460a      	mov	r2, r1
 8002376:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800237a:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 800237e:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L7CX_STATUS_OK;
 8002380:	2300      	movs	r3, #0
 8002382:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 8002386:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800238a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800238e:	4ad9      	ldr	r2, [pc, #868]	@ (80026f4 <_vl53l7cx_send_offset_data+0x390>)
 8002390:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002394:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 8002398:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800239c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80023a0:	4ad5      	ldr	r2, [pc, #852]	@ (80026f8 <_vl53l7cx_send_offset_data+0x394>)
 80023a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023a6:	e883 0003 	stmia.w	r3, {r0, r1}
	int8_t i, j;
	uint16_t k;

	(void)memcpy(p_dev->temp_buffer,
 80023aa:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80023ae:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f503 60a2 	add.w	r0, r3, #1296	@ 0x510
               p_dev->offset_data, VL53L7CX_OFFSET_BUFFER_SIZE);
 80023b8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80023bc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	3320      	adds	r3, #32
	(void)memcpy(p_dev->temp_buffer,
 80023c4:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80023c8:	4619      	mov	r1, r3
 80023ca:	f005 f9a4 	bl	8007716 <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53L7CX_RESOLUTION_4X4){
 80023ce:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80023d2:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b10      	cmp	r3, #16
 80023da:	f040 8122 	bne.w	8002622 <_vl53l7cx_send_offset_data+0x2be>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 80023de:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80023e2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f503 62a4 	add.w	r2, r3, #1312	@ 0x520
 80023ec:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80023f0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80023f4:	cb03      	ldmia	r3!, {r0, r1}
 80023f6:	6010      	str	r0, [r2, #0]
 80023f8:	6051      	str	r1, [r2, #4]
		VL53L7CX_SwapBuffer(p_dev->temp_buffer, VL53L7CX_OFFSET_BUFFER_SIZE);
 80023fa:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80023fe:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8002408:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff f99a 	bl	8001746 <VL53L7CX_SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 8002412:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002416:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f203 514c 	addw	r1, r3, #1356	@ 0x54c
 8002420:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8002424:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002428:	4618      	mov	r0, r3
 800242a:	f005 f974 	bl	8007716 <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 800242e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002432:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f503 61ca 	add.w	r1, r3, #1616	@ 0x650
 800243c:	f107 0318 	add.w	r3, r7, #24
 8002440:	2280      	movs	r2, #128	@ 0x80
 8002442:	4618      	mov	r0, r3
 8002444:	f005 f967 	bl	8007716 <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 8002448:	2300      	movs	r3, #0
 800244a:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 800244e:	e0ac      	b.n	80025aa <_vl53l7cx_send_offset_data+0x246>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8002450:	2300      	movs	r3, #0
 8002452:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 8002456:	e09c      	b.n	8002592 <_vl53l7cx_send_offset_data+0x22e>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 8002458:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 800245c:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	4413      	add	r3, r2
 8002464:	005a      	lsls	r2, r3, #1
 8002466:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800246a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800246e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 8002472:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8002476:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	440b      	add	r3, r1
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	1c59      	adds	r1, r3, #1
 8002482:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002486:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800248a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800248e:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 8002490:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8002494:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	440b      	add	r3, r1
 800249c:	3304      	adds	r3, #4
 800249e:	0059      	lsls	r1, r3, #1
 80024a0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80024a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80024a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80024ac:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 80024ae:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 80024b2:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	440b      	add	r3, r1
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	f103 0109 	add.w	r1, r3, #9
 80024c0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80024c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80024c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80024cc:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 80024ce:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 80024d2:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 80024d6:	0092      	lsls	r2, r2, #2
 80024d8:	440a      	add	r2, r1
                                  /(uint32_t)4;
 80024da:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 80024dc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80024e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80024e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 80024e8:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 80024ec:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	4413      	add	r3, r2
 80024f4:	005a      	lsls	r2, r3, #1
 80024f6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80024fa:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80024fe:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002502:	4619      	mov	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 8002504:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8002508:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	4413      	add	r3, r2
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	1c5a      	adds	r2, r3, #1
 8002514:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002518:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800251c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002520:	440b      	add	r3, r1
				+ range_grid[(2*i)+(16*j)+8]
 8002522:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8002526:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 800252a:	00d2      	lsls	r2, r2, #3
 800252c:	440a      	add	r2, r1
 800252e:	3204      	adds	r2, #4
 8002530:	0051      	lsls	r1, r2, #1
 8002532:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8002536:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 800253a:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 800253e:	4413      	add	r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 8002540:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8002544:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 8002548:	00d2      	lsls	r2, r2, #3
 800254a:	440a      	add	r2, r1
 800254c:	0052      	lsls	r2, r2, #1
 800254e:	f102 0109 	add.w	r1, r2, #9
 8002552:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8002556:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 800255a:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 800255e:	4413      	add	r3, r2
                                  /(int16_t)4;
 8002560:	2b00      	cmp	r3, #0
 8002562:	da00      	bge.n	8002566 <_vl53l7cx_send_offset_data+0x202>
 8002564:	3303      	adds	r3, #3
 8002566:	109b      	asrs	r3, r3, #2
 8002568:	4619      	mov	r1, r3
				range_grid[i+(4*j)] =
 800256a:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 800256e:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	441a      	add	r2, r3
 8002576:	b209      	sxth	r1, r1
 8002578:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800257c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002580:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i = 0; i < (int8_t)4 ; i++)
 8002584:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 8002588:	b2db      	uxtb	r3, r3
 800258a:	3301      	adds	r3, #1
 800258c:	b2db      	uxtb	r3, r3
 800258e:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 8002592:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 8002596:	2b03      	cmp	r3, #3
 8002598:	f77f af5e 	ble.w	8002458 <_vl53l7cx_send_offset_data+0xf4>
		for (j = 0; j < (int8_t)4; j++)
 800259c:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	3301      	adds	r3, #1
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 80025aa:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80025ae:	2b03      	cmp	r3, #3
 80025b0:	f77f af4e 	ble.w	8002450 <_vl53l7cx_send_offset_data+0xec>
			}
		}
	    (void)memset(&range_grid[0x10], 0, (uint16_t)96);
 80025b4:	f107 0318 	add.w	r3, r7, #24
 80025b8:	3320      	adds	r3, #32
 80025ba:	2260      	movs	r2, #96	@ 0x60
 80025bc:	2100      	movs	r1, #0
 80025be:	4618      	mov	r0, r3
 80025c0:	f005 f82e 	bl	8007620 <memset>
	    (void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 80025c4:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80025c8:	3340      	adds	r3, #64	@ 0x40
 80025ca:	22c0      	movs	r2, #192	@ 0xc0
 80025cc:	2100      	movs	r1, #0
 80025ce:	4618      	mov	r0, r3
 80025d0:	f005 f826 	bl	8007620 <memset>
            (void)memcpy(&(p_dev->temp_buffer[0x3C]),
 80025d4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80025d8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f203 534c 	addw	r3, r3, #1356	@ 0x54c
 80025e2:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 80025e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025ea:	4618      	mov	r0, r3
 80025ec:	f005 f893 	bl	8007716 <memcpy>
		signal_grid, sizeof(signal_grid));
            (void)memcpy(&(p_dev->temp_buffer[0x140]),
 80025f0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80025f4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f503 63ca 	add.w	r3, r3, #1616	@ 0x650
 80025fe:	f107 0118 	add.w	r1, r7, #24
 8002602:	2280      	movs	r2, #128	@ 0x80
 8002604:	4618      	mov	r0, r3
 8002606:	f005 f886 	bl	8007716 <memcpy>
		range_grid, sizeof(range_grid));
            VL53L7CX_SwapBuffer(p_dev->temp_buffer, VL53L7CX_OFFSET_BUFFER_SIZE);
 800260a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800260e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8002618:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff f892 	bl	8001746 <VL53L7CX_SwapBuffer>
	}

	for(k = 0; k < (VL53L7CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8002622:	2300      	movs	r3, #0
 8002624:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 8002628:	e01b      	b.n	8002662 <_vl53l7cx_send_offset_data+0x2fe>
	{
		p_dev->temp_buffer[k] = p_dev->temp_buffer[k + (uint16_t)8];
 800262a:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 800262e:	f103 0208 	add.w	r2, r3, #8
 8002632:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8002636:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 800263a:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 800263e:	6809      	ldr	r1, [r1, #0]
 8002640:	440a      	add	r2, r1
 8002642:	f892 1510 	ldrb.w	r1, [r2, #1296]	@ 0x510
 8002646:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800264a:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 800264e:	6812      	ldr	r2, [r2, #0]
 8002650:	4413      	add	r3, r2
 8002652:	460a      	mov	r2, r1
 8002654:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
	for(k = 0; k < (VL53L7CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8002658:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 800265c:	3301      	adds	r3, #1
 800265e:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 8002662:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8002666:	f5b3 7ff2 	cmp.w	r3, #484	@ 0x1e4
 800266a:	d3de      	bcc.n	800262a <_vl53l7cx_send_offset_data+0x2c6>
	}

	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 800266c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002670:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f503 62de 	add.w	r2, r3, #1776	@ 0x6f0
 800267a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800267e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002682:	cb03      	ldmia	r3!, {r0, r1}
 8002684:	6010      	str	r0, [r2, #0]
 8002686:	6051      	str	r1, [r2, #4]
	status |= VL53L7CX_WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 8002688:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800268c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002690:	6818      	ldr	r0, [r3, #0]
 8002692:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002696:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 80026a0:	f44f 73f4 	mov.w	r3, #488	@ 0x1e8
 80026a4:	f642 6118 	movw	r1, #11800	@ 0x2e18
 80026a8:	f7ff f81f 	bl	80016ea <VL53L7CX_WrMulti>
 80026ac:	4603      	mov	r3, r0
 80026ae:	461a      	mov	r2, r3
 80026b0:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 80026b4:	4313      	orrs	r3, r2
 80026b6:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53L7CX_OFFSET_BUFFER_SIZE);
	status |=_vl53l7cx_poll_for_answer(p_dev, 4, 1,
 80026ba:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80026be:	f5a3 70ce 	sub.w	r0, r3, #412	@ 0x19c
 80026c2:	2303      	movs	r3, #3
 80026c4:	9301      	str	r3, [sp, #4]
 80026c6:	23ff      	movs	r3, #255	@ 0xff
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80026ce:	2201      	movs	r2, #1
 80026d0:	2104      	movs	r1, #4
 80026d2:	6800      	ldr	r0, [r0, #0]
 80026d4:	f7ff fdb5 	bl	8002242 <_vl53l7cx_poll_for_answer>
 80026d8:	4603      	mov	r3, r0
 80026da:	461a      	mov	r2, r3
 80026dc:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 80026e0:	4313      	orrs	r3, r2
 80026e2:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53L7CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 80026e6:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	f507 77d0 	add.w	r7, r7, #416	@ 0x1a0
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	080083e4 	.word	0x080083e4
 80026f8:	080083ec 	.word	0x080083ec

080026fc <_vl53l7cx_send_xtalk_data>:
 */

static uint8_t _vl53l7cx_send_xtalk_data(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				resolution)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b0ca      	sub	sp, #296	@ 0x128
 8002700:	af02      	add	r7, sp, #8
 8002702:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002706:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800270a:	6018      	str	r0, [r3, #0]
 800270c:	460a      	mov	r2, r1
 800270e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002712:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8002716:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L7CX_STATUS_OK;
 8002718:	2300      	movs	r3, #0
 800271a:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 800271e:	4a9a      	ldr	r2, [pc, #616]	@ (8002988 <_vl53l7cx_send_xtalk_data+0x28c>)
 8002720:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002724:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002728:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 800272c:	4a97      	ldr	r2, [pc, #604]	@ (800298c <_vl53l7cx_send_xtalk_data+0x290>)
 800272e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002732:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002736:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 800273a:	4b95      	ldr	r3, [pc, #596]	@ (8002990 <_vl53l7cx_send_xtalk_data+0x294>)
 800273c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 8002740:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002744:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f503 60a2 	add.w	r0, r3, #1296	@ 0x510
 800274e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002752:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800275c:	f44f 7242 	mov.w	r2, #776	@ 0x308
 8002760:	4619      	mov	r1, r3
 8002762:	f004 ffd8 	bl	8007716 <memcpy>
		VL53L7CX_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53L7CX_RESOLUTION_4X4)
 8002766:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800276a:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b10      	cmp	r3, #16
 8002772:	f040 80d2 	bne.w	800291a <_vl53l7cx_send_xtalk_data+0x21e>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 8002776:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800277a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f503 63a3 	add.w	r3, r3, #1304	@ 0x518
 8002784:	461a      	mov	r2, r3
 8002786:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800278a:	cb03      	ldmia	r3!, {r0, r1}
 800278c:	6010      	str	r0, [r2, #0]
 800278e:	6051      	str	r1, [r2, #4]
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 8002790:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002794:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f503 63a6 	add.w	r3, r3, #1328	@ 0x530
 800279e:	461a      	mov	r2, r3
 80027a0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80027a4:	cb03      	ldmia	r3!, {r0, r1}
 80027a6:	6010      	str	r0, [r2, #0]
 80027a8:	6051      	str	r1, [r2, #4]
			dss_4x4, sizeof(dss_4x4));

		VL53L7CX_SwapBuffer(p_dev->temp_buffer, VL53L7CX_XTALK_BUFFER_SIZE);
 80027aa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80027ae:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 80027b8:	f44f 7142 	mov.w	r1, #776	@ 0x308
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fe ffc2 	bl	8001746 <VL53L7CX_SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 80027c2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80027c6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f203 5144 	addw	r1, r3, #1348	@ 0x544
 80027d0:	f107 0308 	add.w	r3, r7, #8
 80027d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027d8:	4618      	mov	r0, r3
 80027da:	f004 ff9c 	bl	8007716 <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 80027de:	2300      	movs	r3, #0
 80027e0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80027e4:	e05d      	b.n	80028a2 <_vl53l7cx_send_xtalk_data+0x1a6>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 80027e6:	2300      	movs	r3, #0
 80027e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 80027ec:	e04e      	b.n	800288c <_vl53l7cx_send_xtalk_data+0x190>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 80027ee:	f997 211f 	ldrsb.w	r2, [r7, #287]	@ 0x11f
 80027f2:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	4413      	add	r3, r2
 80027fa:	005a      	lsls	r2, r3, #1
 80027fc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002800:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002804:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+1]
 8002808:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 800280c:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	440b      	add	r3, r1
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	1c59      	adds	r1, r3, #1
 8002818:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800281c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002820:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002824:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 8002826:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 800282a:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	440b      	add	r3, r1
 8002832:	3304      	adds	r3, #4
 8002834:	0059      	lsls	r1, r3, #1
 8002836:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800283a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800283e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002842:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8002844:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8002848:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	440b      	add	r3, r1
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	f103 0109 	add.w	r1, r3, #9
 8002856:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800285a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800285e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002862:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 8002864:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8002868:	f997 211e 	ldrsb.w	r2, [r7, #286]	@ 0x11e
 800286c:	0092      	lsls	r2, r2, #2
 800286e:	440a      	add	r2, r1
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8002870:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8002872:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002876:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800287a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0; i < (int8_t)4 ; i++)
 800287e:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8002882:	b2db      	uxtb	r3, r3
 8002884:	3301      	adds	r3, #1
 8002886:	b2db      	uxtb	r3, r3
 8002888:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 800288c:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8002890:	2b03      	cmp	r3, #3
 8002892:	ddac      	ble.n	80027ee <_vl53l7cx_send_xtalk_data+0xf2>
		for (j = 0; j < (int8_t)4; j++)
 8002894:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8002898:	b2db      	uxtb	r3, r3
 800289a:	3301      	adds	r3, #1
 800289c:	b2db      	uxtb	r3, r3
 800289e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80028a2:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 80028a6:	2b03      	cmp	r3, #3
 80028a8:	dd9d      	ble.n	80027e6 <_vl53l7cx_send_xtalk_data+0xea>
			}
		}
	    (void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 80028aa:	f107 0308 	add.w	r3, r7, #8
 80028ae:	3340      	adds	r3, #64	@ 0x40
 80028b0:	22c0      	movs	r2, #192	@ 0xc0
 80028b2:	2100      	movs	r1, #0
 80028b4:	4618      	mov	r0, r3
 80028b6:	f004 feb3 	bl	8007620 <memset>
	    (void)memcpy(&(p_dev->temp_buffer[0x34]),
 80028ba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80028be:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f203 5344 	addw	r3, r3, #1348	@ 0x544
 80028c8:	f107 0108 	add.w	r1, r7, #8
 80028cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028d0:	4618      	mov	r0, r3
 80028d2:	f004 ff20 	bl	8007716 <memcpy>
                  signal_grid, sizeof(signal_grid));
	    VL53L7CX_SwapBuffer(p_dev->temp_buffer, VL53L7CX_XTALK_BUFFER_SIZE);
 80028d6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80028da:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 80028e4:	f44f 7142 	mov.w	r1, #776	@ 0x308
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7fe ff2c 	bl	8001746 <VL53L7CX_SwapBuffer>
	    (void)memcpy(&(p_dev->temp_buffer[0x134]),
 80028ee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80028f2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f203 6344 	addw	r3, r3, #1604	@ 0x644
 80028fc:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8002900:	601a      	str	r2, [r3, #0]
	    profile_4x4, sizeof(profile_4x4));
	    (void)memset(&(p_dev->temp_buffer[0x078]),0 ,
 8002902:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002906:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f503 63b1 	add.w	r3, r3, #1416	@ 0x588
 8002910:	2204      	movs	r2, #4
 8002912:	2100      	movs	r1, #0
 8002914:	4618      	mov	r0, r3
 8002916:	f004 fe83 	bl	8007620 <memset>
                         (uint32_t)4*sizeof(uint8_t));
	}

	status |= VL53L7CX_WrMulti(&(p_dev->platform), 0x2cf8,
 800291a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800291e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002922:	6818      	ldr	r0, [r3, #0]
			p_dev->temp_buffer, VL53L7CX_XTALK_BUFFER_SIZE);
 8002924:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002928:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
	status |= VL53L7CX_WrMulti(&(p_dev->platform), 0x2cf8,
 8002932:	f44f 7342 	mov.w	r3, #776	@ 0x308
 8002936:	f642 41f8 	movw	r1, #11512	@ 0x2cf8
 800293a:	f7fe fed6 	bl	80016ea <VL53L7CX_WrMulti>
 800293e:	4603      	mov	r3, r0
 8002940:	461a      	mov	r2, r3
 8002942:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8002946:	4313      	orrs	r3, r2
 8002948:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	status |=_vl53l7cx_poll_for_answer(p_dev, 4, 1,
 800294c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002950:	f5a3 708e 	sub.w	r0, r3, #284	@ 0x11c
 8002954:	2303      	movs	r3, #3
 8002956:	9301      	str	r3, [sp, #4]
 8002958:	23ff      	movs	r3, #255	@ 0xff
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8002960:	2201      	movs	r2, #1
 8002962:	2104      	movs	r1, #4
 8002964:	6800      	ldr	r0, [r0, #0]
 8002966:	f7ff fc6c 	bl	8002242 <_vl53l7cx_poll_for_answer>
 800296a:	4603      	mov	r3, r0
 800296c:	461a      	mov	r2, r3
 800296e:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8002972:	4313      	orrs	r3, r2
 8002974:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
			VL53L7CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8002978:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
}
 800297c:	4618      	mov	r0, r3
 800297e:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	080083f4 	.word	0x080083f4
 800298c:	080083fc 	.word	0x080083fc
 8002990:	0001fca0 	.word	0x0001fca0

08002994 <vl53l7cx_init>:
	return status;
}

uint8_t vl53l7cx_init(
		VL53L7CX_Configuration		*p_dev)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08a      	sub	sp, #40	@ 0x28
 8002998:	af04      	add	r7, sp, #16
 800299a:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53L7CX_STATUS_OK;
 800299c:	2300      	movs	r3, #0
 800299e:	75fb      	strb	r3, [r7, #23]
	uint8_t pipe_ctrl[] = {VL53L7CX_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 80029a0:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80029a4:	613b      	str	r3, [r7, #16]
	uint32_t single_range = 0x01;
 80029a6:	2301      	movs	r3, #1
 80029a8:	60fb      	str	r3, [r7, #12]

	p_dev->default_xtalk = (uint8_t*)VL53L7CX_DEFAULT_XTALK;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a80      	ldr	r2, [pc, #512]	@ (8002bb0 <vl53l7cx_init+0x21c>)
 80029ae:	61da      	str	r2, [r3, #28]
	p_dev->default_configuration = (uint8_t*)VL53L7CX_DEFAULT_CONFIGURATION;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a80      	ldr	r2, [pc, #512]	@ (8002bb4 <vl53l7cx_init+0x220>)
 80029b4:	619a      	str	r2, [r3, #24]
	p_dev->is_auto_stop_enabled = (uint8_t)0x0;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2abc 	strb.w	r2, [r3, #2748]	@ 0xabc

	/* SW reboot sequence */
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fe fe79 	bl	80016be <VL53L7CX_WrByte>
 80029cc:	4603      	mov	r3, r0
 80029ce:	461a      	mov	r2, r3
 80029d0:	7dfb      	ldrb	r3, [r7, #23]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x0009, 0x04);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2204      	movs	r2, #4
 80029da:	2109      	movs	r1, #9
 80029dc:	4618      	mov	r0, r3
 80029de:	f7fe fe6e 	bl	80016be <VL53L7CX_WrByte>
 80029e2:	4603      	mov	r3, r0
 80029e4:	461a      	mov	r2, r3
 80029e6:	7dfb      	ldrb	r3, [r7, #23]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x000F, 0x40);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2240      	movs	r2, #64	@ 0x40
 80029f0:	210f      	movs	r1, #15
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fe fe63 	bl	80016be <VL53L7CX_WrByte>
 80029f8:	4603      	mov	r3, r0
 80029fa:	461a      	mov	r2, r3
 80029fc:	7dfb      	ldrb	r3, [r7, #23]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x000A, 0x03);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2203      	movs	r2, #3
 8002a06:	210a      	movs	r1, #10
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7fe fe58 	bl	80016be <VL53L7CX_WrByte>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	461a      	mov	r2, r3
 8002a12:	7dfb      	ldrb	r3, [r7, #23]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f107 0216 	add.w	r2, r7, #22
 8002a1e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fe fe36 	bl	8001694 <VL53L7CX_RdByte>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	7dfb      	ldrb	r3, [r7, #23]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x000C, 0x01);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	210c      	movs	r1, #12
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7fe fe40 	bl	80016be <VL53L7CX_WrByte>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	461a      	mov	r2, r3
 8002a42:	7dfb      	ldrb	r3, [r7, #23]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	75fb      	strb	r3, [r7, #23]

	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x0101, 0x00);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f240 1101 	movw	r1, #257	@ 0x101
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7fe fe34 	bl	80016be <VL53L7CX_WrByte>
 8002a56:	4603      	mov	r3, r0
 8002a58:	461a      	mov	r2, r3
 8002a5a:	7dfb      	ldrb	r3, [r7, #23]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x0102, 0x00);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7fe fe28 	bl	80016be <VL53L7CX_WrByte>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	461a      	mov	r2, r3
 8002a72:	7dfb      	ldrb	r3, [r7, #23]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x010A, 0x01);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7fe fe1c 	bl	80016be <VL53L7CX_WrByte>
 8002a86:	4603      	mov	r3, r0
 8002a88:	461a      	mov	r2, r3
 8002a8a:	7dfb      	ldrb	r3, [r7, #23]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x4002, 0x01);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f244 0102 	movw	r1, #16386	@ 0x4002
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7fe fe10 	bl	80016be <VL53L7CX_WrByte>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	7dfb      	ldrb	r3, [r7, #23]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x4002, 0x00);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f244 0102 	movw	r1, #16386	@ 0x4002
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fe fe04 	bl	80016be <VL53L7CX_WrByte>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	461a      	mov	r2, r3
 8002aba:	7dfb      	ldrb	r3, [r7, #23]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x010A, 0x03);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2203      	movs	r2, #3
 8002ac4:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7fe fdf8 	bl	80016be <VL53L7CX_WrByte>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	7dfb      	ldrb	r3, [r7, #23]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x0103, 0x01);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f240 1103 	movw	r1, #259	@ 0x103
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7fe fdec 	bl	80016be <VL53L7CX_WrByte>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	461a      	mov	r2, r3
 8002aea:	7dfb      	ldrb	r3, [r7, #23]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x000C, 0x00);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	210c      	movs	r1, #12
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fe fde1 	bl	80016be <VL53L7CX_WrByte>
 8002afc:	4603      	mov	r3, r0
 8002afe:	461a      	mov	r2, r3
 8002b00:	7dfb      	ldrb	r3, [r7, #23]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x000F, 0x43);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2243      	movs	r2, #67	@ 0x43
 8002b0a:	210f      	movs	r1, #15
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7fe fdd6 	bl	80016be <VL53L7CX_WrByte>
 8002b12:	4603      	mov	r3, r0
 8002b14:	461a      	mov	r2, r3
 8002b16:	7dfb      	ldrb	r3, [r7, #23]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WaitMs(&(p_dev->platform), 1);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2101      	movs	r1, #1
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fe fe46 	bl	80017b2 <VL53L7CX_WaitMs>
 8002b26:	4603      	mov	r3, r0
 8002b28:	461a      	mov	r2, r3
 8002b2a:	7dfb      	ldrb	r3, [r7, #23]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	75fb      	strb	r3, [r7, #23]

	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x000F, 0x40);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2240      	movs	r2, #64	@ 0x40
 8002b34:	210f      	movs	r1, #15
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fe fdc1 	bl	80016be <VL53L7CX_WrByte>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	461a      	mov	r2, r3
 8002b40:	7dfb      	ldrb	r3, [r7, #23]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x000A, 0x01);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	210a      	movs	r1, #10
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7fe fdb6 	bl	80016be <VL53L7CX_WrByte>
 8002b52:	4603      	mov	r3, r0
 8002b54:	461a      	mov	r2, r3
 8002b56:	7dfb      	ldrb	r3, [r7, #23]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WaitMs(&(p_dev->platform), 100);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2164      	movs	r1, #100	@ 0x64
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7fe fe26 	bl	80017b2 <VL53L7CX_WaitMs>
 8002b66:	4603      	mov	r3, r0
 8002b68:	461a      	mov	r2, r3
 8002b6a:	7dfb      	ldrb	r3, [r7, #23]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	75fb      	strb	r3, [r7, #23]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7fe fda0 	bl	80016be <VL53L7CX_WrByte>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	461a      	mov	r2, r3
 8002b82:	7dfb      	ldrb	r3, [r7, #23]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l7cx_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 8002b88:	2301      	movs	r3, #1
 8002b8a:	9301      	str	r3, [sp, #4]
 8002b8c:	23ff      	movs	r3, #255	@ 0xff
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	2306      	movs	r3, #6
 8002b92:	2200      	movs	r2, #0
 8002b94:	2101      	movs	r1, #1
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7ff fb53 	bl	8002242 <_vl53l7cx_poll_for_answer>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	7dfb      	ldrb	r3, [r7, #23]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8002ba6:	7dfb      	ldrb	r3, [r7, #23]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f040 8354 	bne.w	8003256 <vl53l7cx_init+0x8c2>
 8002bae:	e003      	b.n	8002bb8 <vl53l7cx_init+0x224>
 8002bb0:	0801d824 	.word	0x0801d824
 8002bb4:	0801d458 	.word	0x0801d458
		goto exit;
	}

	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x000E, 0x01);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	210e      	movs	r1, #14
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe fd7d 	bl	80016be <VL53L7CX_WrByte>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	7dfb      	ldrb	r3, [r7, #23]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fe fd71 	bl	80016be <VL53L7CX_WrByte>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	461a      	mov	r2, r3
 8002be0:	7dfb      	ldrb	r3, [r7, #23]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	75fb      	strb	r3, [r7, #23]

	/* Enable FW access */
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x03, 0x0D);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	220d      	movs	r2, #13
 8002bea:	2103      	movs	r1, #3
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7fe fd66 	bl	80016be <VL53L7CX_WrByte>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	7dfb      	ldrb	r3, [r7, #23]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7fe fd5a 	bl	80016be <VL53L7CX_WrByte>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	7dfb      	ldrb	r3, [r7, #23]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l7cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8002c14:	2310      	movs	r3, #16
 8002c16:	9301      	str	r3, [sp, #4]
 8002c18:	2310      	movs	r3, #16
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	2321      	movs	r3, #33	@ 0x21
 8002c1e:	2200      	movs	r2, #0
 8002c20:	2101      	movs	r1, #1
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7ff fb0d 	bl	8002242 <_vl53l7cx_poll_for_answer>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	7dfb      	ldrb	r3, [r7, #23]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7fe fd3f 	bl	80016be <VL53L7CX_WrByte>
 8002c40:	4603      	mov	r3, r0
 8002c42:	461a      	mov	r2, r3
 8002c44:	7dfb      	ldrb	r3, [r7, #23]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	75fb      	strb	r3, [r7, #23]

	/* Enable host access to GO1 */
	status |= VL53L7CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f107 0216 	add.w	r2, r7, #22
 8002c50:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7fe fd1d 	bl	8001694 <VL53L7CX_RdByte>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	7dfb      	ldrb	r3, [r7, #23]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x0C, 0x01);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	210c      	movs	r1, #12
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fe fd27 	bl	80016be <VL53L7CX_WrByte>
 8002c70:	4603      	mov	r3, r0
 8002c72:	461a      	mov	r2, r3
 8002c74:	7dfb      	ldrb	r3, [r7, #23]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	75fb      	strb	r3, [r7, #23]

	/* Power ON status */
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7fe fd1b 	bl	80016be <VL53L7CX_WrByte>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	7dfb      	ldrb	r3, [r7, #23]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x101, 0x00);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f240 1101 	movw	r1, #257	@ 0x101
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fe fd0f 	bl	80016be <VL53L7CX_WrByte>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	7dfb      	ldrb	r3, [r7, #23]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x102, 0x00);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fe fd03 	bl	80016be <VL53L7CX_WrByte>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	461a      	mov	r2, r3
 8002cbc:	7dfb      	ldrb	r3, [r7, #23]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x010A, 0x01);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fe fcf7 	bl	80016be <VL53L7CX_WrByte>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	7dfb      	ldrb	r3, [r7, #23]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x4002, 0x01);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f244 0102 	movw	r1, #16386	@ 0x4002
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7fe fceb 	bl	80016be <VL53L7CX_WrByte>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	461a      	mov	r2, r3
 8002cec:	7dfb      	ldrb	r3, [r7, #23]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x4002, 0x00);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f244 0102 	movw	r1, #16386	@ 0x4002
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fe fcdf 	bl	80016be <VL53L7CX_WrByte>
 8002d00:	4603      	mov	r3, r0
 8002d02:	461a      	mov	r2, r3
 8002d04:	7dfb      	ldrb	r3, [r7, #23]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x010A, 0x03);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2203      	movs	r2, #3
 8002d0e:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fe fcd3 	bl	80016be <VL53L7CX_WrByte>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	7dfb      	ldrb	r3, [r7, #23]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x103, 0x01);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f240 1103 	movw	r1, #259	@ 0x103
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7fe fcc7 	bl	80016be <VL53L7CX_WrByte>
 8002d30:	4603      	mov	r3, r0
 8002d32:	461a      	mov	r2, r3
 8002d34:	7dfb      	ldrb	r3, [r7, #23]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x400F, 0x00);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f244 010f 	movw	r1, #16399	@ 0x400f
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fe fcbb 	bl	80016be <VL53L7CX_WrByte>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	7dfb      	ldrb	r3, [r7, #23]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x21A, 0x43);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2243      	movs	r2, #67	@ 0x43
 8002d56:	f240 211a 	movw	r1, #538	@ 0x21a
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fe fcaf 	bl	80016be <VL53L7CX_WrByte>
 8002d60:	4603      	mov	r3, r0
 8002d62:	461a      	mov	r2, r3
 8002d64:	7dfb      	ldrb	r3, [r7, #23]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x21A, 0x03);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2203      	movs	r2, #3
 8002d6e:	f240 211a 	movw	r1, #538	@ 0x21a
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fe fca3 	bl	80016be <VL53L7CX_WrByte>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	7dfb      	ldrb	r3, [r7, #23]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x21A, 0x01);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f240 211a 	movw	r1, #538	@ 0x21a
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7fe fc97 	bl	80016be <VL53L7CX_WrByte>
 8002d90:	4603      	mov	r3, r0
 8002d92:	461a      	mov	r2, r3
 8002d94:	7dfb      	ldrb	r3, [r7, #23]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x21A, 0x00);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f240 211a 	movw	r1, #538	@ 0x21a
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fe fc8b 	bl	80016be <VL53L7CX_WrByte>
 8002da8:	4603      	mov	r3, r0
 8002daa:	461a      	mov	r2, r3
 8002dac:	7dfb      	ldrb	r3, [r7, #23]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x219, 0x00);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f240 2119 	movw	r1, #537	@ 0x219
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fe fc7f 	bl	80016be <VL53L7CX_WrByte>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	7dfb      	ldrb	r3, [r7, #23]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x21B, 0x00);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f240 211b 	movw	r1, #539	@ 0x21b
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fe fc73 	bl	80016be <VL53L7CX_WrByte>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	461a      	mov	r2, r3
 8002ddc:	7dfb      	ldrb	r3, [r7, #23]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	75fb      	strb	r3, [r7, #23]

	/* Wake up MCU */
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe fc67 	bl	80016be <VL53L7CX_WrByte>
 8002df0:	4603      	mov	r3, r0
 8002df2:	461a      	mov	r2, r3
 8002df4:	7dfb      	ldrb	r3, [r7, #23]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f107 0216 	add.w	r2, r7, #22
 8002e00:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fe fc45 	bl	8001694 <VL53L7CX_RdByte>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	7dfb      	ldrb	r3, [r7, #23]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x0C, 0x00);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	210c      	movs	r1, #12
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fe fc4f 	bl	80016be <VL53L7CX_WrByte>
 8002e20:	4603      	mov	r3, r0
 8002e22:	461a      	mov	r2, r3
 8002e24:	7dfb      	ldrb	r3, [r7, #23]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fe fc43 	bl	80016be <VL53L7CX_WrByte>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	7dfb      	ldrb	r3, [r7, #23]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x20, 0x07);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2207      	movs	r2, #7
 8002e46:	2120      	movs	r1, #32
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7fe fc38 	bl	80016be <VL53L7CX_WrByte>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	461a      	mov	r2, r3
 8002e52:	7dfb      	ldrb	r3, [r7, #23]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x20, 0x06);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2206      	movs	r2, #6
 8002e5c:	2120      	movs	r1, #32
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7fe fc2d 	bl	80016be <VL53L7CX_WrByte>
 8002e64:	4603      	mov	r3, r0
 8002e66:	461a      	mov	r2, r3
 8002e68:	7dfb      	ldrb	r3, [r7, #23]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	75fb      	strb	r3, [r7, #23]

	/* Download FW into VL53L7CX */
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x09);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2209      	movs	r2, #9
 8002e72:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7fe fc21 	bl	80016be <VL53L7CX_WrByte>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	461a      	mov	r2, r3
 8002e80:	7dfb      	ldrb	r3, [r7, #23]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrMulti(&(p_dev->platform),0,
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e8c:	4ae1      	ldr	r2, [pc, #900]	@ (8003214 <vl53l7cx_init+0x880>)
 8002e8e:	2100      	movs	r1, #0
 8002e90:	f7fe fc2b 	bl	80016ea <VL53L7CX_WrMulti>
 8002e94:	4603      	mov	r3, r0
 8002e96:	461a      	mov	r2, r3
 8002e98:	7dfb      	ldrb	r3, [r7, #23]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L7CX_FIRMWARE[0],0x8000);
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	220a      	movs	r2, #10
 8002ea2:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fe fc09 	bl	80016be <VL53L7CX_WrByte>
 8002eac:	4603      	mov	r3, r0
 8002eae:	461a      	mov	r2, r3
 8002eb0:	7dfb      	ldrb	r3, [r7, #23]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrMulti(&(p_dev->platform),0,
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ebc:	4ad6      	ldr	r2, [pc, #856]	@ (8003218 <vl53l7cx_init+0x884>)
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	f7fe fc13 	bl	80016ea <VL53L7CX_WrMulti>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	7dfb      	ldrb	r3, [r7, #23]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L7CX_FIRMWARE[0x8000],0x8000);
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	220b      	movs	r2, #11
 8002ed2:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fe fbf1 	bl	80016be <VL53L7CX_WrByte>
 8002edc:	4603      	mov	r3, r0
 8002ede:	461a      	mov	r2, r3
 8002ee0:	7dfb      	ldrb	r3, [r7, #23]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrMulti(&(p_dev->platform),0,
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8002eec:	4acb      	ldr	r2, [pc, #812]	@ (800321c <vl53l7cx_init+0x888>)
 8002eee:	2100      	movs	r1, #0
 8002ef0:	f7fe fbfb 	bl	80016ea <VL53L7CX_WrMulti>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	7dfb      	ldrb	r3, [r7, #23]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L7CX_FIRMWARE[0x10000],0x5000);
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fe fbd9 	bl	80016be <VL53L7CX_WrByte>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	461a      	mov	r2, r3
 8002f10:	7dfb      	ldrb	r3, [r7, #23]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	75fb      	strb	r3, [r7, #23]

	/* Check if FW correctly downloaded */
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2202      	movs	r2, #2
 8002f1a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fe fbcd 	bl	80016be <VL53L7CX_WrByte>
 8002f24:	4603      	mov	r3, r0
 8002f26:	461a      	mov	r2, r3
 8002f28:	7dfb      	ldrb	r3, [r7, #23]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x03, 0x0D);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	220d      	movs	r2, #13
 8002f32:	2103      	movs	r1, #3
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fe fbc2 	bl	80016be <VL53L7CX_WrByte>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	7dfb      	ldrb	r3, [r7, #23]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7fe fbb6 	bl	80016be <VL53L7CX_WrByte>
 8002f52:	4603      	mov	r3, r0
 8002f54:	461a      	mov	r2, r3
 8002f56:	7dfb      	ldrb	r3, [r7, #23]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l7cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8002f5c:	2310      	movs	r3, #16
 8002f5e:	9301      	str	r3, [sp, #4]
 8002f60:	2310      	movs	r3, #16
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	2321      	movs	r3, #33	@ 0x21
 8002f66:	2200      	movs	r2, #0
 8002f68:	2101      	movs	r1, #1
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7ff f969 	bl	8002242 <_vl53l7cx_poll_for_answer>
 8002f70:	4603      	mov	r3, r0
 8002f72:	461a      	mov	r2, r3
 8002f74:	7dfb      	ldrb	r3, [r7, #23]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8002f7a:	7dfb      	ldrb	r3, [r7, #23]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f040 816c 	bne.w	800325a <vl53l7cx_init+0x8c6>
		goto exit;
	}

	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fe fb97 	bl	80016be <VL53L7CX_WrByte>
 8002f90:	4603      	mov	r3, r0
 8002f92:	461a      	mov	r2, r3
 8002f94:	7dfb      	ldrb	r3, [r7, #23]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f107 0216 	add.w	r2, r7, #22
 8002fa0:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7fe fb75 	bl	8001694 <VL53L7CX_RdByte>
 8002faa:	4603      	mov	r3, r0
 8002fac:	461a      	mov	r2, r3
 8002fae:	7dfb      	ldrb	r3, [r7, #23]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x0C, 0x01);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	210c      	movs	r1, #12
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fe fb7f 	bl	80016be <VL53L7CX_WrByte>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	7dfb      	ldrb	r3, [r7, #23]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	75fb      	strb	r3, [r7, #23]

	/* Reset MCU and wait boot */
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fe fb73 	bl	80016be <VL53L7CX_WrByte>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	461a      	mov	r2, r3
 8002fdc:	7dfb      	ldrb	r3, [r7, #23]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x114, 0x00);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fe fb67 	bl	80016be <VL53L7CX_WrByte>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	7dfb      	ldrb	r3, [r7, #23]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x115, 0x00);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f240 1115 	movw	r1, #277	@ 0x115
 8003002:	4618      	mov	r0, r3
 8003004:	f7fe fb5b 	bl	80016be <VL53L7CX_WrByte>
 8003008:	4603      	mov	r3, r0
 800300a:	461a      	mov	r2, r3
 800300c:	7dfb      	ldrb	r3, [r7, #23]
 800300e:	4313      	orrs	r3, r2
 8003010:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x116, 0x42);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2242      	movs	r2, #66	@ 0x42
 8003016:	f44f 718b 	mov.w	r1, #278	@ 0x116
 800301a:	4618      	mov	r0, r3
 800301c:	f7fe fb4f 	bl	80016be <VL53L7CX_WrByte>
 8003020:	4603      	mov	r3, r0
 8003022:	461a      	mov	r2, r3
 8003024:	7dfb      	ldrb	r3, [r7, #23]
 8003026:	4313      	orrs	r3, r2
 8003028:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x117, 0x00);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f240 1117 	movw	r1, #279	@ 0x117
 8003032:	4618      	mov	r0, r3
 8003034:	f7fe fb43 	bl	80016be <VL53L7CX_WrByte>
 8003038:	4603      	mov	r3, r0
 800303a:	461a      	mov	r2, r3
 800303c:	7dfb      	ldrb	r3, [r7, #23]
 800303e:	4313      	orrs	r3, r2
 8003040:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x0B, 0x00);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	210b      	movs	r1, #11
 8003048:	4618      	mov	r0, r3
 800304a:	f7fe fb38 	bl	80016be <VL53L7CX_WrByte>
 800304e:	4603      	mov	r3, r0
 8003050:	461a      	mov	r2, r3
 8003052:	7dfb      	ldrb	r3, [r7, #23]
 8003054:	4313      	orrs	r3, r2
 8003056:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f107 0216 	add.w	r2, r7, #22
 800305e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003062:	4618      	mov	r0, r3
 8003064:	f7fe fb16 	bl	8001694 <VL53L7CX_RdByte>
 8003068:	4603      	mov	r3, r0
 800306a:	461a      	mov	r2, r3
 800306c:	7dfb      	ldrb	r3, [r7, #23]
 800306e:	4313      	orrs	r3, r2
 8003070:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x0C, 0x00);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	210c      	movs	r1, #12
 8003078:	4618      	mov	r0, r3
 800307a:	f7fe fb20 	bl	80016be <VL53L7CX_WrByte>
 800307e:	4603      	mov	r3, r0
 8003080:	461a      	mov	r2, r3
 8003082:	7dfb      	ldrb	r3, [r7, #23]
 8003084:	4313      	orrs	r3, r2
 8003086:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x0B, 0x01);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	210b      	movs	r1, #11
 800308e:	4618      	mov	r0, r3
 8003090:	f7fe fb15 	bl	80016be <VL53L7CX_WrByte>
 8003094:	4603      	mov	r3, r0
 8003096:	461a      	mov	r2, r3
 8003098:	7dfb      	ldrb	r3, [r7, #23]
 800309a:	4313      	orrs	r3, r2
 800309c:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l7cx_poll_for_mcu_boot(p_dev);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7ff f91f 	bl	80022e2 <_vl53l7cx_poll_for_mcu_boot>
 80030a4:	4603      	mov	r3, r0
 80030a6:	461a      	mov	r2, r3
 80030a8:	7dfb      	ldrb	r3, [r7, #23]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 80030ae:	7dfb      	ldrb	r3, [r7, #23]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f040 80d4 	bne.w	800325e <vl53l7cx_init+0x8ca>
		goto exit;
	}

	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2202      	movs	r2, #2
 80030ba:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80030be:	4618      	mov	r0, r3
 80030c0:	f7fe fafd 	bl	80016be <VL53L7CX_WrByte>
 80030c4:	4603      	mov	r3, r0
 80030c6:	461a      	mov	r2, r3
 80030c8:	7dfb      	ldrb	r3, [r7, #23]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	75fb      	strb	r3, [r7, #23]

	/* Get offset NVM data and store them into the offset buffer */
	status |= VL53L7CX_WrMulti(&(p_dev->platform), 0x2fd8,
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	2328      	movs	r3, #40	@ 0x28
 80030d2:	4a53      	ldr	r2, [pc, #332]	@ (8003220 <vl53l7cx_init+0x88c>)
 80030d4:	f642 71d8 	movw	r1, #12248	@ 0x2fd8
 80030d8:	f7fe fb07 	bl	80016ea <VL53L7CX_WrMulti>
 80030dc:	4603      	mov	r3, r0
 80030de:	461a      	mov	r2, r3
 80030e0:	7dfb      	ldrb	r3, [r7, #23]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)VL53L7CX_GET_NVM_CMD, sizeof(VL53L7CX_GET_NVM_CMD));
	status |= _vl53l7cx_poll_for_answer(p_dev, 4, 0,
 80030e6:	2302      	movs	r3, #2
 80030e8:	9301      	str	r3, [sp, #4]
 80030ea:	23ff      	movs	r3, #255	@ 0xff
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80030f2:	2200      	movs	r2, #0
 80030f4:	2104      	movs	r1, #4
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7ff f8a3 	bl	8002242 <_vl53l7cx_poll_for_answer>
 80030fc:	4603      	mov	r3, r0
 80030fe:	461a      	mov	r2, r3
 8003100:	7dfb      	ldrb	r3, [r7, #23]
 8003102:	4313      	orrs	r3, r2
 8003104:	75fb      	strb	r3, [r7, #23]
		VL53L7CX_UI_CMD_STATUS, 0xff, 2);
	status |= VL53L7CX_RdMulti(&(p_dev->platform), VL53L7CX_UI_CMD_START,
 8003106:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53L7CX_NVM_DATA_SIZE);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
	status |= VL53L7CX_RdMulti(&(p_dev->platform), VL53L7CX_UI_CMD_START,
 800310e:	f44f 73f6 	mov.w	r3, #492	@ 0x1ec
 8003112:	f642 4104 	movw	r1, #11268	@ 0x2c04
 8003116:	f7fe faff 	bl	8001718 <VL53L7CX_RdMulti>
 800311a:	4603      	mov	r3, r0
 800311c:	461a      	mov	r2, r3
 800311e:	7dfb      	ldrb	r3, [r7, #23]
 8003120:	4313      	orrs	r3, r2
 8003122:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f103 0020 	add.w	r0, r3, #32
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003130:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8003134:	4619      	mov	r1, r3
 8003136:	f004 faee 	bl	8007716 <memcpy>
		VL53L7CX_OFFSET_BUFFER_SIZE);
	status |= _vl53l7cx_send_offset_data(p_dev, VL53L7CX_RESOLUTION_4X4);
 800313a:	2110      	movs	r1, #16
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f7ff f911 	bl	8002364 <_vl53l7cx_send_offset_data>
 8003142:	4603      	mov	r3, r0
 8003144:	461a      	mov	r2, r3
 8003146:	7dfb      	ldrb	r3, [r7, #23]
 8003148:	4313      	orrs	r3, r2
 800314a:	75fb      	strb	r3, [r7, #23]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53L7CX_DEFAULT_XTALK,
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003152:	4a34      	ldr	r2, [pc, #208]	@ (8003224 <vl53l7cx_init+0x890>)
 8003154:	4618      	mov	r0, r3
 8003156:	4611      	mov	r1, r2
 8003158:	f44f 7342 	mov.w	r3, #776	@ 0x308
 800315c:	461a      	mov	r2, r3
 800315e:	f004 fada 	bl	8007716 <memcpy>
		VL53L7CX_XTALK_BUFFER_SIZE);
	status |= _vl53l7cx_send_xtalk_data(p_dev, VL53L7CX_RESOLUTION_4X4);
 8003162:	2110      	movs	r1, #16
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f7ff fac9 	bl	80026fc <_vl53l7cx_send_xtalk_data>
 800316a:	4603      	mov	r3, r0
 800316c:	461a      	mov	r2, r3
 800316e:	7dfb      	ldrb	r3, [r7, #23]
 8003170:	4313      	orrs	r3, r2
 8003172:	75fb      	strb	r3, [r7, #23]

	/* Send default configuration to VL53L7CX firmware */
	status |= VL53L7CX_WrMulti(&(p_dev->platform), 0x2c34,
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699a      	ldr	r2, [r3, #24]
 800317a:	f44f 7373 	mov.w	r3, #972	@ 0x3cc
 800317e:	f642 4134 	movw	r1, #11316	@ 0x2c34
 8003182:	f7fe fab2 	bl	80016ea <VL53L7CX_WrMulti>
 8003186:	4603      	mov	r3, r0
 8003188:	461a      	mov	r2, r3
 800318a:	7dfb      	ldrb	r3, [r7, #23]
 800318c:	4313      	orrs	r3, r2
 800318e:	75fb      	strb	r3, [r7, #23]
		p_dev->default_configuration,
		sizeof(VL53L7CX_DEFAULT_CONFIGURATION));
	status |= _vl53l7cx_poll_for_answer(p_dev, 4, 1,
 8003190:	2303      	movs	r3, #3
 8003192:	9301      	str	r3, [sp, #4]
 8003194:	23ff      	movs	r3, #255	@ 0xff
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 800319c:	2201      	movs	r2, #1
 800319e:	2104      	movs	r1, #4
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f7ff f84e 	bl	8002242 <_vl53l7cx_poll_for_answer>
 80031a6:	4603      	mov	r3, r0
 80031a8:	461a      	mov	r2, r3
 80031aa:	7dfb      	ldrb	r3, [r7, #23]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	75fb      	strb	r3, [r7, #23]
		VL53L7CX_UI_CMD_STATUS, 0xff, 0x03);

	status |= vl53l7cx_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 80031b0:	f107 0110 	add.w	r1, r7, #16
 80031b4:	2304      	movs	r3, #4
 80031b6:	f64d 3280 	movw	r2, #56192	@ 0xdb80
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f001 f832 	bl	8004224 <vl53l7cx_dci_write_data>
 80031c0:	4603      	mov	r3, r0
 80031c2:	461a      	mov	r2, r3
 80031c4:	7dfb      	ldrb	r3, [r7, #23]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	75fb      	strb	r3, [r7, #23]
	status |= vl53l7cx_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53L7CX_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53l7cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 80031ca:	f107 010c 	add.w	r1, r7, #12
 80031ce:	2304      	movs	r3, #4
 80031d0:	f64d 1264 	movw	r2, #55652	@ 0xd964
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f001 f825 	bl	8004224 <vl53l7cx_dci_write_data>
 80031da:	4603      	mov	r3, r0
 80031dc:	461a      	mov	r2, r3
 80031de:	7dfb      	ldrb	r3, [r7, #23]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	75fb      	strb	r3, [r7, #23]
			VL53L7CX_DCI_SINGLE_RANGE,
			(uint16_t)sizeof(single_range));

	tmp = (uint8_t)1;
 80031e4:	2301      	movs	r3, #1
 80031e6:	75bb      	strb	r3, [r7, #22]
	status |= vl53l7cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 80031ee:	2326      	movs	r3, #38	@ 0x26
 80031f0:	9302      	str	r3, [sp, #8]
 80031f2:	2301      	movs	r3, #1
 80031f4:	9301      	str	r3, [sp, #4]
 80031f6:	f107 0316 	add.w	r3, r7, #22
 80031fa:	9300      	str	r3, [sp, #0]
 80031fc:	2328      	movs	r3, #40	@ 0x28
 80031fe:	f24e 1208 	movw	r2, #57608	@ 0xe108
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f001 f8ac 	bl	8004360 <vl53l7cx_dci_replace_data>
 8003208:	4603      	mov	r3, r0
 800320a:	461a      	mov	r2, r3
 800320c:	7dfb      	ldrb	r3, [r7, #23]
 800320e:	4313      	orrs	r3, r2
 8003210:	e00a      	b.n	8003228 <vl53l7cx_init+0x894>
 8003212:	bf00      	nop
 8003214:	08008458 	.word	0x08008458
 8003218:	08010458 	.word	0x08010458
 800321c:	08018458 	.word	0x08018458
 8003220:	0801db2c 	.word	0x0801db2c
 8003224:	0801d824 	.word	0x0801d824
 8003228:	75fb      	strb	r3, [r7, #23]
			VL53L7CX_GLARE_FILTER, 40, (uint8_t*)&tmp, 1, 0x26);
	status |= vl53l7cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8003230:	2325      	movs	r3, #37	@ 0x25
 8003232:	9302      	str	r3, [sp, #8]
 8003234:	2301      	movs	r3, #1
 8003236:	9301      	str	r3, [sp, #4]
 8003238:	f107 0316 	add.w	r3, r7, #22
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	2328      	movs	r3, #40	@ 0x28
 8003240:	f24e 1208 	movw	r2, #57608	@ 0xe108
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f001 f88b 	bl	8004360 <vl53l7cx_dci_replace_data>
 800324a:	4603      	mov	r3, r0
 800324c:	461a      	mov	r2, r3
 800324e:	7dfb      	ldrb	r3, [r7, #23]
 8003250:	4313      	orrs	r3, r2
 8003252:	75fb      	strb	r3, [r7, #23]
 8003254:	e004      	b.n	8003260 <vl53l7cx_init+0x8cc>
		goto exit;
 8003256:	bf00      	nop
 8003258:	e002      	b.n	8003260 <vl53l7cx_init+0x8cc>
		goto exit;
 800325a:	bf00      	nop
 800325c:	e000      	b.n	8003260 <vl53l7cx_init+0x8cc>
		goto exit;
 800325e:	bf00      	nop
			VL53L7CX_GLARE_FILTER, 40, (uint8_t*)&tmp, 1, 0x25);
exit:
	return status;
 8003260:	7dfb      	ldrb	r3, [r7, #23]
}
 8003262:	4618      	mov	r0, r3
 8003264:	3718      	adds	r7, #24
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop

0800326c <vl53l7cx_set_i2c_address>:

uint8_t vl53l7cx_set_i2c_address(
		VL53L7CX_Configuration		*p_dev,
		uint16_t		        i2c_address)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	460b      	mov	r3, r1
 8003276:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L7CX_STATUS_OK;
 8003278:	2300      	movs	r3, #0
 800327a:	73fb      	strb	r3, [r7, #15]

	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003284:	4618      	mov	r0, r3
 8003286:	f7fe fa1a 	bl	80016be <VL53L7CX_WrByte>
 800328a:	4603      	mov	r3, r0
 800328c:	461a      	mov	r2, r3
 800328e:	7bfb      	ldrb	r3, [r7, #15]
 8003290:	4313      	orrs	r3, r2
 8003292:	73fb      	strb	r3, [r7, #15]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x4, (uint8_t)(i2c_address >> 1));
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	887b      	ldrh	r3, [r7, #2]
 8003298:	085b      	lsrs	r3, r3, #1
 800329a:	b29b      	uxth	r3, r3
 800329c:	b2db      	uxtb	r3, r3
 800329e:	461a      	mov	r2, r3
 80032a0:	2104      	movs	r1, #4
 80032a2:	f7fe fa0c 	bl	80016be <VL53L7CX_WrByte>
 80032a6:	4603      	mov	r3, r0
 80032a8:	461a      	mov	r2, r3
 80032aa:	7bfb      	ldrb	r3, [r7, #15]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	73fb      	strb	r3, [r7, #15]
	p_dev->platform.address = i2c_address;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	887a      	ldrh	r2, [r7, #2]
 80032b4:	801a      	strh	r2, [r3, #0]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2202      	movs	r2, #2
 80032ba:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fe f9fd 	bl	80016be <VL53L7CX_WrByte>
 80032c4:	4603      	mov	r3, r0
 80032c6:	461a      	mov	r2, r3
 80032c8:	7bfb      	ldrb	r3, [r7, #15]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	73fb      	strb	r3, [r7, #15]

	return status;
 80032ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <vl53l7cx_get_power_mode>:

uint8_t vl53l7cx_get_power_mode(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				*p_power_mode)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
	uint8_t tmp, status = VL53L7CX_STATUS_OK;
 80032e2:	2300      	movs	r3, #0
 80032e4:	73fb      	strb	r3, [r7, #15]

	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7fe f9e5 	bl	80016be <VL53L7CX_WrByte>
 80032f4:	4603      	mov	r3, r0
 80032f6:	461a      	mov	r2, r3
 80032f8:	7bfb      	ldrb	r3, [r7, #15]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	73fb      	strb	r3, [r7, #15]
	status |= VL53L7CX_RdByte(&(p_dev->platform), 0x009, &tmp);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f107 020e 	add.w	r2, r7, #14
 8003304:	2109      	movs	r1, #9
 8003306:	4618      	mov	r0, r3
 8003308:	f7fe f9c4 	bl	8001694 <VL53L7CX_RdByte>
 800330c:	4603      	mov	r3, r0
 800330e:	461a      	mov	r2, r3
 8003310:	7bfb      	ldrb	r3, [r7, #15]
 8003312:	4313      	orrs	r3, r2
 8003314:	73fb      	strb	r3, [r7, #15]

	switch(tmp)
 8003316:	7bbb      	ldrb	r3, [r7, #14]
 8003318:	2b02      	cmp	r3, #2
 800331a:	d005      	beq.n	8003328 <vl53l7cx_get_power_mode+0x50>
 800331c:	2b04      	cmp	r3, #4
 800331e:	d107      	bne.n	8003330 <vl53l7cx_get_power_mode+0x58>
	{
		case 0x4:
			*p_power_mode = VL53L7CX_POWER_MODE_WAKEUP;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	2201      	movs	r2, #1
 8003324:	701a      	strb	r2, [r3, #0]
			break;
 8003326:	e009      	b.n	800333c <vl53l7cx_get_power_mode+0x64>
		case 0x2:
			*p_power_mode = VL53L7CX_POWER_MODE_SLEEP;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	2200      	movs	r2, #0
 800332c:	701a      	strb	r2, [r3, #0]

			break;
 800332e:	e005      	b.n	800333c <vl53l7cx_get_power_mode+0x64>
		default:
			*p_power_mode = 0;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	2200      	movs	r2, #0
 8003334:	701a      	strb	r2, [r3, #0]
			status = VL53L7CX_STATUS_ERROR;
 8003336:	23ff      	movs	r3, #255	@ 0xff
 8003338:	73fb      	strb	r3, [r7, #15]
			break;
 800333a:	bf00      	nop
	}

	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003344:	4618      	mov	r0, r3
 8003346:	f7fe f9ba 	bl	80016be <VL53L7CX_WrByte>
 800334a:	4603      	mov	r3, r0
 800334c:	461a      	mov	r2, r3
 800334e:	7bfb      	ldrb	r3, [r7, #15]
 8003350:	4313      	orrs	r3, r2
 8003352:	73fb      	strb	r3, [r7, #15]

	return status;
 8003354:	7bfb      	ldrb	r3, [r7, #15]
}
 8003356:	4618      	mov	r0, r3
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <vl53l7cx_set_power_mode>:

uint8_t vl53l7cx_set_power_mode(
		VL53L7CX_Configuration		*p_dev,
		uint8_t			        power_mode)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b086      	sub	sp, #24
 8003362:	af02      	add	r7, sp, #8
 8003364:	6078      	str	r0, [r7, #4]
 8003366:	460b      	mov	r3, r1
 8003368:	70fb      	strb	r3, [r7, #3]
	uint8_t current_power_mode, status = VL53L7CX_STATUS_OK;
 800336a:	2300      	movs	r3, #0
 800336c:	73fb      	strb	r3, [r7, #15]

	status |= vl53l7cx_get_power_mode(p_dev, &current_power_mode);
 800336e:	f107 030e 	add.w	r3, r7, #14
 8003372:	4619      	mov	r1, r3
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7ff ffaf 	bl	80032d8 <vl53l7cx_get_power_mode>
 800337a:	4603      	mov	r3, r0
 800337c:	461a      	mov	r2, r3
 800337e:	7bfb      	ldrb	r3, [r7, #15]
 8003380:	4313      	orrs	r3, r2
 8003382:	73fb      	strb	r3, [r7, #15]
	if(power_mode != current_power_mode)
 8003384:	7bbb      	ldrb	r3, [r7, #14]
 8003386:	78fa      	ldrb	r2, [r7, #3]
 8003388:	429a      	cmp	r2, r3
 800338a:	d061      	beq.n	8003450 <vl53l7cx_set_power_mode+0xf2>
	{
	switch(power_mode)
 800338c:	78fb      	ldrb	r3, [r7, #3]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d028      	beq.n	80033e4 <vl53l7cx_set_power_mode+0x86>
 8003392:	2b01      	cmp	r3, #1
 8003394:	d14d      	bne.n	8003432 <vl53l7cx_set_power_mode+0xd4>
	{
		case VL53L7CX_POWER_MODE_WAKEUP:
			status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fe f98d 	bl	80016be <VL53L7CX_WrByte>
 80033a4:	4603      	mov	r3, r0
 80033a6:	461a      	mov	r2, r3
 80033a8:	7bfb      	ldrb	r3, [r7, #15]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	73fb      	strb	r3, [r7, #15]
			status |= VL53L7CX_WrByte(&(p_dev->platform), 0x09, 0x04);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2204      	movs	r2, #4
 80033b2:	2109      	movs	r1, #9
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7fe f982 	bl	80016be <VL53L7CX_WrByte>
 80033ba:	4603      	mov	r3, r0
 80033bc:	461a      	mov	r2, r3
 80033be:	7bfb      	ldrb	r3, [r7, #15]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	73fb      	strb	r3, [r7, #15]
			status |= _vl53l7cx_poll_for_answer(
 80033c4:	2301      	movs	r3, #1
 80033c6:	9301      	str	r3, [sp, #4]
 80033c8:	2301      	movs	r3, #1
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	2306      	movs	r3, #6
 80033ce:	2200      	movs	r2, #0
 80033d0:	2101      	movs	r1, #1
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7fe ff35 	bl	8002242 <_vl53l7cx_poll_for_answer>
 80033d8:	4603      	mov	r3, r0
 80033da:	461a      	mov	r2, r3
 80033dc:	7bfb      	ldrb	r3, [r7, #15]
 80033de:	4313      	orrs	r3, r2
 80033e0:	73fb      	strb	r3, [r7, #15]
						p_dev, 1, 0, 0x06, 0x01, 1);
			break;
 80033e2:	e029      	b.n	8003438 <vl53l7cx_set_power_mode+0xda>

		case VL53L7CX_POWER_MODE_SLEEP:
			status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7fe f966 	bl	80016be <VL53L7CX_WrByte>
 80033f2:	4603      	mov	r3, r0
 80033f4:	461a      	mov	r2, r3
 80033f6:	7bfb      	ldrb	r3, [r7, #15]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	73fb      	strb	r3, [r7, #15]
			status |= VL53L7CX_WrByte(&(p_dev->platform), 0x09, 0x02);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2202      	movs	r2, #2
 8003400:	2109      	movs	r1, #9
 8003402:	4618      	mov	r0, r3
 8003404:	f7fe f95b 	bl	80016be <VL53L7CX_WrByte>
 8003408:	4603      	mov	r3, r0
 800340a:	461a      	mov	r2, r3
 800340c:	7bfb      	ldrb	r3, [r7, #15]
 800340e:	4313      	orrs	r3, r2
 8003410:	73fb      	strb	r3, [r7, #15]
			status |= _vl53l7cx_poll_for_answer(
 8003412:	2300      	movs	r3, #0
 8003414:	9301      	str	r3, [sp, #4]
 8003416:	2301      	movs	r3, #1
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	2306      	movs	r3, #6
 800341c:	2200      	movs	r2, #0
 800341e:	2101      	movs	r1, #1
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f7fe ff0e 	bl	8002242 <_vl53l7cx_poll_for_answer>
 8003426:	4603      	mov	r3, r0
 8003428:	461a      	mov	r2, r3
 800342a:	7bfb      	ldrb	r3, [r7, #15]
 800342c:	4313      	orrs	r3, r2
 800342e:	73fb      	strb	r3, [r7, #15]
						p_dev, 1, 0, 0x06, 0x01, 0);
			break;
 8003430:	e002      	b.n	8003438 <vl53l7cx_set_power_mode+0xda>

		default:
			status = VL53L7CX_STATUS_ERROR;
 8003432:	23ff      	movs	r3, #255	@ 0xff
 8003434:	73fb      	strb	r3, [r7, #15]
			break;
 8003436:	bf00      	nop
		}
		status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2202      	movs	r2, #2
 800343c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003440:	4618      	mov	r0, r3
 8003442:	f7fe f93c 	bl	80016be <VL53L7CX_WrByte>
 8003446:	4603      	mov	r3, r0
 8003448:	461a      	mov	r2, r3
 800344a:	7bfb      	ldrb	r3, [r7, #15]
 800344c:	4313      	orrs	r3, r2
 800344e:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8003450:	7bfb      	ldrb	r3, [r7, #15]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <vl53l7cx_start_ranging>:

uint8_t vl53l7cx_start_ranging(
		VL53L7CX_Configuration		*p_dev)
{
 800345c:	b5b0      	push	{r4, r5, r7, lr}
 800345e:	b09c      	sub	sp, #112	@ 0x70
 8003460:	af02      	add	r7, sp, #8
 8003462:	6078      	str	r0, [r7, #4]
	uint8_t resolution, status = VL53L7CX_STATUS_OK;
 8003464:	2300      	movs	r3, #0
 8003466:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	uint16_t tmp;
	uint32_t i;
	uint32_t header_config[2] = {0, 0};
 800346a:	2300      	movs	r3, #0
 800346c:	653b      	str	r3, [r7, #80]	@ 0x50
 800346e:	2300      	movs	r3, #0
 8003470:	657b      	str	r3, [r7, #84]	@ 0x54

	union Block_header *bh_ptr;
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 8003472:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003476:	64fb      	str	r3, [r7, #76]	@ 0x4c

	status |= vl53l7cx_get_resolution(p_dev, &resolution);
 8003478:	f107 035b 	add.w	r3, r7, #91	@ 0x5b
 800347c:	4619      	mov	r1, r3
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 fca0 	bl	8003dc4 <vl53l7cx_get_resolution>
 8003484:	4603      	mov	r3, r0
 8003486:	461a      	mov	r2, r3
 8003488:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800348c:	4313      	orrs	r3, r2
 800348e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	p_dev->data_read_size = 0;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	615a      	str	r2, [r3, #20]
	p_dev->streamcount = 255;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	22ff      	movs	r2, #255	@ 0xff
 800349c:	741a      	strb	r2, [r3, #16]

	/* Enable mandatory output (meta and common data) */
	uint32_t output_bh_enable[] = {
 800349e:	4baa      	ldr	r3, [pc, #680]	@ (8003748 <vl53l7cx_start_ranging+0x2ec>)
 80034a0:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80034a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00000000U,
		0x00000000U,
		0xC0000000U};

	/* Send addresses of possible output */
	uint32_t output[] ={VL53L7CX_START_BH,
 80034aa:	4ba8      	ldr	r3, [pc, #672]	@ (800374c <vl53l7cx_start_ranging+0x2f0>)
 80034ac:	f107 040c 	add.w	r4, r7, #12
 80034b0:	461d      	mov	r5, r3
 80034b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034ba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80034be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		VL53L7CX_TARGET_STATUS_BH,
		VL53L7CX_MOTION_DETECT_BH};

	/* Enable selected outputs in the 'platform.h' file */
#ifndef VL53L7CX_DISABLE_AMBIENT_PER_SPAD
	output_bh_enable[0] += (uint32_t)8;
 80034c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034c4:	3308      	adds	r3, #8
 80034c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L7CX_DISABLE_NB_SPADS_ENABLED
	output_bh_enable[0] += (uint32_t)16;
 80034c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034ca:	3310      	adds	r3, #16
 80034cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L7CX_DISABLE_NB_TARGET_DETECTED
	output_bh_enable[0] += (uint32_t)32;
 80034ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034d0:	3320      	adds	r3, #32
 80034d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L7CX_DISABLE_SIGNAL_PER_SPAD
	output_bh_enable[0] += (uint32_t)64;
 80034d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034d6:	3340      	adds	r3, #64	@ 0x40
 80034d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L7CX_DISABLE_RANGE_SIGMA_MM
	output_bh_enable[0] += (uint32_t)128;
 80034da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034dc:	3380      	adds	r3, #128	@ 0x80
 80034de:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L7CX_DISABLE_DISTANCE_MM
	output_bh_enable[0] += (uint32_t)256;
 80034e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034e2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80034e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L7CX_DISABLE_REFLECTANCE_PERCENT
	output_bh_enable[0] += (uint32_t)512;
 80034e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034ea:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80034ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L7CX_DISABLE_TARGET_STATUS
	output_bh_enable[0] += (uint32_t)1024;
 80034f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80034f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L7CX_DISABLE_MOTION_INDICATOR
	output_bh_enable[0] += (uint32_t)2048;
 80034f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8003500:	2300      	movs	r3, #0
 8003502:	663b      	str	r3, [r7, #96]	@ 0x60
 8003504:	e073      	b.n	80035ee <vl53l7cx_start_ranging+0x192>
	{
		if ((output[i] == (uint8_t)0) 
 8003506:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	3368      	adds	r3, #104	@ 0x68
 800350c:	443b      	add	r3, r7
 800350e:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d067      	beq.n	80035e6 <vl53l7cx_start_ranging+0x18a>
                    || ((output_bh_enable[i/(uint32_t)32]
 8003516:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003518:	095b      	lsrs	r3, r3, #5
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	3368      	adds	r3, #104	@ 0x68
 800351e:	443b      	add	r3, r7
 8003520:	f853 2c2c 	ldr.w	r2, [r3, #-44]
                         &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 8003524:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003526:	f003 031f 	and.w	r3, r3, #31
 800352a:	fa22 f303 	lsr.w	r3, r2, r3
 800352e:	f003 0301 	and.w	r3, r3, #1
                    || ((output_bh_enable[i/(uint32_t)32]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d057      	beq.n	80035e6 <vl53l7cx_start_ranging+0x18a>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(output[i]);
 8003536:	f107 020c 	add.w	r2, r7, #12
 800353a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	65fb      	str	r3, [r7, #92]	@ 0x5c
		if (((uint8_t)bh_ptr->type >= (uint8_t)0x1) 
 8003542:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	d03a      	beq.n	80035c6 <vl53l7cx_start_ranging+0x16a>
                    && ((uint8_t)bh_ptr->type < (uint8_t)0x0d))
 8003550:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b0c      	cmp	r3, #12
 800355c:	d833      	bhi.n	80035c6 <vl53l7cx_start_ranging+0x16a>
		{
			if ((bh_ptr->idx >= (uint16_t)0x54d0) 
 800355e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003560:	885b      	ldrh	r3, [r3, #2]
 8003562:	f245 42cf 	movw	r2, #21711	@ 0x54cf
 8003566:	4293      	cmp	r3, r2
 8003568:	d910      	bls.n	800358c <vl53l7cx_start_ranging+0x130>
                            && (bh_ptr->idx < (uint16_t)(0x54d0 + 960)))
 800356a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800356c:	885b      	ldrh	r3, [r3, #2]
 800356e:	f645 028f 	movw	r2, #22671	@ 0x588f
 8003572:	4293      	cmp	r3, r2
 8003574:	d80a      	bhi.n	800358c <vl53l7cx_start_ranging+0x130>
			{
				bh_ptr->size = resolution;
 8003576:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800357a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800357e:	b299      	uxth	r1, r3
 8003580:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003582:	8813      	ldrh	r3, [r2, #0]
 8003584:	f361 130f 	bfi	r3, r1, #4, #12
 8003588:	8013      	strh	r3, [r2, #0]
 800358a:	e009      	b.n	80035a0 <vl53l7cx_start_ranging+0x144>
			}
			else
			{
				bh_ptr->size = (uint16_t)((uint16_t)resolution
 800358c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003594:	b299      	uxth	r1, r3
 8003596:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003598:	8813      	ldrh	r3, [r2, #0]
 800359a:	f361 130f 	bfi	r3, r1, #4, #12
 800359e:	8013      	strh	r3, [r2, #0]
                                  * (uint16_t)VL53L7CX_NB_TARGET_PER_ZONE);
			}
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80035a6:	7812      	ldrb	r2, [r2, #0]
 80035a8:	f3c2 0203 	ubfx	r2, r2, #0, #4
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	4611      	mov	r1, r2
 80035b0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80035b2:	8812      	ldrh	r2, [r2, #0]
 80035b4:	f3c2 120b 	ubfx	r2, r2, #4, #12
 80035b8:	b292      	uxth	r2, r2
 80035ba:	fb01 f202 	mul.w	r2, r1, r2
 80035be:	441a      	add	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	615a      	str	r2, [r3, #20]
 80035c4:	e009      	b.n	80035da <vl53l7cx_start_ranging+0x17e>
		}
		else
		{
			p_dev->data_read_size += bh_ptr->size;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80035cc:	8812      	ldrh	r2, [r2, #0]
 80035ce:	f3c2 120b 	ubfx	r2, r2, #4, #12
 80035d2:	b292      	uxth	r2, r2
 80035d4:	441a      	add	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	615a      	str	r2, [r3, #20]
		}
		p_dev->data_read_size += (uint32_t)4;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	1d1a      	adds	r2, r3, #4
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	615a      	str	r2, [r3, #20]
 80035e4:	e000      	b.n	80035e8 <vl53l7cx_start_ranging+0x18c>
			continue;
 80035e6:	bf00      	nop
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 80035e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035ea:	3301      	adds	r3, #1
 80035ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80035ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035f0:	2b0b      	cmp	r3, #11
 80035f2:	d988      	bls.n	8003506 <vl53l7cx_start_ranging+0xaa>
	}
	p_dev->data_read_size += (uint32_t)24;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	f103 0218 	add.w	r2, r3, #24
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	615a      	str	r2, [r3, #20]

	status |= vl53l7cx_dci_write_data(p_dev,
 8003600:	f107 010c 	add.w	r1, r7, #12
 8003604:	2330      	movs	r3, #48	@ 0x30
 8003606:	f64d 1280 	movw	r2, #55680	@ 0xd980
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 fe0a 	bl	8004224 <vl53l7cx_dci_write_data>
 8003610:	4603      	mov	r3, r0
 8003612:	461a      	mov	r2, r3
 8003614:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003618:	4313      	orrs	r3, r2
 800361a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(output), VL53L7CX_DCI_OUTPUT_LIST,
			(uint16_t)sizeof(output));

	header_config[0] = p_dev->data_read_size;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	653b      	str	r3, [r7, #80]	@ 0x50
	header_config[1] = i + (uint32_t)1;
 8003624:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003626:	3301      	adds	r3, #1
 8003628:	657b      	str	r3, [r7, #84]	@ 0x54

	status |= vl53l7cx_dci_write_data(p_dev,
 800362a:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800362e:	2308      	movs	r3, #8
 8003630:	f64d 1268 	movw	r2, #55656	@ 0xd968
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 fdf5 	bl	8004224 <vl53l7cx_dci_write_data>
 800363a:	4603      	mov	r3, r0
 800363c:	461a      	mov	r2, r3
 800363e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003642:	4313      	orrs	r3, r2
 8003644:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(header_config), VL53L7CX_DCI_OUTPUT_CONFIG,
			(uint16_t)sizeof(header_config));

	status |= vl53l7cx_dci_write_data(p_dev,
 8003648:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800364c:	2310      	movs	r3, #16
 800364e:	f64d 1270 	movw	r2, #55664	@ 0xd970
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 fde6 	bl	8004224 <vl53l7cx_dci_write_data>
 8003658:	4603      	mov	r3, r0
 800365a:	461a      	mov	r2, r3
 800365c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003660:	4313      	orrs	r3, r2
 8003662:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(output_bh_enable), VL53L7CX_DCI_OUTPUT_ENABLES,
			(uint16_t)sizeof(output_bh_enable));

	/* Start xshut bypass (interrupt mode) */
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800366e:	4618      	mov	r0, r3
 8003670:	f7fe f825 	bl	80016be <VL53L7CX_WrByte>
 8003674:	4603      	mov	r3, r0
 8003676:	461a      	mov	r2, r3
 8003678:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800367c:	4313      	orrs	r3, r2
 800367e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x09, 0x05);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2205      	movs	r2, #5
 8003686:	2109      	movs	r1, #9
 8003688:	4618      	mov	r0, r3
 800368a:	f7fe f818 	bl	80016be <VL53L7CX_WrByte>
 800368e:	4603      	mov	r3, r0
 8003690:	461a      	mov	r2, r3
 8003692:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003696:	4313      	orrs	r3, r2
 8003698:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2202      	movs	r2, #2
 80036a0:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7fe f80a 	bl	80016be <VL53L7CX_WrByte>
 80036aa:	4603      	mov	r3, r0
 80036ac:	461a      	mov	r2, r3
 80036ae:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80036b2:	4313      	orrs	r3, r2
 80036b4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

	/* Start ranging session */
	status |= VL53L7CX_WrMulti(&(p_dev->platform), VL53L7CX_UI_CMD_END -
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80036be:	2304      	movs	r3, #4
 80036c0:	f642 71fc 	movw	r1, #12284	@ 0x2ffc
 80036c4:	f7fe f811 	bl	80016ea <VL53L7CX_WrMulti>
 80036c8:	4603      	mov	r3, r0
 80036ca:	461a      	mov	r2, r3
 80036cc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80036d0:	4313      	orrs	r3, r2
 80036d2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint16_t)(4 - 1), (uint8_t*)cmd, sizeof(cmd));
	status |= _vl53l7cx_poll_for_answer(p_dev, 4, 1,
 80036d6:	2303      	movs	r3, #3
 80036d8:	9301      	str	r3, [sp, #4]
 80036da:	23ff      	movs	r3, #255	@ 0xff
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80036e2:	2201      	movs	r2, #1
 80036e4:	2104      	movs	r1, #4
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7fe fdab 	bl	8002242 <_vl53l7cx_poll_for_answer>
 80036ec:	4603      	mov	r3, r0
 80036ee:	461a      	mov	r2, r3
 80036f0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80036f4:	4313      	orrs	r3, r2
 80036f6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			VL53L7CX_UI_CMD_STATUS, 0xff, 0x03);

	/* Read ui range data content and compare if data size is the correct one */
	status |= vl53l7cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0x5440, 12);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
	status |= vl53l7cx_dci_read_data(p_dev,
 8003700:	230c      	movs	r3, #12
 8003702:	f245 4240 	movw	r2, #21568	@ 0x5440
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 fd02 	bl	8004110 <vl53l7cx_dci_read_data>
 800370c:	4603      	mov	r3, r0
 800370e:	461a      	mov	r2, r3
 8003710:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003714:	4313      	orrs	r3, r2
 8003716:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	(void)memcpy(&tmp, &(p_dev->temp_buffer[0x8]), sizeof(tmp));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f503 63a3 	add.w	r3, r3, #1304	@ 0x518
 8003720:	881b      	ldrh	r3, [r3, #0]
 8003722:	b29b      	uxth	r3, r3
 8003724:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
	if(tmp != p_dev->data_read_size)
 8003728:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800372c:	461a      	mov	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	429a      	cmp	r2, r3
 8003734:	d002      	beq.n	800373c <vl53l7cx_start_ranging+0x2e0>
	{
		status |= VL53L7CX_STATUS_ERROR;
 8003736:	23ff      	movs	r3, #255	@ 0xff
 8003738:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	}

	return status;
 800373c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8003740:	4618      	mov	r0, r3
 8003742:	3768      	adds	r7, #104	@ 0x68
 8003744:	46bd      	mov	sp, r7
 8003746:	bdb0      	pop	{r4, r5, r7, pc}
 8003748:	08008404 	.word	0x08008404
 800374c:	08008414 	.word	0x08008414

08003750 <vl53l7cx_stop_ranging>:

uint8_t vl53l7cx_stop_ranging(
		VL53L7CX_Configuration		*p_dev)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0, status = VL53L7CX_STATUS_OK;
 8003758:	2300      	movs	r3, #0
 800375a:	74fb      	strb	r3, [r7, #19]
 800375c:	2300      	movs	r3, #0
 800375e:	75fb      	strb	r3, [r7, #23]
	uint16_t timeout = 0;
 8003760:	2300      	movs	r3, #0
 8003762:	82bb      	strh	r3, [r7, #20]
	uint32_t auto_stop_flag = 0;
 8003764:	2300      	movs	r3, #0
 8003766:	60fb      	str	r3, [r7, #12]

	status |= VL53L7CX_RdMulti(&(p_dev->platform),
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f107 020c 	add.w	r2, r7, #12
 800376e:	2304      	movs	r3, #4
 8003770:	f642 71fc 	movw	r1, #12284	@ 0x2ffc
 8003774:	f7fd ffd0 	bl	8001718 <VL53L7CX_RdMulti>
 8003778:	4603      	mov	r3, r0
 800377a:	461a      	mov	r2, r3
 800377c:	7dfb      	ldrb	r3, [r7, #23]
 800377e:	4313      	orrs	r3, r2
 8003780:	75fb      	strb	r3, [r7, #23]
                          0x2FFC, (uint8_t*)&auto_stop_flag, 4);
	if((auto_stop_flag != (uint32_t)0x4FF)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f240 42ff 	movw	r2, #1279	@ 0x4ff
 8003788:	4293      	cmp	r3, r2
 800378a:	d04d      	beq.n	8003828 <vl53l7cx_stop_ranging+0xd8>
		&& (p_dev->is_auto_stop_enabled == (uint8_t)0))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 3abc 	ldrb.w	r3, [r3, #2748]	@ 0xabc
 8003792:	2b00      	cmp	r3, #0
 8003794:	d148      	bne.n	8003828 <vl53l7cx_stop_ranging+0xd8>
	{
	        status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800379e:	4618      	mov	r0, r3
 80037a0:	f7fd ff8d 	bl	80016be <VL53L7CX_WrByte>
 80037a4:	4603      	mov	r3, r0
 80037a6:	461a      	mov	r2, r3
 80037a8:	7dfb      	ldrb	r3, [r7, #23]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	75fb      	strb	r3, [r7, #23]

	        /* Provoke MCU stop */
	        status |= VL53L7CX_WrByte(&(p_dev->platform), 0x15, 0x16);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2216      	movs	r2, #22
 80037b2:	2115      	movs	r1, #21
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7fd ff82 	bl	80016be <VL53L7CX_WrByte>
 80037ba:	4603      	mov	r3, r0
 80037bc:	461a      	mov	r2, r3
 80037be:	7dfb      	ldrb	r3, [r7, #23]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	75fb      	strb	r3, [r7, #23]
	        status |= VL53L7CX_WrByte(&(p_dev->platform), 0x14, 0x01);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	2114      	movs	r1, #20
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fd ff77 	bl	80016be <VL53L7CX_WrByte>
 80037d0:	4603      	mov	r3, r0
 80037d2:	461a      	mov	r2, r3
 80037d4:	7dfb      	ldrb	r3, [r7, #23]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	75fb      	strb	r3, [r7, #23]

	        /* Poll for G02 status 0 MCU stop */
	        while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 80037da:	e021      	b.n	8003820 <vl53l7cx_stop_ranging+0xd0>
	        {
	        	status |= VL53L7CX_RdByte(&(p_dev->platform), 0x6, &tmp);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f107 0213 	add.w	r2, r7, #19
 80037e2:	2106      	movs	r1, #6
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7fd ff55 	bl	8001694 <VL53L7CX_RdByte>
 80037ea:	4603      	mov	r3, r0
 80037ec:	461a      	mov	r2, r3
 80037ee:	7dfb      	ldrb	r3, [r7, #23]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	75fb      	strb	r3, [r7, #23]
	        	status |= VL53L7CX_WaitMs(&(p_dev->platform), 10);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	210a      	movs	r1, #10
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7fd ffda 	bl	80017b2 <VL53L7CX_WaitMs>
 80037fe:	4603      	mov	r3, r0
 8003800:	461a      	mov	r2, r3
 8003802:	7dfb      	ldrb	r3, [r7, #23]
 8003804:	4313      	orrs	r3, r2
 8003806:	75fb      	strb	r3, [r7, #23]
	        	timeout++;	/* Timeout reached after 5 seconds */
 8003808:	8abb      	ldrh	r3, [r7, #20]
 800380a:	3301      	adds	r3, #1
 800380c:	82bb      	strh	r3, [r7, #20]

	        	if(timeout > (uint16_t)500)
 800380e:	8abb      	ldrh	r3, [r7, #20]
 8003810:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003814:	d904      	bls.n	8003820 <vl53l7cx_stop_ranging+0xd0>
				{
					status |= tmp;
 8003816:	7cfa      	ldrb	r2, [r7, #19]
 8003818:	7dfb      	ldrb	r3, [r7, #23]
 800381a:	4313      	orrs	r3, r2
 800381c:	75fb      	strb	r3, [r7, #23]
					break;
 800381e:	e003      	b.n	8003828 <vl53l7cx_stop_ranging+0xd8>
	        while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 8003820:	7cfb      	ldrb	r3, [r7, #19]
 8003822:	b25b      	sxtb	r3, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	dad9      	bge.n	80037dc <vl53l7cx_stop_ranging+0x8c>
				}
        	}
        }

	/* Check GO2 status 1 if status is still OK */
	status |= VL53L7CX_RdByte(&(p_dev->platform), 0x6, &tmp);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f107 0213 	add.w	r2, r7, #19
 800382e:	2106      	movs	r1, #6
 8003830:	4618      	mov	r0, r3
 8003832:	f7fd ff2f 	bl	8001694 <VL53L7CX_RdByte>
 8003836:	4603      	mov	r3, r0
 8003838:	461a      	mov	r2, r3
 800383a:	7dfb      	ldrb	r3, [r7, #23]
 800383c:	4313      	orrs	r3, r2
 800383e:	75fb      	strb	r3, [r7, #23]
	if((tmp & (uint8_t)0x80) != (uint8_t)0){
 8003840:	7cfb      	ldrb	r3, [r7, #19]
 8003842:	b25b      	sxtb	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	da15      	bge.n	8003874 <vl53l7cx_stop_ranging+0x124>
		status |= VL53L7CX_RdByte(&(p_dev->platform), 0x7, &tmp);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f107 0213 	add.w	r2, r7, #19
 800384e:	2107      	movs	r1, #7
 8003850:	4618      	mov	r0, r3
 8003852:	f7fd ff1f 	bl	8001694 <VL53L7CX_RdByte>
 8003856:	4603      	mov	r3, r0
 8003858:	461a      	mov	r2, r3
 800385a:	7dfb      	ldrb	r3, [r7, #23]
 800385c:	4313      	orrs	r3, r2
 800385e:	75fb      	strb	r3, [r7, #23]
		if((tmp != (uint8_t)0x84) && (tmp != (uint8_t)0x85)){
 8003860:	7cfb      	ldrb	r3, [r7, #19]
 8003862:	2b84      	cmp	r3, #132	@ 0x84
 8003864:	d006      	beq.n	8003874 <vl53l7cx_stop_ranging+0x124>
 8003866:	7cfb      	ldrb	r3, [r7, #19]
 8003868:	2b85      	cmp	r3, #133	@ 0x85
 800386a:	d003      	beq.n	8003874 <vl53l7cx_stop_ranging+0x124>
		   status |= tmp;
 800386c:	7cfa      	ldrb	r2, [r7, #19]
 800386e:	7dfb      	ldrb	r3, [r7, #23]
 8003870:	4313      	orrs	r3, r2
 8003872:	75fb      	strb	r3, [r7, #23]
		}
	}

	/* Undo MCU stop */
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800387c:	4618      	mov	r0, r3
 800387e:	f7fd ff1e 	bl	80016be <VL53L7CX_WrByte>
 8003882:	4603      	mov	r3, r0
 8003884:	461a      	mov	r2, r3
 8003886:	7dfb      	ldrb	r3, [r7, #23]
 8003888:	4313      	orrs	r3, r2
 800388a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x14, 0x00);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	2114      	movs	r1, #20
 8003892:	4618      	mov	r0, r3
 8003894:	f7fd ff13 	bl	80016be <VL53L7CX_WrByte>
 8003898:	4603      	mov	r3, r0
 800389a:	461a      	mov	r2, r3
 800389c:	7dfb      	ldrb	r3, [r7, #23]
 800389e:	4313      	orrs	r3, r2
 80038a0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x15, 0x00);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	2115      	movs	r1, #21
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7fd ff08 	bl	80016be <VL53L7CX_WrByte>
 80038ae:	4603      	mov	r3, r0
 80038b0:	461a      	mov	r2, r3
 80038b2:	7dfb      	ldrb	r3, [r7, #23]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	75fb      	strb	r3, [r7, #23]

	/* Stop xshut bypass */
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x09, 0x04);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2204      	movs	r2, #4
 80038bc:	2109      	movs	r1, #9
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fd fefd 	bl	80016be <VL53L7CX_WrByte>
 80038c4:	4603      	mov	r3, r0
 80038c6:	461a      	mov	r2, r3
 80038c8:	7dfb      	ldrb	r3, [r7, #23]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2202      	movs	r2, #2
 80038d2:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fd fef1 	bl	80016be <VL53L7CX_WrByte>
 80038dc:	4603      	mov	r3, r0
 80038de:	461a      	mov	r2, r3
 80038e0:	7dfb      	ldrb	r3, [r7, #23]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	75fb      	strb	r3, [r7, #23]

	return status;
 80038e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3718      	adds	r7, #24
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <vl53l7cx_check_data_ready>:

uint8_t vl53l7cx_check_data_ready(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				*p_isReady)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L7CX_STATUS_OK;
 80038fa:	2300      	movs	r3, #0
 80038fc:	73fb      	strb	r3, [r7, #15]

	status |= VL53L7CX_RdMulti(&(p_dev->platform), 0x0, p_dev->temp_buffer, 4);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 8003906:	2304      	movs	r3, #4
 8003908:	2100      	movs	r1, #0
 800390a:	f7fd ff05 	bl	8001718 <VL53L7CX_RdMulti>
 800390e:	4603      	mov	r3, r0
 8003910:	461a      	mov	r2, r3
 8003912:	7bfb      	ldrb	r3, [r7, #15]
 8003914:	4313      	orrs	r3, r2
 8003916:	73fb      	strb	r3, [r7, #15]

	if((p_dev->temp_buffer[0] != p_dev->streamcount)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	7c1b      	ldrb	r3, [r3, #16]
 8003922:	429a      	cmp	r2, r3
 8003924:	d020      	beq.n	8003968 <vl53l7cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[0] != (uint8_t)255)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 3510 	ldrb.w	r3, [r3, #1296]	@ 0x510
 800392c:	2bff      	cmp	r3, #255	@ 0xff
 800392e:	d01b      	beq.n	8003968 <vl53l7cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[1] == (uint8_t)0x5)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 3511 	ldrb.w	r3, [r3, #1297]	@ 0x511
 8003936:	2b05      	cmp	r3, #5
 8003938:	d116      	bne.n	8003968 <vl53l7cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[2] & (uint8_t)0x5) == (uint8_t)0x5)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 3512 	ldrb.w	r3, [r3, #1298]	@ 0x512
 8003940:	f003 0305 	and.w	r3, r3, #5
 8003944:	2b05      	cmp	r3, #5
 8003946:	d10f      	bne.n	8003968 <vl53l7cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[3] & (uint8_t)0x10) ==(uint8_t)0x10)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 3513 	ldrb.w	r3, [r3, #1299]	@ 0x513
 800394e:	f003 0310 	and.w	r3, r3, #16
 8003952:	2b00      	cmp	r3, #0
 8003954:	d008      	beq.n	8003968 <vl53l7cx_check_data_ready+0x78>
			)
	{
		*p_isReady = (uint8_t)1;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2201      	movs	r2, #1
 800395a:	701a      	strb	r2, [r3, #0]
		 p_dev->streamcount = p_dev->temp_buffer[0];
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	741a      	strb	r2, [r3, #16]
 8003966:	e00e      	b.n	8003986 <vl53l7cx_check_data_ready+0x96>
	}
	else
	{
        if ((p_dev->temp_buffer[3] & (uint8_t)0x80) != (uint8_t)0)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f893 3513 	ldrb.w	r3, [r3, #1299]	@ 0x513
 800396e:	b25b      	sxtb	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	da05      	bge.n	8003980 <vl53l7cx_check_data_ready+0x90>
        {
        	status |= p_dev->temp_buffer[2];	/* Return GO2 error status */
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 2512 	ldrb.w	r2, [r3, #1298]	@ 0x512
 800397a:	7bfb      	ldrb	r3, [r7, #15]
 800397c:	4313      	orrs	r3, r2
 800397e:	73fb      	strb	r3, [r7, #15]
        }

		*p_isReady = 0;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	2200      	movs	r2, #0
 8003984:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8003986:	7bfb      	ldrb	r3, [r7, #15]
}
 8003988:	4618      	mov	r0, r3
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <vl53l7cx_get_ranging_data>:

uint8_t vl53l7cx_get_ranging_data(
		VL53L7CX_Configuration		*p_dev,
		VL53L7CX_ResultsData		*p_results)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b088      	sub	sp, #32
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L7CX_STATUS_OK;
 800399a:	2300      	movs	r3, #0
 800399c:	77fb      	strb	r3, [r7, #31]
	uint16_t header_id, footer_id;
	union Block_header *bh_ptr;
	uint32_t i, j, msize;
	status |= VL53L7CX_RdMulti(&(p_dev->platform), 0x0,
 800399e:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, p_dev->data_read_size);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
	status |= VL53L7CX_RdMulti(&(p_dev->platform), 0x0,
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	2100      	movs	r1, #0
 80039ac:	f7fd feb4 	bl	8001718 <VL53L7CX_RdMulti>
 80039b0:	4603      	mov	r3, r0
 80039b2:	461a      	mov	r2, r3
 80039b4:	7ffb      	ldrb	r3, [r7, #31]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	77fb      	strb	r3, [r7, #31]
	p_dev->streamcount = p_dev->temp_buffer[0];
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	741a      	strb	r2, [r3, #16]
	VL53L7CX_SwapBuffer(p_dev->temp_buffer, (uint16_t)p_dev->data_read_size);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	4619      	mov	r1, r3
 80039d2:	4610      	mov	r0, r2
 80039d4:	f7fd feb7 	bl	8001746 <VL53L7CX_SwapBuffer>

	/* Start conversion at position 16 to avoid headers */
	for (i = (uint32_t)16; i 
 80039d8:	2310      	movs	r3, #16
 80039da:	61bb      	str	r3, [r7, #24]
 80039dc:	e10e      	b.n	8003bfc <vl53l7cx_get_ranging_data+0x26c>
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
	{
		bh_ptr = (union Block_header *)&(p_dev->temp_buffer[i]);
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	4413      	add	r3, r2
 80039e8:	60bb      	str	r3, [r7, #8]
		if ((bh_ptr->type > (uint32_t)0x1) 
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d915      	bls.n	8003a24 <vl53l7cx_get_ranging_data+0x94>
                    && (bh_ptr->type < (uint32_t)0xd))
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b0c      	cmp	r3, #12
 8003a04:	d80e      	bhi.n	8003a24 <vl53l7cx_get_ranging_data+0x94>
		{
			msize = bh_ptr->type * bh_ptr->size;
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	461a      	mov	r2, r3
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	881b      	ldrh	r3, [r3, #0]
 8003a16:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	fb02 f303 	mul.w	r3, r2, r3
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	e005      	b.n	8003a30 <vl53l7cx_get_ranging_data+0xa0>
		}
		else
		{
			msize = bh_ptr->size;
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	881b      	ldrh	r3, [r3, #0]
 8003a28:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	613b      	str	r3, [r7, #16]
		}

		switch(bh_ptr->idx){
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	885b      	ldrh	r3, [r3, #2]
 8003a34:	f24e 0284 	movw	r2, #57476	@ 0xe084
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	f000 80bb 	beq.w	8003bb4 <vl53l7cx_get_ranging_data+0x224>
 8003a3e:	f24e 0284 	movw	r2, #57476	@ 0xe084
 8003a42:	4293      	cmp	r3, r2
 8003a44:	f300 80d2 	bgt.w	8003bec <vl53l7cx_get_ranging_data+0x25c>
 8003a48:	f24e 0244 	movw	r2, #57412	@ 0xe044
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	f000 80a3 	beq.w	8003b98 <vl53l7cx_get_ranging_data+0x208>
 8003a52:	f24e 0244 	movw	r2, #57412	@ 0xe044
 8003a56:	4293      	cmp	r3, r2
 8003a58:	f300 80c8 	bgt.w	8003bec <vl53l7cx_get_ranging_data+0x25c>
 8003a5c:	f64d 7244 	movw	r2, #57156	@ 0xdf44
 8003a60:	4293      	cmp	r3, r2
 8003a62:	f000 808b 	beq.w	8003b7c <vl53l7cx_get_ranging_data+0x1ec>
 8003a66:	f64d 7244 	movw	r2, #57156	@ 0xdf44
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	f300 80be 	bgt.w	8003bec <vl53l7cx_get_ranging_data+0x25c>
 8003a70:	f64d 62c4 	movw	r2, #57028	@ 0xdec4
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d073      	beq.n	8003b60 <vl53l7cx_get_ranging_data+0x1d0>
 8003a78:	f64d 62c4 	movw	r2, #57028	@ 0xdec4
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	f300 80b5 	bgt.w	8003bec <vl53l7cx_get_ranging_data+0x25c>
 8003a82:	f64d 32c4 	movw	r2, #56260	@ 0xdbc4
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d05c      	beq.n	8003b44 <vl53l7cx_get_ranging_data+0x1b4>
 8003a8a:	f64d 32c4 	movw	r2, #56260	@ 0xdbc4
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	f300 80ac 	bgt.w	8003bec <vl53l7cx_get_ranging_data+0x25c>
 8003a94:	f64d 3284 	movw	r2, #56196	@ 0xdb84
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d045      	beq.n	8003b28 <vl53l7cx_get_ranging_data+0x198>
 8003a9c:	f64d 3284 	movw	r2, #56196	@ 0xdb84
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	f300 80a3 	bgt.w	8003bec <vl53l7cx_get_ranging_data+0x25c>
 8003aa6:	f64d 0258 	movw	r2, #55384	@ 0xd858
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	f000 8090 	beq.w	8003bd0 <vl53l7cx_get_ranging_data+0x240>
 8003ab0:	f64d 0258 	movw	r2, #55384	@ 0xd858
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	f300 8099 	bgt.w	8003bec <vl53l7cx_get_ranging_data+0x25c>
 8003aba:	f245 52d0 	movw	r2, #21968	@ 0x55d0
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d024      	beq.n	8003b0c <vl53l7cx_get_ranging_data+0x17c>
 8003ac2:	f245 52d0 	movw	r2, #21968	@ 0x55d0
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	f300 8090 	bgt.w	8003bec <vl53l7cx_get_ranging_data+0x25c>
 8003acc:	f245 42b4 	movw	r2, #21684	@ 0x54b4
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d004      	beq.n	8003ade <vl53l7cx_get_ranging_data+0x14e>
 8003ad4:	f245 42d0 	movw	r2, #21712	@ 0x54d0
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d00a      	beq.n	8003af2 <vl53l7cx_get_ranging_data+0x162>
				(void)memcpy(&p_results->motion_indicator,
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
				break;
#endif
			default:
				break;
 8003adc:	e086      	b.n	8003bec <vl53l7cx_get_ranging_data+0x25c>
						(int8_t)p_dev->temp_buffer[i + (uint32_t)12];
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	330c      	adds	r3, #12
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	f893 3510 	ldrb.w	r3, [r3, #1296]	@ 0x510
 8003aea:	b25a      	sxtb	r2, r3
				p_results->silicon_temp_degc =
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	701a      	strb	r2, [r3, #0]
				break;
 8003af0:	e07d      	b.n	8003bee <vl53l7cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->ambient_per_spad,
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	1d18      	adds	r0, r3, #4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	3304      	adds	r3, #4
 8003afa:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	4413      	add	r3, r2
				(void)memcpy(p_results->ambient_per_spad,
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	4619      	mov	r1, r3
 8003b06:	f003 fe06 	bl	8007716 <memcpy>
				break;
 8003b0a:	e070      	b.n	8003bee <vl53l7cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->nb_spads_enabled,
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	3304      	adds	r3, #4
 8003b16:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_spads_enabled,
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	4619      	mov	r1, r3
 8003b22:	f003 fdf8 	bl	8007716 <memcpy>
				break;
 8003b26:	e062      	b.n	8003bee <vl53l7cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->nb_target_detected,
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	f503 7082 	add.w	r0, r3, #260	@ 0x104
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	3304      	adds	r3, #4
 8003b32:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_target_detected,
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	f003 fdea 	bl	8007716 <memcpy>
				break;
 8003b42:	e054      	b.n	8003bee <vl53l7cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->signal_per_spad,
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	f503 7011 	add.w	r0, r3, #580	@ 0x244
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	3304      	adds	r3, #4
 8003b4e:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	4413      	add	r3, r2
				(void)memcpy(p_results->signal_per_spad,
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	4619      	mov	r1, r3
 8003b5a:	f003 fddc 	bl	8007716 <memcpy>
				break;
 8003b5e:	e046      	b.n	8003bee <vl53l7cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->range_sigma_mm,
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	f503 7051 	add.w	r0, r3, #836	@ 0x344
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	3304      	adds	r3, #4
 8003b6a:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	4413      	add	r3, r2
				(void)memcpy(p_results->range_sigma_mm,
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	4619      	mov	r1, r3
 8003b76:	f003 fdce 	bl	8007716 <memcpy>
				break;
 8003b7a:	e038      	b.n	8003bee <vl53l7cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->distance_mm,
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	f503 7071 	add.w	r0, r3, #964	@ 0x3c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	3304      	adds	r3, #4
 8003b86:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	4413      	add	r3, r2
				(void)memcpy(p_results->distance_mm,
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	4619      	mov	r1, r3
 8003b92:	f003 fdc0 	bl	8007716 <memcpy>
				break;
 8003b96:	e02a      	b.n	8003bee <vl53l7cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->reflectance,
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	f203 4044 	addw	r0, r3, #1092	@ 0x444
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	3304      	adds	r3, #4
 8003ba2:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	4413      	add	r3, r2
				(void)memcpy(p_results->reflectance,
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	4619      	mov	r1, r3
 8003bae:	f003 fdb2 	bl	8007716 <memcpy>
				break;
 8003bb2:	e01c      	b.n	8003bee <vl53l7cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->target_status,
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	f203 4084 	addw	r0, r3, #1156	@ 0x484
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	3304      	adds	r3, #4
 8003bbe:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	4413      	add	r3, r2
				(void)memcpy(p_results->target_status,
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	4619      	mov	r1, r3
 8003bca:	f003 fda4 	bl	8007716 <memcpy>
				break;
 8003bce:	e00e      	b.n	8003bee <vl53l7cx_get_ranging_data+0x25e>
				(void)memcpy(&p_results->motion_indicator,
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	f203 40c4 	addw	r0, r3, #1220	@ 0x4c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	3304      	adds	r3, #4
 8003bda:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	4413      	add	r3, r2
				(void)memcpy(&p_results->motion_indicator,
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	4619      	mov	r1, r3
 8003be6:	f003 fd96 	bl	8007716 <memcpy>
				break;
 8003bea:	e000      	b.n	8003bee <vl53l7cx_get_ranging_data+0x25e>
				break;
 8003bec:	bf00      	nop
		}
		i += msize;
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	61bb      	str	r3, [r7, #24]
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	3304      	adds	r3, #4
 8003bfa:	61bb      	str	r3, [r7, #24]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	f4ff aeeb 	bcc.w	80039de <vl53l7cx_get_ranging_data+0x4e>

#ifndef VL53L7CX_USE_RAW_FORMAT

	/* Convert data into their real format */
#ifndef VL53L7CX_DISABLE_AMBIENT_PER_SPAD
	for(i = 0; i < (uint32_t)VL53L7CX_RESOLUTION_8X8; i++)
 8003c08:	2300      	movs	r3, #0
 8003c0a:	61bb      	str	r3, [r7, #24]
 8003c0c:	e00d      	b.n	8003c2a <vl53l7cx_get_ranging_data+0x29a>
	{
		p_results->ambient_per_spad[i] /= (uint32_t)2048;
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	0ada      	lsrs	r2, r3, #11
 8003c1a:	6839      	ldr	r1, [r7, #0]
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	440b      	add	r3, r1
 8003c22:	605a      	str	r2, [r3, #4]
	for(i = 0; i < (uint32_t)VL53L7CX_RESOLUTION_8X8; i++)
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	3301      	adds	r3, #1
 8003c28:	61bb      	str	r3, [r7, #24]
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	2b3f      	cmp	r3, #63	@ 0x3f
 8003c2e:	d9ee      	bls.n	8003c0e <vl53l7cx_get_ranging_data+0x27e>
	}
#endif

	for(i = 0; i < (uint32_t)(VL53L7CX_RESOLUTION_8X8
 8003c30:	2300      	movs	r3, #0
 8003c32:	61bb      	str	r3, [r7, #24]
 8003c34:	e056      	b.n	8003ce4 <vl53l7cx_get_ranging_data+0x354>
			*VL53L7CX_NB_TARGET_PER_ZONE); i++)
	{
#ifndef VL53L7CX_DISABLE_DISTANCE_MM
		p_results->distance_mm[i] /= 4;
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	4413      	add	r3, r2
 8003c42:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	da00      	bge.n	8003c4c <vl53l7cx_get_ranging_data+0x2bc>
 8003c4a:	3303      	adds	r3, #3
 8003c4c:	109b      	asrs	r3, r3, #2
 8003c4e:	b219      	sxth	r1, r3
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	4413      	add	r3, r2
 8003c5c:	460a      	mov	r2, r1
 8003c5e:	809a      	strh	r2, [r3, #4]
		if(p_results->distance_mm[i] < 0)
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	da07      	bge.n	8003c84 <vl53l7cx_get_ranging_data+0x2f4>
		{
			p_results->distance_mm[i] = 0;
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	4413      	add	r3, r2
 8003c80:	2200      	movs	r2, #0
 8003c82:	809a      	strh	r2, [r3, #4]
		}
#endif
#ifndef VL53L7CX_DISABLE_REFLECTANCE_PERCENT
		p_results->reflectance[i] /= (uint8_t)2;
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	4413      	add	r3, r2
 8003c8a:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	085b      	lsrs	r3, r3, #1
 8003c92:	b2d9      	uxtb	r1, r3
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	4413      	add	r3, r2
 8003c9a:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8003c9e:	460a      	mov	r2, r1
 8003ca0:	701a      	strb	r2, [r3, #0]
#endif
#ifndef VL53L7CX_DISABLE_RANGE_SIGMA_MM
		p_results->range_sigma_mm[i] /= (uint16_t)128;
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	4413      	add	r3, r2
 8003cae:	889b      	ldrh	r3, [r3, #4]
 8003cb0:	09db      	lsrs	r3, r3, #7
 8003cb2:	b299      	uxth	r1, r3
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	4413      	add	r3, r2
 8003cc0:	460a      	mov	r2, r1
 8003cc2:	809a      	strh	r2, [r3, #4]
#endif
#ifndef VL53L7CX_DISABLE_SIGNAL_PER_SPAD
		p_results->signal_per_spad[i] /= (uint32_t)2048;
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	3390      	adds	r3, #144	@ 0x90
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	0ada      	lsrs	r2, r3, #11
 8003cd2:	6839      	ldr	r1, [r7, #0]
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	3390      	adds	r3, #144	@ 0x90
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	440b      	add	r3, r1
 8003cdc:	605a      	str	r2, [r3, #4]
			*VL53L7CX_NB_TARGET_PER_ZONE); i++)
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < (uint32_t)(VL53L7CX_RESOLUTION_8X8
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	2b3f      	cmp	r3, #63	@ 0x3f
 8003ce8:	d9a5      	bls.n	8003c36 <vl53l7cx_get_ranging_data+0x2a6>
#endif
	}

	/* Set target status to 255 if no target is detected for this zone */
#ifndef VL53L7CX_DISABLE_NB_TARGET_DETECTED
	for(i = 0; i < (uint32_t)VL53L7CX_RESOLUTION_8X8; i++)
 8003cea:	2300      	movs	r3, #0
 8003cec:	61bb      	str	r3, [r7, #24]
 8003cee:	e01b      	b.n	8003d28 <vl53l7cx_get_ranging_data+0x398>
	{
		if(p_results->nb_target_detected[i] == (uint8_t)0){
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d110      	bne.n	8003d22 <vl53l7cx_get_ranging_data+0x392>
			for(j = 0; j < (uint32_t)
 8003d00:	2300      	movs	r3, #0
 8003d02:	617b      	str	r3, [r7, #20]
 8003d04:	e00a      	b.n	8003d1c <vl53l7cx_get_ranging_data+0x38c>
				VL53L7CX_NB_TARGET_PER_ZONE; j++)
			{
#ifndef VL53L7CX_DISABLE_TARGET_STATUS
				p_results->target_status
				[((uint32_t)VL53L7CX_NB_TARGET_PER_ZONE
					*(uint32_t)i) + j]=(uint8_t)255;
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	4413      	add	r3, r2
 8003d10:	22ff      	movs	r2, #255	@ 0xff
 8003d12:	f883 2484 	strb.w	r2, [r3, #1156]	@ 0x484
				VL53L7CX_NB_TARGET_PER_ZONE; j++)
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	617b      	str	r3, [r7, #20]
			for(j = 0; j < (uint32_t)
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0f1      	beq.n	8003d06 <vl53l7cx_get_ranging_data+0x376>
	for(i = 0; i < (uint32_t)VL53L7CX_RESOLUTION_8X8; i++)
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	3301      	adds	r3, #1
 8003d26:	61bb      	str	r3, [r7, #24]
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	2b3f      	cmp	r3, #63	@ 0x3f
 8003d2c:	d9e0      	bls.n	8003cf0 <vl53l7cx_get_ranging_data+0x360>
		}
	}
#endif

#ifndef VL53L7CX_DISABLE_MOTION_INDICATOR
	for(i = 0; i < (uint32_t)32; i++)
 8003d2e:	2300      	movs	r3, #0
 8003d30:	61bb      	str	r3, [r7, #24]
 8003d32:	e014      	b.n	8003d5e <vl53l7cx_get_ranging_data+0x3ce>
	{
		p_results->motion_indicator.motion[i] /= (uint32_t)65535;
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4413      	add	r3, r2
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	4a1f      	ldr	r2, [pc, #124]	@ (8003dc0 <vl53l7cx_get_ranging_data+0x430>)
 8003d44:	fba2 2303 	umull	r2, r3, r2, r3
 8003d48:	0bda      	lsrs	r2, r3, #15
 8003d4a:	6839      	ldr	r1, [r7, #0]
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	440b      	add	r3, r1
 8003d56:	609a      	str	r2, [r3, #8]
	for(i = 0; i < (uint32_t)32; i++)
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	61bb      	str	r3, [r7, #24]
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	2b1f      	cmp	r3, #31
 8003d62:	d9e7      	bls.n	8003d34 <vl53l7cx_get_ranging_data+0x3a4>

#endif

	/* Check if footer id and header id are matching. This allows to detect
	 * corrupted frames */
	header_id = ((uint16_t)(p_dev->temp_buffer[0x8])<<8) & 0xFF00U;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 3518 	ldrb.w	r3, [r3, #1304]	@ 0x518
 8003d6a:	021b      	lsls	r3, r3, #8
 8003d6c:	81fb      	strh	r3, [r7, #14]
	header_id |= ((uint16_t)(p_dev->temp_buffer[0x9])) & 0x00FFU;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 3519 	ldrb.w	r3, [r3, #1305]	@ 0x519
 8003d74:	461a      	mov	r2, r3
 8003d76:	89fb      	ldrh	r3, [r7, #14]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	81fb      	strh	r3, [r7, #14]

	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	695b      	ldr	r3, [r3, #20]
		- (uint32_t)4]) << 8) & 0xFF00U;
 8003d80:	3b04      	subs	r3, #4
	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	4413      	add	r3, r2
 8003d86:	f893 3510 	ldrb.w	r3, [r3, #1296]	@ 0x510
 8003d8a:	021b      	lsls	r3, r3, #8
 8003d8c:	81bb      	strh	r3, [r7, #12]
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	695b      	ldr	r3, [r3, #20]
		- (uint32_t)3])) & 0xFFU;
 8003d92:	3b03      	subs	r3, #3
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	4413      	add	r3, r2
 8003d98:	f893 3510 	ldrb.w	r3, [r3, #1296]	@ 0x510
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	89bb      	ldrh	r3, [r7, #12]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	81bb      	strh	r3, [r7, #12]
	if(header_id != footer_id)
 8003da4:	89fa      	ldrh	r2, [r7, #14]
 8003da6:	89bb      	ldrh	r3, [r7, #12]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d003      	beq.n	8003db4 <vl53l7cx_get_ranging_data+0x424>
	{
		status |= VL53L7CX_STATUS_CORRUPTED_FRAME;
 8003dac:	7ffb      	ldrb	r3, [r7, #31]
 8003dae:	f043 0302 	orr.w	r3, r3, #2
 8003db2:	77fb      	strb	r3, [r7, #31]
	}

	return status;
 8003db4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3720      	adds	r7, #32
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	80008001 	.word	0x80008001

08003dc4 <vl53l7cx_get_resolution>:

uint8_t vl53l7cx_get_resolution(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				*p_resolution)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L7CX_STATUS_OK;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	73fb      	strb	r3, [r7, #15]

	status |= vl53l7cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8003dd8:	2308      	movs	r3, #8
 8003dda:	f245 4250 	movw	r2, #21584	@ 0x5450
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f996 	bl	8004110 <vl53l7cx_dci_read_data>
 8003de4:	4603      	mov	r3, r0
 8003de6:	461a      	mov	r2, r3
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	73fb      	strb	r3, [r7, #15]
			VL53L7CX_DCI_ZONE_CONFIG, 8);
	*p_resolution = p_dev->temp_buffer[0x00]*p_dev->temp_buffer[0x01];
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 3511 	ldrb.w	r3, [r3, #1297]	@ 0x511
 8003dfa:	fb12 f303 	smulbb	r3, r2, r3
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	701a      	strb	r2, [r3, #0]

	return status;
 8003e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <vl53l7cx_set_resolution>:


uint8_t vl53l7cx_set_resolution(
		VL53L7CX_Configuration 		 *p_dev,
		uint8_t				resolution)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b084      	sub	sp, #16
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
 8003e16:	460b      	mov	r3, r1
 8003e18:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L7CX_STATUS_OK;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	73fb      	strb	r3, [r7, #15]

	switch(resolution){
 8003e1e:	78fb      	ldrb	r3, [r7, #3]
 8003e20:	2b10      	cmp	r3, #16
 8003e22:	d002      	beq.n	8003e2a <vl53l7cx_set_resolution+0x1c>
 8003e24:	2b40      	cmp	r3, #64	@ 0x40
 8003e26:	d055      	beq.n	8003ed4 <vl53l7cx_set_resolution+0xc6>
 8003e28:	e0a9      	b.n	8003f7e <vl53l7cx_set_resolution+0x170>
		case VL53L7CX_RESOLUTION_4X4:
			status |= vl53l7cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l7cx_dci_read_data(p_dev,
 8003e30:	2310      	movs	r3, #16
 8003e32:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f96a 	bl	8004110 <vl53l7cx_dci_read_data>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	461a      	mov	r2, r3
 8003e40:	7bfb      	ldrb	r3, [r7, #15]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 64;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2240      	movs	r2, #64	@ 0x40
 8003e4a:	f883 2514 	strb.w	r2, [r3, #1300]	@ 0x514
			p_dev->temp_buffer[0x06] = 64;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2240      	movs	r2, #64	@ 0x40
 8003e52:	f883 2516 	strb.w	r2, [r3, #1302]	@ 0x516
			p_dev->temp_buffer[0x09] = 4;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2204      	movs	r2, #4
 8003e5a:	f883 2519 	strb.w	r2, [r3, #1305]	@ 0x519
			status |= vl53l7cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l7cx_dci_write_data(p_dev,
 8003e64:	2310      	movs	r3, #16
 8003e66:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f9da 	bl	8004224 <vl53l7cx_dci_write_data>
 8003e70:	4603      	mov	r3, r0
 8003e72:	461a      	mov	r2, r3
 8003e74:	7bfb      	ldrb	r3, [r7, #15]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_DSS_CONFIG, 16);

			status |= vl53l7cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l7cx_dci_read_data(p_dev,
 8003e80:	2308      	movs	r3, #8
 8003e82:	f245 4250 	movw	r2, #21584	@ 0x5450
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f942 	bl	8004110 <vl53l7cx_dci_read_data>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	461a      	mov	r2, r3
 8003e90:	7bfb      	ldrb	r3, [r7, #15]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 4;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2204      	movs	r2, #4
 8003e9a:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
			p_dev->temp_buffer[0x01] = 4;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2204      	movs	r2, #4
 8003ea2:	f883 2511 	strb.w	r2, [r3, #1297]	@ 0x511
			p_dev->temp_buffer[0x04] = 8;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2208      	movs	r2, #8
 8003eaa:	f883 2514 	strb.w	r2, [r3, #1300]	@ 0x514
			p_dev->temp_buffer[0x05] = 8;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2208      	movs	r2, #8
 8003eb2:	f883 2515 	strb.w	r2, [r3, #1301]	@ 0x515
			status |= vl53l7cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l7cx_dci_write_data(p_dev,
 8003ebc:	2308      	movs	r3, #8
 8003ebe:	f245 4250 	movw	r2, #21584	@ 0x5450
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f9ae 	bl	8004224 <vl53l7cx_dci_write_data>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	461a      	mov	r2, r3
 8003ecc:	7bfb      	ldrb	r3, [r7, #15]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_ZONE_CONFIG, 8);
			break;
 8003ed2:	e057      	b.n	8003f84 <vl53l7cx_set_resolution+0x176>

		case VL53L7CX_RESOLUTION_8X8:
			status |= vl53l7cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l7cx_dci_read_data(p_dev,
 8003eda:	2310      	movs	r3, #16
 8003edc:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 f915 	bl	8004110 <vl53l7cx_dci_read_data>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	461a      	mov	r2, r3
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 16;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2210      	movs	r2, #16
 8003ef4:	f883 2514 	strb.w	r2, [r3, #1300]	@ 0x514
			p_dev->temp_buffer[0x06] = 16;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2210      	movs	r2, #16
 8003efc:	f883 2516 	strb.w	r2, [r3, #1302]	@ 0x516
			p_dev->temp_buffer[0x09] = 1;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2519 	strb.w	r2, [r3, #1305]	@ 0x519
			status |= vl53l7cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l7cx_dci_write_data(p_dev,
 8003f0e:	2310      	movs	r3, #16
 8003f10:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 f985 	bl	8004224 <vl53l7cx_dci_write_data>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	7bfb      	ldrb	r3, [r7, #15]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_DSS_CONFIG, 16);

			status |= vl53l7cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l7cx_dci_read_data(p_dev,
 8003f2a:	2308      	movs	r3, #8
 8003f2c:	f245 4250 	movw	r2, #21584	@ 0x5450
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 f8ed 	bl	8004110 <vl53l7cx_dci_read_data>
 8003f36:	4603      	mov	r3, r0
 8003f38:	461a      	mov	r2, r3
 8003f3a:	7bfb      	ldrb	r3, [r7, #15]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 8;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2208      	movs	r2, #8
 8003f44:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
			p_dev->temp_buffer[0x01] = 8;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2208      	movs	r2, #8
 8003f4c:	f883 2511 	strb.w	r2, [r3, #1297]	@ 0x511
			p_dev->temp_buffer[0x04] = 4;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2204      	movs	r2, #4
 8003f54:	f883 2514 	strb.w	r2, [r3, #1300]	@ 0x514
			p_dev->temp_buffer[0x05] = 4;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2204      	movs	r2, #4
 8003f5c:	f883 2515 	strb.w	r2, [r3, #1301]	@ 0x515
			status |= vl53l7cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l7cx_dci_write_data(p_dev,
 8003f66:	2308      	movs	r3, #8
 8003f68:	f245 4250 	movw	r2, #21584	@ 0x5450
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 f959 	bl	8004224 <vl53l7cx_dci_write_data>
 8003f72:	4603      	mov	r3, r0
 8003f74:	461a      	mov	r2, r3
 8003f76:	7bfb      	ldrb	r3, [r7, #15]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_ZONE_CONFIG, 8);

			break;
 8003f7c:	e002      	b.n	8003f84 <vl53l7cx_set_resolution+0x176>

		default:
			status = VL53L7CX_STATUS_INVALID_PARAM;
 8003f7e:	237f      	movs	r3, #127	@ 0x7f
 8003f80:	73fb      	strb	r3, [r7, #15]
			break;
 8003f82:	bf00      	nop
		}

	status |= _vl53l7cx_send_offset_data(p_dev, resolution);
 8003f84:	78fb      	ldrb	r3, [r7, #3]
 8003f86:	4619      	mov	r1, r3
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7fe f9eb 	bl	8002364 <_vl53l7cx_send_offset_data>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	461a      	mov	r2, r3
 8003f92:	7bfb      	ldrb	r3, [r7, #15]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	73fb      	strb	r3, [r7, #15]
	status |= _vl53l7cx_send_xtalk_data(p_dev, resolution);
 8003f98:	78fb      	ldrb	r3, [r7, #3]
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7fe fbad 	bl	80026fc <_vl53l7cx_send_xtalk_data>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	7bfb      	ldrb	r3, [r7, #15]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	73fb      	strb	r3, [r7, #15]

	return status;
 8003fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <vl53l7cx_set_ranging_frequency_hz>:
}

uint8_t vl53l7cx_set_ranging_frequency_hz(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				frequency_hz)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b088      	sub	sp, #32
 8003fba:	af04      	add	r7, sp, #16
 8003fbc:	6078      	str	r0, [r7, #4]
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L7CX_STATUS_OK;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	73fb      	strb	r3, [r7, #15]

	status |= vl53l7cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8003fcc:	2301      	movs	r3, #1
 8003fce:	9302      	str	r3, [sp, #8]
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	9301      	str	r3, [sp, #4]
 8003fd4:	1cfb      	adds	r3, r7, #3
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	2304      	movs	r3, #4
 8003fda:	f245 4258 	movw	r2, #21592	@ 0x5458
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f9be 	bl	8004360 <vl53l7cx_dci_replace_data>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	7bfb      	ldrb	r3, [r7, #15]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_FREQ_HZ, 4,
					(uint8_t*)&frequency_hz, 1, 0x01);

	return status;
 8003fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <vl53l7cx_set_integration_time_ms>:
}

uint8_t vl53l7cx_set_integration_time_ms(
		VL53L7CX_Configuration		*p_dev,
		uint32_t			integration_time_ms)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af04      	add	r7, sp, #16
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L7CX_STATUS_OK;
 8004002:	2300      	movs	r3, #0
 8004004:	73fb      	strb	r3, [r7, #15]
        uint32_t integration = integration_time_ms;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	60bb      	str	r3, [r7, #8]

	/* Integration time must be between 2ms and 1000ms */
	if((integration < (uint32_t)2)
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d903      	bls.n	8004018 <vl53l7cx_set_integration_time_ms+0x20>
           || (integration > (uint32_t)1000))
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004016:	d904      	bls.n	8004022 <vl53l7cx_set_integration_time_ms+0x2a>
	{
		status |= VL53L7CX_STATUS_INVALID_PARAM;
 8004018:	7bfb      	ldrb	r3, [r7, #15]
 800401a:	f043 037f 	orr.w	r3, r3, #127	@ 0x7f
 800401e:	73fb      	strb	r3, [r7, #15]
 8004020:	e01a      	b.n	8004058 <vl53l7cx_set_integration_time_ms+0x60>
	}else
	{
		integration *= (uint32_t)1000;
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004028:	fb02 f303 	mul.w	r3, r2, r3
 800402c:	60bb      	str	r3, [r7, #8]

		status |= vl53l7cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8004034:	2300      	movs	r3, #0
 8004036:	9302      	str	r3, [sp, #8]
 8004038:	2304      	movs	r3, #4
 800403a:	9301      	str	r3, [sp, #4]
 800403c:	f107 0308 	add.w	r3, r7, #8
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	2314      	movs	r3, #20
 8004044:	f245 425c 	movw	r2, #21596	@ 0x545c
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 f989 	bl	8004360 <vl53l7cx_dci_replace_data>
 800404e:	4603      	mov	r3, r0
 8004050:	461a      	mov	r2, r3
 8004052:	7bfb      	ldrb	r3, [r7, #15]
 8004054:	4313      	orrs	r3, r2
 8004056:	73fb      	strb	r3, [r7, #15]
				VL53L7CX_DCI_INT_TIME, 20,
				(uint8_t*)&integration, 4, 0x00);
	}

	return status;
 8004058:	7bfb      	ldrb	r3, [r7, #15]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <vl53l7cx_set_ranging_mode>:
}

uint8_t vl53l7cx_set_ranging_mode(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				ranging_mode)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b084      	sub	sp, #16
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
 800406a:	460b      	mov	r3, r1
 800406c:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L7CX_STATUS_OK;
 800406e:	2300      	movs	r3, #0
 8004070:	73fb      	strb	r3, [r7, #15]
	uint32_t single_range = 0x00;
 8004072:	2300      	movs	r3, #0
 8004074:	60bb      	str	r3, [r7, #8]

	status |= vl53l7cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 800407c:	2308      	movs	r3, #8
 800407e:	f64a 5230 	movw	r2, #44336	@ 0xad30
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f844 	bl	8004110 <vl53l7cx_dci_read_data>
 8004088:	4603      	mov	r3, r0
 800408a:	461a      	mov	r2, r3
 800408c:	7bfb      	ldrb	r3, [r7, #15]
 800408e:	4313      	orrs	r3, r2
 8004090:	73fb      	strb	r3, [r7, #15]
			VL53L7CX_DCI_RANGING_MODE, 8);

	switch(ranging_mode)
 8004092:	78fb      	ldrb	r3, [r7, #3]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d002      	beq.n	800409e <vl53l7cx_set_ranging_mode+0x3c>
 8004098:	2b03      	cmp	r3, #3
 800409a:	d00b      	beq.n	80040b4 <vl53l7cx_set_ranging_mode+0x52>
 800409c:	e015      	b.n	80040ca <vl53l7cx_set_ranging_mode+0x68>
	{
		case VL53L7CX_RANGING_MODE_CONTINUOUS:
			p_dev->temp_buffer[0x01] = 0x1;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2511 	strb.w	r2, [r3, #1297]	@ 0x511
			p_dev->temp_buffer[0x03] = 0x3;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2203      	movs	r2, #3
 80040aa:	f883 2513 	strb.w	r2, [r3, #1299]	@ 0x513
			single_range = 0x00;
 80040ae:	2300      	movs	r3, #0
 80040b0:	60bb      	str	r3, [r7, #8]
			break;
 80040b2:	e00d      	b.n	80040d0 <vl53l7cx_set_ranging_mode+0x6e>

		case VL53L7CX_RANGING_MODE_AUTONOMOUS:
			p_dev->temp_buffer[0x01] = 0x3;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2203      	movs	r2, #3
 80040b8:	f883 2511 	strb.w	r2, [r3, #1297]	@ 0x511
			p_dev->temp_buffer[0x03] = 0x2;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 2513 	strb.w	r2, [r3, #1299]	@ 0x513
			single_range = 0x01;
 80040c4:	2301      	movs	r3, #1
 80040c6:	60bb      	str	r3, [r7, #8]
			break;
 80040c8:	e002      	b.n	80040d0 <vl53l7cx_set_ranging_mode+0x6e>

		default:
			status = VL53L7CX_STATUS_INVALID_PARAM;
 80040ca:	237f      	movs	r3, #127	@ 0x7f
 80040cc:	73fb      	strb	r3, [r7, #15]
			break;
 80040ce:	bf00      	nop
	}

	status |= vl53l7cx_dci_write_data(p_dev, p_dev->temp_buffer,
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 80040d6:	2308      	movs	r3, #8
 80040d8:	f64a 5230 	movw	r2, #44336	@ 0xad30
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f8a1 	bl	8004224 <vl53l7cx_dci_write_data>
 80040e2:	4603      	mov	r3, r0
 80040e4:	461a      	mov	r2, r3
 80040e6:	7bfb      	ldrb	r3, [r7, #15]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	73fb      	strb	r3, [r7, #15]
			VL53L7CX_DCI_RANGING_MODE, (uint16_t)8);

	status |= vl53l7cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 80040ec:	f107 0108 	add.w	r1, r7, #8
 80040f0:	2304      	movs	r3, #4
 80040f2:	f64d 1264 	movw	r2, #55652	@ 0xd964
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f894 	bl	8004224 <vl53l7cx_dci_write_data>
 80040fc:	4603      	mov	r3, r0
 80040fe:	461a      	mov	r2, r3
 8004100:	7bfb      	ldrb	r3, [r7, #15]
 8004102:	4313      	orrs	r3, r2
 8004104:	73fb      	strb	r3, [r7, #15]
			VL53L7CX_DCI_SINGLE_RANGE,
                        (uint16_t)sizeof(single_range));

	return status;
 8004106:	7bfb      	ldrb	r3, [r7, #15]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <vl53l7cx_dci_read_data>:
uint8_t vl53l7cx_dci_read_data(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b08c      	sub	sp, #48	@ 0x30
 8004114:	af02      	add	r7, sp, #8
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
 800411c:	807b      	strh	r3, [r7, #2]
	int16_t i;
	uint8_t status = VL53L7CX_STATUS_OK;
 800411e:	2300      	movs	r3, #0
 8004120:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        uint32_t rd_size = (uint32_t) data_size + (uint32_t)12;
 8004124:	887b      	ldrh	r3, [r7, #2]
 8004126:	330c      	adds	r3, #12
 8004128:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = {0x00, 0x00, 0x00, 0x00,
 800412a:	4a3d      	ldr	r2, [pc, #244]	@ (8004220 <vl53l7cx_dci_read_data+0x110>)
 800412c:	f107 0314 	add.w	r3, r7, #20
 8004130:	ca07      	ldmia	r2, {r0, r1, r2}
 8004132:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x00, 0x00, 0x0f,
			0x00, 0x02, 0x00, 0x08};

	/* Check if tmp buffer is large enough */
	if((data_size + (uint16_t)12)>(uint16_t)VL53L7CX_TEMPORARY_BUFFER_SIZE)
 8004136:	887b      	ldrh	r3, [r7, #2]
 8004138:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 800413c:	d903      	bls.n	8004146 <vl53l7cx_dci_read_data+0x36>
	{
		status |= VL53L7CX_STATUS_ERROR;
 800413e:	23ff      	movs	r3, #255	@ 0xff
 8004140:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8004144:	e065      	b.n	8004212 <vl53l7cx_dci_read_data+0x102>
	}
	else
	{
		cmd[0] = (uint8_t)(index >> 8);	
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	0a1b      	lsrs	r3, r3, #8
 800414a:	b2db      	uxtb	r3, r3
 800414c:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(index & (uint32_t)0xff);			
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	b2db      	uxtb	r3, r3
 8004152:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)((data_size & (uint16_t)0xff0) >> 4);
 8004154:	887b      	ldrh	r3, [r7, #2]
 8004156:	111b      	asrs	r3, r3, #4
 8004158:	b2db      	uxtb	r3, r3
 800415a:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 800415c:	887b      	ldrh	r3, [r7, #2]
 800415e:	b2db      	uxtb	r3, r3
 8004160:	011b      	lsls	r3, r3, #4
 8004162:	b2db      	uxtb	r3, r3
 8004164:	75fb      	strb	r3, [r7, #23]

	/* Request data reading from FW */
		status |= VL53L7CX_WrMulti(&(p_dev->platform),
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f107 0214 	add.w	r2, r7, #20
 800416c:	230c      	movs	r3, #12
 800416e:	f642 71f4 	movw	r1, #12276	@ 0x2ff4
 8004172:	f7fd faba 	bl	80016ea <VL53L7CX_WrMulti>
 8004176:	4603      	mov	r3, r0
 8004178:	461a      	mov	r2, r3
 800417a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800417e:	4313      	orrs	r3, r2
 8004180:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			(VL53L7CX_UI_CMD_END-(uint16_t)11),cmd, sizeof(cmd));
		status |= _vl53l7cx_poll_for_answer(p_dev, 4, 1,
 8004184:	2303      	movs	r3, #3
 8004186:	9301      	str	r3, [sp, #4]
 8004188:	23ff      	movs	r3, #255	@ 0xff
 800418a:	9300      	str	r3, [sp, #0]
 800418c:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8004190:	2201      	movs	r2, #1
 8004192:	2104      	movs	r1, #4
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f7fe f854 	bl	8002242 <_vl53l7cx_poll_for_answer>
 800419a:	4603      	mov	r3, r0
 800419c:	461a      	mov	r2, r3
 800419e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80041a2:	4313      	orrs	r3, r2
 80041a4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			VL53L7CX_UI_CMD_STATUS,
			0xff, 0x03);

	/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= VL53L7CX_RdMulti(&(p_dev->platform), VL53L7CX_UI_CMD_START,
 80041a8:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, rd_size);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
		status |= VL53L7CX_RdMulti(&(p_dev->platform), VL53L7CX_UI_CMD_START,
 80041b0:	6a3b      	ldr	r3, [r7, #32]
 80041b2:	f642 4104 	movw	r1, #11268	@ 0x2c04
 80041b6:	f7fd faaf 	bl	8001718 <VL53L7CX_RdMulti>
 80041ba:	4603      	mov	r3, r0
 80041bc:	461a      	mov	r2, r3
 80041be:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80041c2:	4313      	orrs	r3, r2
 80041c4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		VL53L7CX_SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t)12);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 80041ce:	887b      	ldrh	r3, [r7, #2]
 80041d0:	330c      	adds	r3, #12
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	4619      	mov	r1, r3
 80041d6:	4610      	mov	r0, r2
 80041d8:	f7fd fab5 	bl	8001746 <VL53L7CX_SwapBuffer>

	/* Copy data from FW into input structure (-4 bytes to remove header) */
		for(i = 0 ; i < (int16_t)data_size;i++){
 80041dc:	2300      	movs	r3, #0
 80041de:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80041e0:	e011      	b.n	8004206 <vl53l7cx_dci_read_data+0xf6>
			data[i] = p_dev->temp_buffer[i + 4];
 80041e2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80041e6:	1d1a      	adds	r2, r3, #4
 80041e8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80041ec:	68b9      	ldr	r1, [r7, #8]
 80041ee:	440b      	add	r3, r1
 80041f0:	68f9      	ldr	r1, [r7, #12]
 80041f2:	440a      	add	r2, r1
 80041f4:	f892 2510 	ldrb.w	r2, [r2, #1296]	@ 0x510
 80041f8:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < (int16_t)data_size;i++){
 80041fa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80041fe:	b29b      	uxth	r3, r3
 8004200:	3301      	adds	r3, #1
 8004202:	b29b      	uxth	r3, r3
 8004204:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004206:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800420a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800420e:	429a      	cmp	r2, r3
 8004210:	dbe7      	blt.n	80041e2 <vl53l7cx_dci_read_data+0xd2>
		}
	}

	return status;
 8004212:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
}
 8004216:	4618      	mov	r0, r3
 8004218:	3728      	adds	r7, #40	@ 0x28
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	08008444 	.word	0x08008444

08004224 <vl53l7cx_dci_write_data>:
uint8_t vl53l7cx_dci_write_data(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b08c      	sub	sp, #48	@ 0x30
 8004228:	af02      	add	r7, sp, #8
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
 8004230:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L7CX_STATUS_OK;
 8004232:	2300      	movs	r3, #0
 8004234:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 8004238:	2300      	movs	r3, #0
 800423a:	61fb      	str	r3, [r7, #28]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 800423c:	2300      	movs	r3, #0
 800423e:	753b      	strb	r3, [r7, #20]
 8004240:	2300      	movs	r3, #0
 8004242:	757b      	strb	r3, [r7, #21]
 8004244:	2300      	movs	r3, #0
 8004246:	75bb      	strb	r3, [r7, #22]
 8004248:	230f      	movs	r3, #15
 800424a:	75fb      	strb	r3, [r7, #23]
 800424c:	2305      	movs	r3, #5
 800424e:	763b      	strb	r3, [r7, #24]
 8004250:	2301      	movs	r3, #1
 8004252:	767b      	strb	r3, [r7, #25]
			(uint8_t)((data_size + (uint16_t)8) >> 8), 
 8004254:	887b      	ldrh	r3, [r7, #2]
 8004256:	3308      	adds	r3, #8
 8004258:	121b      	asrs	r3, r3, #8
 800425a:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 800425c:	76bb      	strb	r3, [r7, #26]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 800425e:	887b      	ldrh	r3, [r7, #2]
 8004260:	b2db      	uxtb	r3, r3
 8004262:	3308      	adds	r3, #8
 8004264:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8004266:	76fb      	strb	r3, [r7, #27]

	uint16_t address = (uint16_t)VL53L7CX_UI_CMD_END -
 8004268:	887b      	ldrh	r3, [r7, #2]
 800426a:	f5c3 533f 	rsb	r3, r3, #12224	@ 0x2fc0
 800426e:	3334      	adds	r3, #52	@ 0x34
 8004270:	847b      	strh	r3, [r7, #34]	@ 0x22
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12) 
 8004272:	887b      	ldrh	r3, [r7, #2]
 8004274:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 8004278:	d903      	bls.n	8004282 <vl53l7cx_dci_write_data+0x5e>
           > (uint16_t)VL53L7CX_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53L7CX_STATUS_ERROR;
 800427a:	23ff      	movs	r3, #255	@ 0xff
 800427c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004280:	e068      	b.n	8004354 <vl53l7cx_dci_write_data+0x130>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	0a1b      	lsrs	r3, r3, #8
 8004286:	b2db      	uxtb	r3, r3
 8004288:	773b      	strb	r3, [r7, #28]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	b2db      	uxtb	r3, r3
 800428e:	777b      	strb	r3, [r7, #29]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 8004290:	887b      	ldrh	r3, [r7, #2]
 8004292:	111b      	asrs	r3, r3, #4
 8004294:	b2db      	uxtb	r3, r3
 8004296:	77bb      	strb	r3, [r7, #30]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8004298:	887b      	ldrh	r3, [r7, #2]
 800429a:	b2db      	uxtb	r3, r3
 800429c:	011b      	lsls	r3, r3, #4
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	77fb      	strb	r3, [r7, #31]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		VL53L7CX_SwapBuffer(data, data_size);
 80042a2:	887b      	ldrh	r3, [r7, #2]
 80042a4:	4619      	mov	r1, r3
 80042a6:	68b8      	ldr	r0, [r7, #8]
 80042a8:	f7fd fa4d 	bl	8001746 <VL53L7CX_SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 80042ac:	887b      	ldrh	r3, [r7, #2]
 80042ae:	3b01      	subs	r3, #1
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80042b4:	e012      	b.n	80042dc <vl53l7cx_dci_write_data+0xb8>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 80042b6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	441a      	add	r2, r3
 80042be:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80042c2:	3304      	adds	r3, #4
 80042c4:	7811      	ldrb	r1, [r2, #0]
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	4413      	add	r3, r2
 80042ca:	460a      	mov	r2, r1
 80042cc:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 80042d0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	3b01      	subs	r3, #1
 80042d8:	b29b      	uxth	r3, r3
 80042da:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80042dc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	dae8      	bge.n	80042b6 <vl53l7cx_dci_write_data+0x92>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 80042ea:	69fa      	ldr	r2, [r7, #28]
 80042ec:	601a      	str	r2, [r3, #0]
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 80042ee:	887b      	ldrh	r3, [r7, #2]
 80042f0:	3304      	adds	r3, #4
 80042f2:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	4413      	add	r3, r2
 80042fa:	461a      	mov	r2, r3
 80042fc:	f107 0314 	add.w	r3, r7, #20
 8004300:	cb03      	ldmia	r3!, {r0, r1}
 8004302:	6010      	str	r0, [r2, #0]
 8004304:	6051      	str	r1, [r2, #4]
			footer, sizeof(footer));

	/* Send data to FW */
		status |= VL53L7CX_WrMulti(&(p_dev->platform),address,
 8004306:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 800430e:	887b      	ldrh	r3, [r7, #2]
		status |= VL53L7CX_WrMulti(&(p_dev->platform),address,
 8004310:	330c      	adds	r3, #12
 8004312:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8004314:	f7fd f9e9 	bl	80016ea <VL53L7CX_WrMulti>
 8004318:	4603      	mov	r3, r0
 800431a:	461a      	mov	r2, r3
 800431c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004320:	4313      	orrs	r3, r2
 8004322:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		status |= _vl53l7cx_poll_for_answer(p_dev, 4, 1,
 8004326:	2303      	movs	r3, #3
 8004328:	9301      	str	r3, [sp, #4]
 800432a:	23ff      	movs	r3, #255	@ 0xff
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8004332:	2201      	movs	r2, #1
 8004334:	2104      	movs	r1, #4
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f7fd ff83 	bl	8002242 <_vl53l7cx_poll_for_answer>
 800433c:	4603      	mov	r3, r0
 800433e:	461a      	mov	r2, r3
 8004340:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004344:	4313      	orrs	r3, r2
 8004346:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L7CX_UI_CMD_STATUS, 0xff, 0x03);

		VL53L7CX_SwapBuffer(data, data_size);
 800434a:	887b      	ldrh	r3, [r7, #2]
 800434c:	4619      	mov	r1, r3
 800434e:	68b8      	ldr	r0, [r7, #8]
 8004350:	f7fd f9f9 	bl	8001746 <VL53L7CX_SwapBuffer>
	}

	return status;
 8004354:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004358:	4618      	mov	r0, r3
 800435a:	3728      	adds	r7, #40	@ 0x28
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <vl53l7cx_dci_replace_data>:
		uint32_t			index,
		uint16_t			data_size,
		uint8_t				*new_data,
		uint16_t			new_data_size,
		uint16_t			new_data_pos)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
 800436c:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L7CX_STATUS_OK;
 800436e:	2300      	movs	r3, #0
 8004370:	75fb      	strb	r3, [r7, #23]

	status |= vl53l7cx_dci_read_data(p_dev, data, index, data_size);
 8004372:	887b      	ldrh	r3, [r7, #2]
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	68b9      	ldr	r1, [r7, #8]
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f7ff fec9 	bl	8004110 <vl53l7cx_dci_read_data>
 800437e:	4603      	mov	r3, r0
 8004380:	461a      	mov	r2, r3
 8004382:	7dfb      	ldrb	r3, [r7, #23]
 8004384:	4313      	orrs	r3, r2
 8004386:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(&(data[new_data_pos]), new_data, new_data_size);
 8004388:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	4413      	add	r3, r2
 800438e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004390:	6a39      	ldr	r1, [r7, #32]
 8004392:	4618      	mov	r0, r3
 8004394:	f003 f9bf 	bl	8007716 <memcpy>
	status |= vl53l7cx_dci_write_data(p_dev, data, index, data_size);
 8004398:	887b      	ldrh	r3, [r7, #2]
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	68b9      	ldr	r1, [r7, #8]
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f7ff ff40 	bl	8004224 <vl53l7cx_dci_write_data>
 80043a4:	4603      	mov	r3, r0
 80043a6:	461a      	mov	r2, r3
 80043a8:	7dfb      	ldrb	r3, [r7, #23]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	75fb      	strb	r3, [r7, #23]

	return status;
 80043ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3718      	adds	r7, #24
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <vl53l7cx_set_detection_thresholds_enable>:
}

uint8_t vl53l7cx_set_detection_thresholds_enable(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				enabled)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b088      	sub	sp, #32
 80043bc:	af04      	add	r7, sp, #16
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	460b      	mov	r3, r1
 80043c2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp, status = VL53L7CX_STATUS_OK;
 80043c4:	2300      	movs	r3, #0
 80043c6:	73fb      	strb	r3, [r7, #15]
	uint8_t grp_global_config[] = {0x01, 0x00, 0x01, 0x00};
 80043c8:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80043cc:	60bb      	str	r3, [r7, #8]

	if(enabled == (uint8_t)1)
 80043ce:	78fb      	ldrb	r3, [r7, #3]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d104      	bne.n	80043de <vl53l7cx_set_detection_thresholds_enable+0x26>
	{
		grp_global_config[0x01] = 0x01;
 80043d4:	2301      	movs	r3, #1
 80043d6:	727b      	strb	r3, [r7, #9]
		tmp = 0x04;
 80043d8:	2304      	movs	r3, #4
 80043da:	73bb      	strb	r3, [r7, #14]
 80043dc:	e003      	b.n	80043e6 <vl53l7cx_set_detection_thresholds_enable+0x2e>
	}
	else
	{
		grp_global_config[0x01] = 0x00;
 80043de:	2300      	movs	r3, #0
 80043e0:	727b      	strb	r3, [r7, #9]
		tmp = 0x0C;
 80043e2:	230c      	movs	r3, #12
 80043e4:	73bb      	strb	r3, [r7, #14]
	}

	/* Set global interrupt config */
	status |= vl53l7cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 80043ec:	2300      	movs	r3, #0
 80043ee:	9302      	str	r3, [sp, #8]
 80043f0:	2304      	movs	r3, #4
 80043f2:	9301      	str	r3, [sp, #4]
 80043f4:	f107 0308 	add.w	r3, r7, #8
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	2308      	movs	r3, #8
 80043fc:	f24b 62e0 	movw	r2, #46816	@ 0xb6e0
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7ff ffad 	bl	8004360 <vl53l7cx_dci_replace_data>
 8004406:	4603      	mov	r3, r0
 8004408:	461a      	mov	r2, r3
 800440a:	7bfb      	ldrb	r3, [r7, #15]
 800440c:	4313      	orrs	r3, r2
 800440e:	73fb      	strb	r3, [r7, #15]
			VL53L7CX_DCI_DET_THRESH_GLOBAL_CONFIG, 8,
			(uint8_t*)&grp_global_config, 4, 0x00);

	/* Update interrupt config */
	status |= vl53l7cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8004416:	2311      	movs	r3, #17
 8004418:	9302      	str	r3, [sp, #8]
 800441a:	2301      	movs	r3, #1
 800441c:	9301      	str	r3, [sp, #4]
 800441e:	f107 030e 	add.w	r3, r7, #14
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	2314      	movs	r3, #20
 8004426:	f245 4288 	movw	r2, #21640	@ 0x5488
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7ff ff98 	bl	8004360 <vl53l7cx_dci_replace_data>
 8004430:	4603      	mov	r3, r0
 8004432:	461a      	mov	r2, r3
 8004434:	7bfb      	ldrb	r3, [r7, #15]
 8004436:	4313      	orrs	r3, r2
 8004438:	73fb      	strb	r3, [r7, #15]
			VL53L7CX_DCI_DET_THRESH_CONFIG, 20,
			(uint8_t*)&tmp, 1, 0x11);

	return status;
 800443a:	7bfb      	ldrb	r3, [r7, #15]
}
 800443c:	4618      	mov	r0, r3
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <vl53l7cx_set_detection_thresholds>:
}

uint8_t vl53l7cx_set_detection_thresholds(
		VL53L7CX_Configuration			*p_dev,
		VL53L7CX_DetectionThresholds	*p_thresholds)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
	uint8_t i, status = VL53L7CX_STATUS_OK;
 800444e:	2300      	movs	r3, #0
 8004450:	75bb      	strb	r3, [r7, #22]
	uint8_t grp_valid_target_cfg[] = {0x05, 0x05, 0x05, 0x05,
 8004452:	4aa7      	ldr	r2, [pc, #668]	@ (80046f0 <vl53l7cx_set_detection_thresholds+0x2ac>)
 8004454:	f107 030c 	add.w	r3, r7, #12
 8004458:	e892 0003 	ldmia.w	r2, {r0, r1}
 800445c:	e883 0003 	stmia.w	r3, {r0, r1}
					0x05, 0x05, 0x05, 0x05};

	for(i = 0; i < (uint8_t) VL53L7CX_NB_THRESHOLDS; i++)
 8004460:	2300      	movs	r3, #0
 8004462:	75fb      	strb	r3, [r7, #23]
 8004464:	e120      	b.n	80046a8 <vl53l7cx_set_detection_thresholds+0x264>
	{
		switch(p_thresholds->measurement)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	7a1b      	ldrb	r3, [r3, #8]
 800446a:	3b01      	subs	r3, #1
 800446c:	2b12      	cmp	r3, #18
 800446e:	f200 8117 	bhi.w	80046a0 <vl53l7cx_set_detection_thresholds+0x25c>
 8004472:	a201      	add	r2, pc, #4	@ (adr r2, 8004478 <vl53l7cx_set_detection_thresholds+0x34>)
 8004474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004478:	080044c5 	.word	0x080044c5
 800447c:	08004513 	.word	0x08004513
 8004480:	080046a1 	.word	0x080046a1
 8004484:	08004561 	.word	0x08004561
 8004488:	080046a1 	.word	0x080046a1
 800448c:	080046a1 	.word	0x080046a1
 8004490:	080046a1 	.word	0x080046a1
 8004494:	080045af 	.word	0x080045af
 8004498:	080046a1 	.word	0x080046a1
 800449c:	080046a1 	.word	0x080046a1
 80044a0:	080046a1 	.word	0x080046a1
 80044a4:	080046a1 	.word	0x080046a1
 80044a8:	080045fd 	.word	0x080045fd
 80044ac:	080046a1 	.word	0x080046a1
 80044b0:	080046a1 	.word	0x080046a1
 80044b4:	080046a1 	.word	0x080046a1
 80044b8:	080046a1 	.word	0x080046a1
 80044bc:	080046a1 	.word	0x080046a1
 80044c0:	0800464b 	.word	0x0800464b
		{
			case VL53L7CX_DISTANCE_MM:
				p_thresholds[i].param_low_thresh  *= 4;
 80044c4:	7dfa      	ldrb	r2, [r7, #23]
 80044c6:	4613      	mov	r3, r2
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	4413      	add	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	461a      	mov	r2, r3
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	4413      	add	r3, r2
 80044d4:	6819      	ldr	r1, [r3, #0]
 80044d6:	7dfa      	ldrb	r2, [r7, #23]
 80044d8:	4613      	mov	r3, r2
 80044da:	005b      	lsls	r3, r3, #1
 80044dc:	4413      	add	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	461a      	mov	r2, r3
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	4413      	add	r3, r2
 80044e6:	008a      	lsls	r2, r1, #2
 80044e8:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 4;
 80044ea:	7dfa      	ldrb	r2, [r7, #23]
 80044ec:	4613      	mov	r3, r2
 80044ee:	005b      	lsls	r3, r3, #1
 80044f0:	4413      	add	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	461a      	mov	r2, r3
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	4413      	add	r3, r2
 80044fa:	6859      	ldr	r1, [r3, #4]
 80044fc:	7dfa      	ldrb	r2, [r7, #23]
 80044fe:	4613      	mov	r3, r2
 8004500:	005b      	lsls	r3, r3, #1
 8004502:	4413      	add	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	461a      	mov	r2, r3
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	4413      	add	r3, r2
 800450c:	008a      	lsls	r2, r1, #2
 800450e:	605a      	str	r2, [r3, #4]
				break;
 8004510:	e0c7      	b.n	80046a2 <vl53l7cx_set_detection_thresholds+0x25e>
			case VL53L7CX_SIGNAL_PER_SPAD_KCPS:
				p_thresholds[i].param_low_thresh  *= 2048;
 8004512:	7dfa      	ldrb	r2, [r7, #23]
 8004514:	4613      	mov	r3, r2
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	4413      	add	r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	461a      	mov	r2, r3
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	4413      	add	r3, r2
 8004522:	6819      	ldr	r1, [r3, #0]
 8004524:	7dfa      	ldrb	r2, [r7, #23]
 8004526:	4613      	mov	r3, r2
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	4413      	add	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	461a      	mov	r2, r3
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	4413      	add	r3, r2
 8004534:	02ca      	lsls	r2, r1, #11
 8004536:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 2048;
 8004538:	7dfa      	ldrb	r2, [r7, #23]
 800453a:	4613      	mov	r3, r2
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	4413      	add	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	461a      	mov	r2, r3
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	4413      	add	r3, r2
 8004548:	6859      	ldr	r1, [r3, #4]
 800454a:	7dfa      	ldrb	r2, [r7, #23]
 800454c:	4613      	mov	r3, r2
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	4413      	add	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	461a      	mov	r2, r3
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	4413      	add	r3, r2
 800455a:	02ca      	lsls	r2, r1, #11
 800455c:	605a      	str	r2, [r3, #4]
				break;
 800455e:	e0a0      	b.n	80046a2 <vl53l7cx_set_detection_thresholds+0x25e>
			case VL53L7CX_RANGE_SIGMA_MM:
				p_thresholds[i].param_low_thresh  *= 128;
 8004560:	7dfa      	ldrb	r2, [r7, #23]
 8004562:	4613      	mov	r3, r2
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	4413      	add	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	461a      	mov	r2, r3
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	4413      	add	r3, r2
 8004570:	6819      	ldr	r1, [r3, #0]
 8004572:	7dfa      	ldrb	r2, [r7, #23]
 8004574:	4613      	mov	r3, r2
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	4413      	add	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	461a      	mov	r2, r3
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	4413      	add	r3, r2
 8004582:	01ca      	lsls	r2, r1, #7
 8004584:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 128;
 8004586:	7dfa      	ldrb	r2, [r7, #23]
 8004588:	4613      	mov	r3, r2
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	4413      	add	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	461a      	mov	r2, r3
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	4413      	add	r3, r2
 8004596:	6859      	ldr	r1, [r3, #4]
 8004598:	7dfa      	ldrb	r2, [r7, #23]
 800459a:	4613      	mov	r3, r2
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	4413      	add	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	461a      	mov	r2, r3
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	4413      	add	r3, r2
 80045a8:	01ca      	lsls	r2, r1, #7
 80045aa:	605a      	str	r2, [r3, #4]
				break;
 80045ac:	e079      	b.n	80046a2 <vl53l7cx_set_detection_thresholds+0x25e>
			case VL53L7CX_AMBIENT_PER_SPAD_KCPS:
				p_thresholds[i].param_low_thresh  *= 2048;
 80045ae:	7dfa      	ldrb	r2, [r7, #23]
 80045b0:	4613      	mov	r3, r2
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	4413      	add	r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	461a      	mov	r2, r3
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	4413      	add	r3, r2
 80045be:	6819      	ldr	r1, [r3, #0]
 80045c0:	7dfa      	ldrb	r2, [r7, #23]
 80045c2:	4613      	mov	r3, r2
 80045c4:	005b      	lsls	r3, r3, #1
 80045c6:	4413      	add	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	461a      	mov	r2, r3
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	4413      	add	r3, r2
 80045d0:	02ca      	lsls	r2, r1, #11
 80045d2:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 2048;
 80045d4:	7dfa      	ldrb	r2, [r7, #23]
 80045d6:	4613      	mov	r3, r2
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	4413      	add	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	461a      	mov	r2, r3
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	4413      	add	r3, r2
 80045e4:	6859      	ldr	r1, [r3, #4]
 80045e6:	7dfa      	ldrb	r2, [r7, #23]
 80045e8:	4613      	mov	r3, r2
 80045ea:	005b      	lsls	r3, r3, #1
 80045ec:	4413      	add	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	461a      	mov	r2, r3
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	4413      	add	r3, r2
 80045f6:	02ca      	lsls	r2, r1, #11
 80045f8:	605a      	str	r2, [r3, #4]
				break;
 80045fa:	e052      	b.n	80046a2 <vl53l7cx_set_detection_thresholds+0x25e>
			case VL53L7CX_NB_SPADS_ENABLED:
				p_thresholds[i].param_low_thresh  *= 256;
 80045fc:	7dfa      	ldrb	r2, [r7, #23]
 80045fe:	4613      	mov	r3, r2
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	4413      	add	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	461a      	mov	r2, r3
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	4413      	add	r3, r2
 800460c:	6819      	ldr	r1, [r3, #0]
 800460e:	7dfa      	ldrb	r2, [r7, #23]
 8004610:	4613      	mov	r3, r2
 8004612:	005b      	lsls	r3, r3, #1
 8004614:	4413      	add	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	461a      	mov	r2, r3
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	4413      	add	r3, r2
 800461e:	020a      	lsls	r2, r1, #8
 8004620:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 256;
 8004622:	7dfa      	ldrb	r2, [r7, #23]
 8004624:	4613      	mov	r3, r2
 8004626:	005b      	lsls	r3, r3, #1
 8004628:	4413      	add	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	461a      	mov	r2, r3
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	4413      	add	r3, r2
 8004632:	6859      	ldr	r1, [r3, #4]
 8004634:	7dfa      	ldrb	r2, [r7, #23]
 8004636:	4613      	mov	r3, r2
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	4413      	add	r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	461a      	mov	r2, r3
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	4413      	add	r3, r2
 8004644:	020a      	lsls	r2, r1, #8
 8004646:	605a      	str	r2, [r3, #4]
				break;
 8004648:	e02b      	b.n	80046a2 <vl53l7cx_set_detection_thresholds+0x25e>
			case VL53L7CX_MOTION_INDICATOR:
				p_thresholds[i].param_low_thresh  *= 65535;
 800464a:	7dfa      	ldrb	r2, [r7, #23]
 800464c:	4613      	mov	r3, r2
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	4413      	add	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	461a      	mov	r2, r3
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	4413      	add	r3, r2
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	7df9      	ldrb	r1, [r7, #23]
 800465e:	460b      	mov	r3, r1
 8004660:	005b      	lsls	r3, r3, #1
 8004662:	440b      	add	r3, r1
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4619      	mov	r1, r3
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	4419      	add	r1, r3
 800466c:	4613      	mov	r3, r2
 800466e:	041b      	lsls	r3, r3, #16
 8004670:	1a9b      	subs	r3, r3, r2
 8004672:	600b      	str	r3, [r1, #0]
				p_thresholds[i].param_high_thresh *= 65535;
 8004674:	7dfa      	ldrb	r2, [r7, #23]
 8004676:	4613      	mov	r3, r2
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	4413      	add	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	461a      	mov	r2, r3
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	4413      	add	r3, r2
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	7df9      	ldrb	r1, [r7, #23]
 8004688:	460b      	mov	r3, r1
 800468a:	005b      	lsls	r3, r3, #1
 800468c:	440b      	add	r3, r1
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4619      	mov	r1, r3
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	4419      	add	r1, r3
 8004696:	4613      	mov	r3, r2
 8004698:	041b      	lsls	r3, r3, #16
 800469a:	1a9b      	subs	r3, r3, r2
 800469c:	604b      	str	r3, [r1, #4]
				break;
 800469e:	e000      	b.n	80046a2 <vl53l7cx_set_detection_thresholds+0x25e>
			default:
				break;
 80046a0:	bf00      	nop
	for(i = 0; i < (uint8_t) VL53L7CX_NB_THRESHOLDS; i++)
 80046a2:	7dfb      	ldrb	r3, [r7, #23]
 80046a4:	3301      	adds	r3, #1
 80046a6:	75fb      	strb	r3, [r7, #23]
 80046a8:	7dfb      	ldrb	r3, [r7, #23]
 80046aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80046ac:	f67f aedb 	bls.w	8004466 <vl53l7cx_set_detection_thresholds+0x22>
		}
	}

	/* Set valid target list */
	status |= vl53l7cx_dci_write_data(p_dev, (uint8_t*)grp_valid_target_cfg,
 80046b0:	f107 010c 	add.w	r1, r7, #12
 80046b4:	2308      	movs	r3, #8
 80046b6:	f64b 12f0 	movw	r2, #47600	@ 0xb9f0
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7ff fdb2 	bl	8004224 <vl53l7cx_dci_write_data>
 80046c0:	4603      	mov	r3, r0
 80046c2:	461a      	mov	r2, r3
 80046c4:	7dbb      	ldrb	r3, [r7, #22]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	75bb      	strb	r3, [r7, #22]
			VL53L7CX_DCI_DET_THRESH_VALID_STATUS,
			(uint16_t)sizeof(grp_valid_target_cfg));

	/* Set thresholds configuration */
	status |= vl53l7cx_dci_write_data(p_dev, (uint8_t*)p_thresholds,
 80046ca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80046ce:	f24b 62e8 	movw	r2, #46824	@ 0xb6e8
 80046d2:	6839      	ldr	r1, [r7, #0]
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f7ff fda5 	bl	8004224 <vl53l7cx_dci_write_data>
 80046da:	4603      	mov	r3, r0
 80046dc:	461a      	mov	r2, r3
 80046de:	7dbb      	ldrb	r3, [r7, #22]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	75bb      	strb	r3, [r7, #22]
			VL53L7CX_DCI_DET_THRESH_START,
			(uint16_t)(VL53L7CX_NB_THRESHOLDS
			*sizeof(VL53L7CX_DetectionThresholds)));

	return status;
 80046e4:	7dbb      	ldrb	r3, [r7, #22]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3718      	adds	r7, #24
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	08008450 	.word	0x08008450

080046f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80046f4:	b480      	push	{r7}
 80046f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80046f8:	4b06      	ldr	r3, [pc, #24]	@ (8004714 <SystemInit+0x20>)
 80046fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046fe:	4a05      	ldr	r2, [pc, #20]	@ (8004714 <SystemInit+0x20>)
 8004700:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004704:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004708:	bf00      	nop
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	e000ed00 	.word	0xe000ed00

08004718 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800471c:	4b0e      	ldr	r3, [pc, #56]	@ (8004758 <HAL_Init+0x40>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a0d      	ldr	r2, [pc, #52]	@ (8004758 <HAL_Init+0x40>)
 8004722:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004726:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004728:	4b0b      	ldr	r3, [pc, #44]	@ (8004758 <HAL_Init+0x40>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a0a      	ldr	r2, [pc, #40]	@ (8004758 <HAL_Init+0x40>)
 800472e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004732:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004734:	4b08      	ldr	r3, [pc, #32]	@ (8004758 <HAL_Init+0x40>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a07      	ldr	r2, [pc, #28]	@ (8004758 <HAL_Init+0x40>)
 800473a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800473e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004740:	2003      	movs	r0, #3
 8004742:	f000 f94f 	bl	80049e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004746:	2000      	movs	r0, #0
 8004748:	f000 f808 	bl	800475c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800474c:	f7fc fae0 	bl	8000d10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	40023c00 	.word	0x40023c00

0800475c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004764:	4b12      	ldr	r3, [pc, #72]	@ (80047b0 <HAL_InitTick+0x54>)
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	4b12      	ldr	r3, [pc, #72]	@ (80047b4 <HAL_InitTick+0x58>)
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	4619      	mov	r1, r3
 800476e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004772:	fbb3 f3f1 	udiv	r3, r3, r1
 8004776:	fbb2 f3f3 	udiv	r3, r2, r3
 800477a:	4618      	mov	r0, r3
 800477c:	f000 f967 	bl	8004a4e <HAL_SYSTICK_Config>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e00e      	b.n	80047a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b0f      	cmp	r3, #15
 800478e:	d80a      	bhi.n	80047a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004790:	2200      	movs	r2, #0
 8004792:	6879      	ldr	r1, [r7, #4]
 8004794:	f04f 30ff 	mov.w	r0, #4294967295
 8004798:	f000 f92f 	bl	80049fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800479c:	4a06      	ldr	r2, [pc, #24]	@ (80047b8 <HAL_InitTick+0x5c>)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
 80047a4:	e000      	b.n	80047a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3708      	adds	r7, #8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	2000003c 	.word	0x2000003c
 80047b4:	20000044 	.word	0x20000044
 80047b8:	20000040 	.word	0x20000040

080047bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80047c0:	4b06      	ldr	r3, [pc, #24]	@ (80047dc <HAL_IncTick+0x20>)
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	461a      	mov	r2, r3
 80047c6:	4b06      	ldr	r3, [pc, #24]	@ (80047e0 <HAL_IncTick+0x24>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4413      	add	r3, r2
 80047cc:	4a04      	ldr	r2, [pc, #16]	@ (80047e0 <HAL_IncTick+0x24>)
 80047ce:	6013      	str	r3, [r2, #0]
}
 80047d0:	bf00      	nop
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	20000044 	.word	0x20000044
 80047e0:	20002fa8 	.word	0x20002fa8

080047e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80047e4:	b480      	push	{r7}
 80047e6:	af00      	add	r7, sp, #0
  return uwTick;
 80047e8:	4b03      	ldr	r3, [pc, #12]	@ (80047f8 <HAL_GetTick+0x14>)
 80047ea:	681b      	ldr	r3, [r3, #0]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	20002fa8 	.word	0x20002fa8

080047fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004804:	f7ff ffee 	bl	80047e4 <HAL_GetTick>
 8004808:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004814:	d005      	beq.n	8004822 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004816:	4b0a      	ldr	r3, [pc, #40]	@ (8004840 <HAL_Delay+0x44>)
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	461a      	mov	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4413      	add	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004822:	bf00      	nop
 8004824:	f7ff ffde 	bl	80047e4 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	429a      	cmp	r2, r3
 8004832:	d8f7      	bhi.n	8004824 <HAL_Delay+0x28>
  {
  }
}
 8004834:	bf00      	nop
 8004836:	bf00      	nop
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	20000044 	.word	0x20000044

08004844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f003 0307 	and.w	r3, r3, #7
 8004852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004854:	4b0c      	ldr	r3, [pc, #48]	@ (8004888 <__NVIC_SetPriorityGrouping+0x44>)
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004860:	4013      	ands	r3, r2
 8004862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800486c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004870:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004876:	4a04      	ldr	r2, [pc, #16]	@ (8004888 <__NVIC_SetPriorityGrouping+0x44>)
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	60d3      	str	r3, [r2, #12]
}
 800487c:	bf00      	nop
 800487e:	3714      	adds	r7, #20
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr
 8004888:	e000ed00 	.word	0xe000ed00

0800488c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004890:	4b04      	ldr	r3, [pc, #16]	@ (80048a4 <__NVIC_GetPriorityGrouping+0x18>)
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	0a1b      	lsrs	r3, r3, #8
 8004896:	f003 0307 	and.w	r3, r3, #7
}
 800489a:	4618      	mov	r0, r3
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr
 80048a4:	e000ed00 	.word	0xe000ed00

080048a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	4603      	mov	r3, r0
 80048b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	db0b      	blt.n	80048d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048ba:	79fb      	ldrb	r3, [r7, #7]
 80048bc:	f003 021f 	and.w	r2, r3, #31
 80048c0:	4907      	ldr	r1, [pc, #28]	@ (80048e0 <__NVIC_EnableIRQ+0x38>)
 80048c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c6:	095b      	lsrs	r3, r3, #5
 80048c8:	2001      	movs	r0, #1
 80048ca:	fa00 f202 	lsl.w	r2, r0, r2
 80048ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	e000e100 	.word	0xe000e100

080048e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	4603      	mov	r3, r0
 80048ec:	6039      	str	r1, [r7, #0]
 80048ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	db0a      	blt.n	800490e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	b2da      	uxtb	r2, r3
 80048fc:	490c      	ldr	r1, [pc, #48]	@ (8004930 <__NVIC_SetPriority+0x4c>)
 80048fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004902:	0112      	lsls	r2, r2, #4
 8004904:	b2d2      	uxtb	r2, r2
 8004906:	440b      	add	r3, r1
 8004908:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800490c:	e00a      	b.n	8004924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	b2da      	uxtb	r2, r3
 8004912:	4908      	ldr	r1, [pc, #32]	@ (8004934 <__NVIC_SetPriority+0x50>)
 8004914:	79fb      	ldrb	r3, [r7, #7]
 8004916:	f003 030f 	and.w	r3, r3, #15
 800491a:	3b04      	subs	r3, #4
 800491c:	0112      	lsls	r2, r2, #4
 800491e:	b2d2      	uxtb	r2, r2
 8004920:	440b      	add	r3, r1
 8004922:	761a      	strb	r2, [r3, #24]
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	e000e100 	.word	0xe000e100
 8004934:	e000ed00 	.word	0xe000ed00

08004938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004938:	b480      	push	{r7}
 800493a:	b089      	sub	sp, #36	@ 0x24
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f003 0307 	and.w	r3, r3, #7
 800494a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	f1c3 0307 	rsb	r3, r3, #7
 8004952:	2b04      	cmp	r3, #4
 8004954:	bf28      	it	cs
 8004956:	2304      	movcs	r3, #4
 8004958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	3304      	adds	r3, #4
 800495e:	2b06      	cmp	r3, #6
 8004960:	d902      	bls.n	8004968 <NVIC_EncodePriority+0x30>
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	3b03      	subs	r3, #3
 8004966:	e000      	b.n	800496a <NVIC_EncodePriority+0x32>
 8004968:	2300      	movs	r3, #0
 800496a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800496c:	f04f 32ff 	mov.w	r2, #4294967295
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	fa02 f303 	lsl.w	r3, r2, r3
 8004976:	43da      	mvns	r2, r3
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	401a      	ands	r2, r3
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004980:	f04f 31ff 	mov.w	r1, #4294967295
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	fa01 f303 	lsl.w	r3, r1, r3
 800498a:	43d9      	mvns	r1, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004990:	4313      	orrs	r3, r2
         );
}
 8004992:	4618      	mov	r0, r3
 8004994:	3724      	adds	r7, #36	@ 0x24
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
	...

080049a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	3b01      	subs	r3, #1
 80049ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049b0:	d301      	bcc.n	80049b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80049b2:	2301      	movs	r3, #1
 80049b4:	e00f      	b.n	80049d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049b6:	4a0a      	ldr	r2, [pc, #40]	@ (80049e0 <SysTick_Config+0x40>)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	3b01      	subs	r3, #1
 80049bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049be:	210f      	movs	r1, #15
 80049c0:	f04f 30ff 	mov.w	r0, #4294967295
 80049c4:	f7ff ff8e 	bl	80048e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049c8:	4b05      	ldr	r3, [pc, #20]	@ (80049e0 <SysTick_Config+0x40>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049ce:	4b04      	ldr	r3, [pc, #16]	@ (80049e0 <SysTick_Config+0x40>)
 80049d0:	2207      	movs	r2, #7
 80049d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	e000e010 	.word	0xe000e010

080049e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f7ff ff29 	bl	8004844 <__NVIC_SetPriorityGrouping>
}
 80049f2:	bf00      	nop
 80049f4:	3708      	adds	r7, #8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b086      	sub	sp, #24
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	4603      	mov	r3, r0
 8004a02:	60b9      	str	r1, [r7, #8]
 8004a04:	607a      	str	r2, [r7, #4]
 8004a06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a0c:	f7ff ff3e 	bl	800488c <__NVIC_GetPriorityGrouping>
 8004a10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	68b9      	ldr	r1, [r7, #8]
 8004a16:	6978      	ldr	r0, [r7, #20]
 8004a18:	f7ff ff8e 	bl	8004938 <NVIC_EncodePriority>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a22:	4611      	mov	r1, r2
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7ff ff5d 	bl	80048e4 <__NVIC_SetPriority>
}
 8004a2a:	bf00      	nop
 8004a2c:	3718      	adds	r7, #24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b082      	sub	sp, #8
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	4603      	mov	r3, r0
 8004a3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7ff ff31 	bl	80048a8 <__NVIC_EnableIRQ>
}
 8004a46:	bf00      	nop
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b082      	sub	sp, #8
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7ff ffa2 	bl	80049a0 <SysTick_Config>
 8004a5c:	4603      	mov	r3, r0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3708      	adds	r7, #8
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
	...

08004a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b089      	sub	sp, #36	@ 0x24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a72:	2300      	movs	r3, #0
 8004a74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a7e:	2300      	movs	r3, #0
 8004a80:	61fb      	str	r3, [r7, #28]
 8004a82:	e159      	b.n	8004d38 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a84:	2201      	movs	r2, #1
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	4013      	ands	r3, r2
 8004a96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	f040 8148 	bne.w	8004d32 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f003 0303 	and.w	r3, r3, #3
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d005      	beq.n	8004aba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d130      	bne.n	8004b1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	2203      	movs	r2, #3
 8004ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aca:	43db      	mvns	r3, r3
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	4013      	ands	r3, r2
 8004ad0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	fa02 f303 	lsl.w	r3, r2, r3
 8004ade:	69ba      	ldr	r2, [r7, #24]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	69ba      	ldr	r2, [r7, #24]
 8004ae8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004af0:	2201      	movs	r2, #1
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	fa02 f303 	lsl.w	r3, r2, r3
 8004af8:	43db      	mvns	r3, r3
 8004afa:	69ba      	ldr	r2, [r7, #24]
 8004afc:	4013      	ands	r3, r2
 8004afe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	091b      	lsrs	r3, r3, #4
 8004b06:	f003 0201 	and.w	r2, r3, #1
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	69ba      	ldr	r2, [r7, #24]
 8004b1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f003 0303 	and.w	r3, r3, #3
 8004b24:	2b03      	cmp	r3, #3
 8004b26:	d017      	beq.n	8004b58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	2203      	movs	r2, #3
 8004b34:	fa02 f303 	lsl.w	r3, r2, r3
 8004b38:	43db      	mvns	r3, r3
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	689a      	ldr	r2, [r3, #8]
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f003 0303 	and.w	r3, r3, #3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d123      	bne.n	8004bac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	08da      	lsrs	r2, r3, #3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	3208      	adds	r2, #8
 8004b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	220f      	movs	r2, #15
 8004b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b80:	43db      	mvns	r3, r3
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	4013      	ands	r3, r2
 8004b86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	691a      	ldr	r2, [r3, #16]
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	f003 0307 	and.w	r3, r3, #7
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	fa02 f303 	lsl.w	r3, r2, r3
 8004b98:	69ba      	ldr	r2, [r7, #24]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	08da      	lsrs	r2, r3, #3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	3208      	adds	r2, #8
 8004ba6:	69b9      	ldr	r1, [r7, #24]
 8004ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	005b      	lsls	r3, r3, #1
 8004bb6:	2203      	movs	r2, #3
 8004bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbc:	43db      	mvns	r3, r3
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f003 0203 	and.w	r2, r3, #3
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd4:	69ba      	ldr	r2, [r7, #24]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	69ba      	ldr	r2, [r7, #24]
 8004bde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 80a2 	beq.w	8004d32 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bee:	2300      	movs	r3, #0
 8004bf0:	60fb      	str	r3, [r7, #12]
 8004bf2:	4b57      	ldr	r3, [pc, #348]	@ (8004d50 <HAL_GPIO_Init+0x2e8>)
 8004bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bf6:	4a56      	ldr	r2, [pc, #344]	@ (8004d50 <HAL_GPIO_Init+0x2e8>)
 8004bf8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004bfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8004bfe:	4b54      	ldr	r3, [pc, #336]	@ (8004d50 <HAL_GPIO_Init+0x2e8>)
 8004c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c06:	60fb      	str	r3, [r7, #12]
 8004c08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c0a:	4a52      	ldr	r2, [pc, #328]	@ (8004d54 <HAL_GPIO_Init+0x2ec>)
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	089b      	lsrs	r3, r3, #2
 8004c10:	3302      	adds	r3, #2
 8004c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	f003 0303 	and.w	r3, r3, #3
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	220f      	movs	r2, #15
 8004c22:	fa02 f303 	lsl.w	r3, r2, r3
 8004c26:	43db      	mvns	r3, r3
 8004c28:	69ba      	ldr	r2, [r7, #24]
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a49      	ldr	r2, [pc, #292]	@ (8004d58 <HAL_GPIO_Init+0x2f0>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d019      	beq.n	8004c6a <HAL_GPIO_Init+0x202>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a48      	ldr	r2, [pc, #288]	@ (8004d5c <HAL_GPIO_Init+0x2f4>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d013      	beq.n	8004c66 <HAL_GPIO_Init+0x1fe>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a47      	ldr	r2, [pc, #284]	@ (8004d60 <HAL_GPIO_Init+0x2f8>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d00d      	beq.n	8004c62 <HAL_GPIO_Init+0x1fa>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a46      	ldr	r2, [pc, #280]	@ (8004d64 <HAL_GPIO_Init+0x2fc>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d007      	beq.n	8004c5e <HAL_GPIO_Init+0x1f6>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a45      	ldr	r2, [pc, #276]	@ (8004d68 <HAL_GPIO_Init+0x300>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d101      	bne.n	8004c5a <HAL_GPIO_Init+0x1f2>
 8004c56:	2304      	movs	r3, #4
 8004c58:	e008      	b.n	8004c6c <HAL_GPIO_Init+0x204>
 8004c5a:	2307      	movs	r3, #7
 8004c5c:	e006      	b.n	8004c6c <HAL_GPIO_Init+0x204>
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e004      	b.n	8004c6c <HAL_GPIO_Init+0x204>
 8004c62:	2302      	movs	r3, #2
 8004c64:	e002      	b.n	8004c6c <HAL_GPIO_Init+0x204>
 8004c66:	2301      	movs	r3, #1
 8004c68:	e000      	b.n	8004c6c <HAL_GPIO_Init+0x204>
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	69fa      	ldr	r2, [r7, #28]
 8004c6e:	f002 0203 	and.w	r2, r2, #3
 8004c72:	0092      	lsls	r2, r2, #2
 8004c74:	4093      	lsls	r3, r2
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c7c:	4935      	ldr	r1, [pc, #212]	@ (8004d54 <HAL_GPIO_Init+0x2ec>)
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	089b      	lsrs	r3, r3, #2
 8004c82:	3302      	adds	r3, #2
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c8a:	4b38      	ldr	r3, [pc, #224]	@ (8004d6c <HAL_GPIO_Init+0x304>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	43db      	mvns	r3, r3
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	4013      	ands	r3, r2
 8004c98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004ca6:	69ba      	ldr	r2, [r7, #24]
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004cae:	4a2f      	ldr	r2, [pc, #188]	@ (8004d6c <HAL_GPIO_Init+0x304>)
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004cb4:	4b2d      	ldr	r3, [pc, #180]	@ (8004d6c <HAL_GPIO_Init+0x304>)
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	43db      	mvns	r3, r3
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d003      	beq.n	8004cd8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004cd8:	4a24      	ldr	r2, [pc, #144]	@ (8004d6c <HAL_GPIO_Init+0x304>)
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004cde:	4b23      	ldr	r3, [pc, #140]	@ (8004d6c <HAL_GPIO_Init+0x304>)
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	43db      	mvns	r3, r3
 8004ce8:	69ba      	ldr	r2, [r7, #24]
 8004cea:	4013      	ands	r3, r2
 8004cec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d003      	beq.n	8004d02 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d02:	4a1a      	ldr	r2, [pc, #104]	@ (8004d6c <HAL_GPIO_Init+0x304>)
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d08:	4b18      	ldr	r3, [pc, #96]	@ (8004d6c <HAL_GPIO_Init+0x304>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	43db      	mvns	r3, r3
 8004d12:	69ba      	ldr	r2, [r7, #24]
 8004d14:	4013      	ands	r3, r2
 8004d16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d003      	beq.n	8004d2c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d2c:	4a0f      	ldr	r2, [pc, #60]	@ (8004d6c <HAL_GPIO_Init+0x304>)
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	3301      	adds	r3, #1
 8004d36:	61fb      	str	r3, [r7, #28]
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	2b0f      	cmp	r3, #15
 8004d3c:	f67f aea2 	bls.w	8004a84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d40:	bf00      	nop
 8004d42:	bf00      	nop
 8004d44:	3724      	adds	r7, #36	@ 0x24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	40023800 	.word	0x40023800
 8004d54:	40013800 	.word	0x40013800
 8004d58:	40020000 	.word	0x40020000
 8004d5c:	40020400 	.word	0x40020400
 8004d60:	40020800 	.word	0x40020800
 8004d64:	40020c00 	.word	0x40020c00
 8004d68:	40021000 	.word	0x40021000
 8004d6c:	40013c00 	.word	0x40013c00

08004d70 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b087      	sub	sp, #28
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004d82:	2300      	movs	r3, #0
 8004d84:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d86:	2300      	movs	r3, #0
 8004d88:	617b      	str	r3, [r7, #20]
 8004d8a:	e0bb      	b.n	8004f04 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	fa02 f303 	lsl.w	r3, r2, r3
 8004d94:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	f040 80ab 	bne.w	8004efe <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004da8:	4a5c      	ldr	r2, [pc, #368]	@ (8004f1c <HAL_GPIO_DeInit+0x1ac>)
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	089b      	lsrs	r3, r3, #2
 8004dae:	3302      	adds	r3, #2
 8004db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004db4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f003 0303 	and.w	r3, r3, #3
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	220f      	movs	r2, #15
 8004dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a54      	ldr	r2, [pc, #336]	@ (8004f20 <HAL_GPIO_DeInit+0x1b0>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d019      	beq.n	8004e06 <HAL_GPIO_DeInit+0x96>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a53      	ldr	r2, [pc, #332]	@ (8004f24 <HAL_GPIO_DeInit+0x1b4>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d013      	beq.n	8004e02 <HAL_GPIO_DeInit+0x92>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a52      	ldr	r2, [pc, #328]	@ (8004f28 <HAL_GPIO_DeInit+0x1b8>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d00d      	beq.n	8004dfe <HAL_GPIO_DeInit+0x8e>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a51      	ldr	r2, [pc, #324]	@ (8004f2c <HAL_GPIO_DeInit+0x1bc>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d007      	beq.n	8004dfa <HAL_GPIO_DeInit+0x8a>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a50      	ldr	r2, [pc, #320]	@ (8004f30 <HAL_GPIO_DeInit+0x1c0>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d101      	bne.n	8004df6 <HAL_GPIO_DeInit+0x86>
 8004df2:	2304      	movs	r3, #4
 8004df4:	e008      	b.n	8004e08 <HAL_GPIO_DeInit+0x98>
 8004df6:	2307      	movs	r3, #7
 8004df8:	e006      	b.n	8004e08 <HAL_GPIO_DeInit+0x98>
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e004      	b.n	8004e08 <HAL_GPIO_DeInit+0x98>
 8004dfe:	2302      	movs	r3, #2
 8004e00:	e002      	b.n	8004e08 <HAL_GPIO_DeInit+0x98>
 8004e02:	2301      	movs	r3, #1
 8004e04:	e000      	b.n	8004e08 <HAL_GPIO_DeInit+0x98>
 8004e06:	2300      	movs	r3, #0
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	f002 0203 	and.w	r2, r2, #3
 8004e0e:	0092      	lsls	r2, r2, #2
 8004e10:	4093      	lsls	r3, r2
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d132      	bne.n	8004e7e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004e18:	4b46      	ldr	r3, [pc, #280]	@ (8004f34 <HAL_GPIO_DeInit+0x1c4>)
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	43db      	mvns	r3, r3
 8004e20:	4944      	ldr	r1, [pc, #272]	@ (8004f34 <HAL_GPIO_DeInit+0x1c4>)
 8004e22:	4013      	ands	r3, r2
 8004e24:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004e26:	4b43      	ldr	r3, [pc, #268]	@ (8004f34 <HAL_GPIO_DeInit+0x1c4>)
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	43db      	mvns	r3, r3
 8004e2e:	4941      	ldr	r1, [pc, #260]	@ (8004f34 <HAL_GPIO_DeInit+0x1c4>)
 8004e30:	4013      	ands	r3, r2
 8004e32:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004e34:	4b3f      	ldr	r3, [pc, #252]	@ (8004f34 <HAL_GPIO_DeInit+0x1c4>)
 8004e36:	68da      	ldr	r2, [r3, #12]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	43db      	mvns	r3, r3
 8004e3c:	493d      	ldr	r1, [pc, #244]	@ (8004f34 <HAL_GPIO_DeInit+0x1c4>)
 8004e3e:	4013      	ands	r3, r2
 8004e40:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004e42:	4b3c      	ldr	r3, [pc, #240]	@ (8004f34 <HAL_GPIO_DeInit+0x1c4>)
 8004e44:	689a      	ldr	r2, [r3, #8]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	43db      	mvns	r3, r3
 8004e4a:	493a      	ldr	r1, [pc, #232]	@ (8004f34 <HAL_GPIO_DeInit+0x1c4>)
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	f003 0303 	and.w	r3, r3, #3
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	220f      	movs	r2, #15
 8004e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004e60:	4a2e      	ldr	r2, [pc, #184]	@ (8004f1c <HAL_GPIO_DeInit+0x1ac>)
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	089b      	lsrs	r3, r3, #2
 8004e66:	3302      	adds	r3, #2
 8004e68:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	43da      	mvns	r2, r3
 8004e70:	482a      	ldr	r0, [pc, #168]	@ (8004f1c <HAL_GPIO_DeInit+0x1ac>)
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	089b      	lsrs	r3, r3, #2
 8004e76:	400a      	ands	r2, r1
 8004e78:	3302      	adds	r3, #2
 8004e7a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	2103      	movs	r1, #3
 8004e88:	fa01 f303 	lsl.w	r3, r1, r3
 8004e8c:	43db      	mvns	r3, r3
 8004e8e:	401a      	ands	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	08da      	lsrs	r2, r3, #3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	3208      	adds	r2, #8
 8004e9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f003 0307 	and.w	r3, r3, #7
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	220f      	movs	r2, #15
 8004eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004eae:	43db      	mvns	r3, r3
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	08d2      	lsrs	r2, r2, #3
 8004eb4:	4019      	ands	r1, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	3208      	adds	r2, #8
 8004eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68da      	ldr	r2, [r3, #12]
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	005b      	lsls	r3, r3, #1
 8004ec6:	2103      	movs	r1, #3
 8004ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ecc:	43db      	mvns	r3, r3
 8004ece:	401a      	ands	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685a      	ldr	r2, [r3, #4]
 8004ed8:	2101      	movs	r1, #1
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee0:	43db      	mvns	r3, r3
 8004ee2:	401a      	ands	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689a      	ldr	r2, [r3, #8]
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	005b      	lsls	r3, r3, #1
 8004ef0:	2103      	movs	r1, #3
 8004ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ef6:	43db      	mvns	r3, r3
 8004ef8:	401a      	ands	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	3301      	adds	r3, #1
 8004f02:	617b      	str	r3, [r7, #20]
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	2b0f      	cmp	r3, #15
 8004f08:	f67f af40 	bls.w	8004d8c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004f0c:	bf00      	nop
 8004f0e:	bf00      	nop
 8004f10:	371c      	adds	r7, #28
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	40013800 	.word	0x40013800
 8004f20:	40020000 	.word	0x40020000
 8004f24:	40020400 	.word	0x40020400
 8004f28:	40020800 	.word	0x40020800
 8004f2c:	40020c00 	.word	0x40020c00
 8004f30:	40021000 	.word	0x40021000
 8004f34:	40013c00 	.word	0x40013c00

08004f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	460b      	mov	r3, r1
 8004f42:	807b      	strh	r3, [r7, #2]
 8004f44:	4613      	mov	r3, r2
 8004f46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f48:	787b      	ldrb	r3, [r7, #1]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d003      	beq.n	8004f56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f4e:	887a      	ldrh	r2, [r7, #2]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f54:	e003      	b.n	8004f5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f56:	887b      	ldrh	r3, [r7, #2]
 8004f58:	041a      	lsls	r2, r3, #16
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	619a      	str	r2, [r3, #24]
}
 8004f5e:	bf00      	nop
 8004f60:	370c      	adds	r7, #12
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
	...

08004f6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	4603      	mov	r3, r0
 8004f74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004f76:	4b08      	ldr	r3, [pc, #32]	@ (8004f98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f78:	695a      	ldr	r2, [r3, #20]
 8004f7a:	88fb      	ldrh	r3, [r7, #6]
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d006      	beq.n	8004f90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f82:	4a05      	ldr	r2, [pc, #20]	@ (8004f98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f84:	88fb      	ldrh	r3, [r7, #6]
 8004f86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f88:	88fb      	ldrh	r3, [r7, #6]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7fb fd8e 	bl	8000aac <HAL_GPIO_EXTI_Callback>
  }
}
 8004f90:	bf00      	nop
 8004f92:	3708      	adds	r7, #8
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	40013c00 	.word	0x40013c00

08004f9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e12b      	b.n	8005206 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d106      	bne.n	8004fc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f95d 	bl	8005282 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2224      	movs	r2, #36	@ 0x24
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f022 0201 	bic.w	r2, r2, #1
 8004fde:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004fee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ffe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005000:	f001 fcbe 	bl	8006980 <HAL_RCC_GetPCLK1Freq>
 8005004:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	4a81      	ldr	r2, [pc, #516]	@ (8005210 <HAL_I2C_Init+0x274>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d807      	bhi.n	8005020 <HAL_I2C_Init+0x84>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	4a80      	ldr	r2, [pc, #512]	@ (8005214 <HAL_I2C_Init+0x278>)
 8005014:	4293      	cmp	r3, r2
 8005016:	bf94      	ite	ls
 8005018:	2301      	movls	r3, #1
 800501a:	2300      	movhi	r3, #0
 800501c:	b2db      	uxtb	r3, r3
 800501e:	e006      	b.n	800502e <HAL_I2C_Init+0x92>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4a7d      	ldr	r2, [pc, #500]	@ (8005218 <HAL_I2C_Init+0x27c>)
 8005024:	4293      	cmp	r3, r2
 8005026:	bf94      	ite	ls
 8005028:	2301      	movls	r3, #1
 800502a:	2300      	movhi	r3, #0
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e0e7      	b.n	8005206 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	4a78      	ldr	r2, [pc, #480]	@ (800521c <HAL_I2C_Init+0x280>)
 800503a:	fba2 2303 	umull	r2, r3, r2, r3
 800503e:	0c9b      	lsrs	r3, r3, #18
 8005040:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	430a      	orrs	r2, r1
 8005054:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	4a6a      	ldr	r2, [pc, #424]	@ (8005210 <HAL_I2C_Init+0x274>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d802      	bhi.n	8005070 <HAL_I2C_Init+0xd4>
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	3301      	adds	r3, #1
 800506e:	e009      	b.n	8005084 <HAL_I2C_Init+0xe8>
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005076:	fb02 f303 	mul.w	r3, r2, r3
 800507a:	4a69      	ldr	r2, [pc, #420]	@ (8005220 <HAL_I2C_Init+0x284>)
 800507c:	fba2 2303 	umull	r2, r3, r2, r3
 8005080:	099b      	lsrs	r3, r3, #6
 8005082:	3301      	adds	r3, #1
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	6812      	ldr	r2, [r2, #0]
 8005088:	430b      	orrs	r3, r1
 800508a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	69db      	ldr	r3, [r3, #28]
 8005092:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005096:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	495c      	ldr	r1, [pc, #368]	@ (8005210 <HAL_I2C_Init+0x274>)
 80050a0:	428b      	cmp	r3, r1
 80050a2:	d819      	bhi.n	80050d8 <HAL_I2C_Init+0x13c>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	1e59      	subs	r1, r3, #1
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	005b      	lsls	r3, r3, #1
 80050ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80050b2:	1c59      	adds	r1, r3, #1
 80050b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80050b8:	400b      	ands	r3, r1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00a      	beq.n	80050d4 <HAL_I2C_Init+0x138>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	1e59      	subs	r1, r3, #1
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	005b      	lsls	r3, r3, #1
 80050c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80050cc:	3301      	adds	r3, #1
 80050ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050d2:	e051      	b.n	8005178 <HAL_I2C_Init+0x1dc>
 80050d4:	2304      	movs	r3, #4
 80050d6:	e04f      	b.n	8005178 <HAL_I2C_Init+0x1dc>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d111      	bne.n	8005104 <HAL_I2C_Init+0x168>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	1e58      	subs	r0, r3, #1
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6859      	ldr	r1, [r3, #4]
 80050e8:	460b      	mov	r3, r1
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	440b      	add	r3, r1
 80050ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80050f2:	3301      	adds	r3, #1
 80050f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	bf0c      	ite	eq
 80050fc:	2301      	moveq	r3, #1
 80050fe:	2300      	movne	r3, #0
 8005100:	b2db      	uxtb	r3, r3
 8005102:	e012      	b.n	800512a <HAL_I2C_Init+0x18e>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	1e58      	subs	r0, r3, #1
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6859      	ldr	r1, [r3, #4]
 800510c:	460b      	mov	r3, r1
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	440b      	add	r3, r1
 8005112:	0099      	lsls	r1, r3, #2
 8005114:	440b      	add	r3, r1
 8005116:	fbb0 f3f3 	udiv	r3, r0, r3
 800511a:	3301      	adds	r3, #1
 800511c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005120:	2b00      	cmp	r3, #0
 8005122:	bf0c      	ite	eq
 8005124:	2301      	moveq	r3, #1
 8005126:	2300      	movne	r3, #0
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d001      	beq.n	8005132 <HAL_I2C_Init+0x196>
 800512e:	2301      	movs	r3, #1
 8005130:	e022      	b.n	8005178 <HAL_I2C_Init+0x1dc>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10e      	bne.n	8005158 <HAL_I2C_Init+0x1bc>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	1e58      	subs	r0, r3, #1
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6859      	ldr	r1, [r3, #4]
 8005142:	460b      	mov	r3, r1
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	440b      	add	r3, r1
 8005148:	fbb0 f3f3 	udiv	r3, r0, r3
 800514c:	3301      	adds	r3, #1
 800514e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005152:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005156:	e00f      	b.n	8005178 <HAL_I2C_Init+0x1dc>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	1e58      	subs	r0, r3, #1
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6859      	ldr	r1, [r3, #4]
 8005160:	460b      	mov	r3, r1
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	440b      	add	r3, r1
 8005166:	0099      	lsls	r1, r3, #2
 8005168:	440b      	add	r3, r1
 800516a:	fbb0 f3f3 	udiv	r3, r0, r3
 800516e:	3301      	adds	r3, #1
 8005170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005174:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005178:	6879      	ldr	r1, [r7, #4]
 800517a:	6809      	ldr	r1, [r1, #0]
 800517c:	4313      	orrs	r3, r2
 800517e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	69da      	ldr	r2, [r3, #28]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	431a      	orrs	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80051a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	6911      	ldr	r1, [r2, #16]
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	68d2      	ldr	r2, [r2, #12]
 80051b2:	4311      	orrs	r1, r2
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	6812      	ldr	r2, [r2, #0]
 80051b8:	430b      	orrs	r3, r1
 80051ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	695a      	ldr	r2, [r3, #20]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	431a      	orrs	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	430a      	orrs	r2, r1
 80051d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0201 	orr.w	r2, r2, #1
 80051e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2220      	movs	r2, #32
 80051f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	000186a0 	.word	0x000186a0
 8005214:	001e847f 	.word	0x001e847f
 8005218:	003d08ff 	.word	0x003d08ff
 800521c:	431bde83 	.word	0x431bde83
 8005220:	10624dd3 	.word	0x10624dd3

08005224 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e021      	b.n	800527a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2224      	movs	r2, #36	@ 0x24
 800523a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f022 0201 	bic.w	r2, r2, #1
 800524c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f821 	bl	8005296 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005282:	b480      	push	{r7}
 8005284:	b083      	sub	sp, #12
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800528a:	bf00      	nop
 800528c:	370c      	adds	r7, #12
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005296:	b480      	push	{r7}
 8005298:	b083      	sub	sp, #12
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800529e:	bf00      	nop
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
	...

080052ac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b088      	sub	sp, #32
 80052b0:	af02      	add	r7, sp, #8
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	4608      	mov	r0, r1
 80052b6:	4611      	mov	r1, r2
 80052b8:	461a      	mov	r2, r3
 80052ba:	4603      	mov	r3, r0
 80052bc:	817b      	strh	r3, [r7, #10]
 80052be:	460b      	mov	r3, r1
 80052c0:	813b      	strh	r3, [r7, #8]
 80052c2:	4613      	mov	r3, r2
 80052c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80052c6:	f7ff fa8d 	bl	80047e4 <HAL_GetTick>
 80052ca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b20      	cmp	r3, #32
 80052d6:	f040 80d9 	bne.w	800548c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	2319      	movs	r3, #25
 80052e0:	2201      	movs	r2, #1
 80052e2:	496d      	ldr	r1, [pc, #436]	@ (8005498 <HAL_I2C_Mem_Write+0x1ec>)
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f000 fca5 	bl	8005c34 <I2C_WaitOnFlagUntilTimeout>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d001      	beq.n	80052f4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80052f0:	2302      	movs	r3, #2
 80052f2:	e0cc      	b.n	800548e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d101      	bne.n	8005302 <HAL_I2C_Mem_Write+0x56>
 80052fe:	2302      	movs	r3, #2
 8005300:	e0c5      	b.n	800548e <HAL_I2C_Mem_Write+0x1e2>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	2b01      	cmp	r3, #1
 8005316:	d007      	beq.n	8005328 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f042 0201 	orr.w	r2, r2, #1
 8005326:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005336:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2221      	movs	r2, #33	@ 0x21
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2240      	movs	r2, #64	@ 0x40
 8005344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6a3a      	ldr	r2, [r7, #32]
 8005352:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005358:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800535e:	b29a      	uxth	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	4a4d      	ldr	r2, [pc, #308]	@ (800549c <HAL_I2C_Mem_Write+0x1f0>)
 8005368:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800536a:	88f8      	ldrh	r0, [r7, #6]
 800536c:	893a      	ldrh	r2, [r7, #8]
 800536e:	8979      	ldrh	r1, [r7, #10]
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	9301      	str	r3, [sp, #4]
 8005374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	4603      	mov	r3, r0
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f000 fadc 	bl	8005938 <I2C_RequestMemoryWrite>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d052      	beq.n	800542c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e081      	b.n	800548e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f000 fd6a 	bl	8005e68 <I2C_WaitOnTXEFlagUntilTimeout>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00d      	beq.n	80053b6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800539e:	2b04      	cmp	r3, #4
 80053a0:	d107      	bne.n	80053b2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e06b      	b.n	800548e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ba:	781a      	ldrb	r2, [r3, #0]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c6:	1c5a      	adds	r2, r3, #1
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053d0:	3b01      	subs	r3, #1
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053dc:	b29b      	uxth	r3, r3
 80053de:	3b01      	subs	r3, #1
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	f003 0304 	and.w	r3, r3, #4
 80053f0:	2b04      	cmp	r3, #4
 80053f2:	d11b      	bne.n	800542c <HAL_I2C_Mem_Write+0x180>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d017      	beq.n	800542c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005400:	781a      	ldrb	r2, [r3, #0]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540c:	1c5a      	adds	r2, r3, #1
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005416:	3b01      	subs	r3, #1
 8005418:	b29a      	uxth	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005422:	b29b      	uxth	r3, r3
 8005424:	3b01      	subs	r3, #1
 8005426:	b29a      	uxth	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1aa      	bne.n	800538a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005434:	697a      	ldr	r2, [r7, #20]
 8005436:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f000 fd5d 	bl	8005ef8 <I2C_WaitOnBTFFlagUntilTimeout>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00d      	beq.n	8005460 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005448:	2b04      	cmp	r3, #4
 800544a:	d107      	bne.n	800545c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800545a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e016      	b.n	800548e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800546e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2220      	movs	r2, #32
 8005474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005488:	2300      	movs	r3, #0
 800548a:	e000      	b.n	800548e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800548c:	2302      	movs	r3, #2
  }
}
 800548e:	4618      	mov	r0, r3
 8005490:	3718      	adds	r7, #24
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	00100002 	.word	0x00100002
 800549c:	ffff0000 	.word	0xffff0000

080054a0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b08c      	sub	sp, #48	@ 0x30
 80054a4:	af02      	add	r7, sp, #8
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	4608      	mov	r0, r1
 80054aa:	4611      	mov	r1, r2
 80054ac:	461a      	mov	r2, r3
 80054ae:	4603      	mov	r3, r0
 80054b0:	817b      	strh	r3, [r7, #10]
 80054b2:	460b      	mov	r3, r1
 80054b4:	813b      	strh	r3, [r7, #8]
 80054b6:	4613      	mov	r3, r2
 80054b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80054ba:	f7ff f993 	bl	80047e4 <HAL_GetTick>
 80054be:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	2b20      	cmp	r3, #32
 80054ca:	f040 8214 	bne.w	80058f6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	2319      	movs	r3, #25
 80054d4:	2201      	movs	r2, #1
 80054d6:	497b      	ldr	r1, [pc, #492]	@ (80056c4 <HAL_I2C_Mem_Read+0x224>)
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f000 fbab 	bl	8005c34 <I2C_WaitOnFlagUntilTimeout>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80054e4:	2302      	movs	r3, #2
 80054e6:	e207      	b.n	80058f8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d101      	bne.n	80054f6 <HAL_I2C_Mem_Read+0x56>
 80054f2:	2302      	movs	r3, #2
 80054f4:	e200      	b.n	80058f8 <HAL_I2C_Mem_Read+0x458>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	2b01      	cmp	r3, #1
 800550a:	d007      	beq.n	800551c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f042 0201 	orr.w	r2, r2, #1
 800551a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800552a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2222      	movs	r2, #34	@ 0x22
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2240      	movs	r2, #64	@ 0x40
 8005538:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005546:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800554c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005552:	b29a      	uxth	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4a5b      	ldr	r2, [pc, #364]	@ (80056c8 <HAL_I2C_Mem_Read+0x228>)
 800555c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800555e:	88f8      	ldrh	r0, [r7, #6]
 8005560:	893a      	ldrh	r2, [r7, #8]
 8005562:	8979      	ldrh	r1, [r7, #10]
 8005564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005566:	9301      	str	r3, [sp, #4]
 8005568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	4603      	mov	r3, r0
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f000 fa78 	bl	8005a64 <I2C_RequestMemoryRead>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e1bc      	b.n	80058f8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005582:	2b00      	cmp	r3, #0
 8005584:	d113      	bne.n	80055ae <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005586:	2300      	movs	r3, #0
 8005588:	623b      	str	r3, [r7, #32]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	695b      	ldr	r3, [r3, #20]
 8005590:	623b      	str	r3, [r7, #32]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	623b      	str	r3, [r7, #32]
 800559a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055aa:	601a      	str	r2, [r3, #0]
 80055ac:	e190      	b.n	80058d0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d11b      	bne.n	80055ee <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055c6:	2300      	movs	r3, #0
 80055c8:	61fb      	str	r3, [r7, #28]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	61fb      	str	r3, [r7, #28]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	61fb      	str	r3, [r7, #28]
 80055da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055ea:	601a      	str	r2, [r3, #0]
 80055ec:	e170      	b.n	80058d0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d11b      	bne.n	800562e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005604:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005614:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005616:	2300      	movs	r3, #0
 8005618:	61bb      	str	r3, [r7, #24]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	61bb      	str	r3, [r7, #24]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	61bb      	str	r3, [r7, #24]
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	e150      	b.n	80058d0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800562e:	2300      	movs	r3, #0
 8005630:	617b      	str	r3, [r7, #20]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	617b      	str	r3, [r7, #20]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	617b      	str	r3, [r7, #20]
 8005642:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005644:	e144      	b.n	80058d0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800564a:	2b03      	cmp	r3, #3
 800564c:	f200 80f1 	bhi.w	8005832 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005654:	2b01      	cmp	r3, #1
 8005656:	d123      	bne.n	80056a0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005658:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800565a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f000 fc93 	bl	8005f88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d001      	beq.n	800566c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e145      	b.n	80058f8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	691a      	ldr	r2, [r3, #16]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005676:	b2d2      	uxtb	r2, r2
 8005678:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800567e:	1c5a      	adds	r2, r3, #1
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005688:	3b01      	subs	r3, #1
 800568a:	b29a      	uxth	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005694:	b29b      	uxth	r3, r3
 8005696:	3b01      	subs	r3, #1
 8005698:	b29a      	uxth	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800569e:	e117      	b.n	80058d0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d14e      	bne.n	8005746 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80056a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ae:	2200      	movs	r2, #0
 80056b0:	4906      	ldr	r1, [pc, #24]	@ (80056cc <HAL_I2C_Mem_Read+0x22c>)
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f000 fabe 	bl	8005c34 <I2C_WaitOnFlagUntilTimeout>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d008      	beq.n	80056d0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e11a      	b.n	80058f8 <HAL_I2C_Mem_Read+0x458>
 80056c2:	bf00      	nop
 80056c4:	00100002 	.word	0x00100002
 80056c8:	ffff0000 	.word	0xffff0000
 80056cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	691a      	ldr	r2, [r3, #16]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ea:	b2d2      	uxtb	r2, r2
 80056ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f2:	1c5a      	adds	r2, r3, #1
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056fc:	3b01      	subs	r3, #1
 80056fe:	b29a      	uxth	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005708:	b29b      	uxth	r3, r3
 800570a:	3b01      	subs	r3, #1
 800570c:	b29a      	uxth	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	691a      	ldr	r2, [r3, #16]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800571c:	b2d2      	uxtb	r2, r2
 800571e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005724:	1c5a      	adds	r2, r3, #1
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800572e:	3b01      	subs	r3, #1
 8005730:	b29a      	uxth	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800573a:	b29b      	uxth	r3, r3
 800573c:	3b01      	subs	r3, #1
 800573e:	b29a      	uxth	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005744:	e0c4      	b.n	80058d0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005748:	9300      	str	r3, [sp, #0]
 800574a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800574c:	2200      	movs	r2, #0
 800574e:	496c      	ldr	r1, [pc, #432]	@ (8005900 <HAL_I2C_Mem_Read+0x460>)
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f000 fa6f 	bl	8005c34 <I2C_WaitOnFlagUntilTimeout>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d001      	beq.n	8005760 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e0cb      	b.n	80058f8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800576e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	691a      	ldr	r2, [r3, #16]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800577a:	b2d2      	uxtb	r2, r2
 800577c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005782:	1c5a      	adds	r2, r3, #1
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800578c:	3b01      	subs	r3, #1
 800578e:	b29a      	uxth	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005798:	b29b      	uxth	r3, r3
 800579a:	3b01      	subs	r3, #1
 800579c:	b29a      	uxth	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a4:	9300      	str	r3, [sp, #0]
 80057a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a8:	2200      	movs	r2, #0
 80057aa:	4955      	ldr	r1, [pc, #340]	@ (8005900 <HAL_I2C_Mem_Read+0x460>)
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f000 fa41 	bl	8005c34 <I2C_WaitOnFlagUntilTimeout>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d001      	beq.n	80057bc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e09d      	b.n	80058f8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	691a      	ldr	r2, [r3, #16]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d6:	b2d2      	uxtb	r2, r2
 80057d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057de:	1c5a      	adds	r2, r3, #1
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057e8:	3b01      	subs	r3, #1
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	3b01      	subs	r3, #1
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	691a      	ldr	r2, [r3, #16]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005808:	b2d2      	uxtb	r2, r2
 800580a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005810:	1c5a      	adds	r2, r3, #1
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800581a:	3b01      	subs	r3, #1
 800581c:	b29a      	uxth	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005826:	b29b      	uxth	r3, r3
 8005828:	3b01      	subs	r3, #1
 800582a:	b29a      	uxth	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005830:	e04e      	b.n	80058d0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005832:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005834:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f000 fba6 	bl	8005f88 <I2C_WaitOnRXNEFlagUntilTimeout>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e058      	b.n	80058f8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	691a      	ldr	r2, [r3, #16]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005850:	b2d2      	uxtb	r2, r2
 8005852:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005858:	1c5a      	adds	r2, r3, #1
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005862:	3b01      	subs	r3, #1
 8005864:	b29a      	uxth	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800586e:	b29b      	uxth	r3, r3
 8005870:	3b01      	subs	r3, #1
 8005872:	b29a      	uxth	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	f003 0304 	and.w	r3, r3, #4
 8005882:	2b04      	cmp	r3, #4
 8005884:	d124      	bne.n	80058d0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800588a:	2b03      	cmp	r3, #3
 800588c:	d107      	bne.n	800589e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800589c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	691a      	ldr	r2, [r3, #16]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a8:	b2d2      	uxtb	r2, r2
 80058aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b0:	1c5a      	adds	r2, r3, #1
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058ba:	3b01      	subs	r3, #1
 80058bc:	b29a      	uxth	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	3b01      	subs	r3, #1
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f47f aeb6 	bne.w	8005646 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2220      	movs	r2, #32
 80058de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80058f2:	2300      	movs	r3, #0
 80058f4:	e000      	b.n	80058f8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80058f6:	2302      	movs	r3, #2
  }
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3728      	adds	r7, #40	@ 0x28
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	00010004 	.word	0x00010004

08005904 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005912:	b2db      	uxtb	r3, r3
}
 8005914:	4618      	mov	r0, r3
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800592c:	4618      	mov	r0, r3
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b088      	sub	sp, #32
 800593c:	af02      	add	r7, sp, #8
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	4608      	mov	r0, r1
 8005942:	4611      	mov	r1, r2
 8005944:	461a      	mov	r2, r3
 8005946:	4603      	mov	r3, r0
 8005948:	817b      	strh	r3, [r7, #10]
 800594a:	460b      	mov	r3, r1
 800594c:	813b      	strh	r3, [r7, #8]
 800594e:	4613      	mov	r3, r2
 8005950:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005960:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005964:	9300      	str	r3, [sp, #0]
 8005966:	6a3b      	ldr	r3, [r7, #32]
 8005968:	2200      	movs	r2, #0
 800596a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	f000 f960 	bl	8005c34 <I2C_WaitOnFlagUntilTimeout>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00d      	beq.n	8005996 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005984:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005988:	d103      	bne.n	8005992 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005990:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e05f      	b.n	8005a56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005996:	897b      	ldrh	r3, [r7, #10]
 8005998:	b2db      	uxtb	r3, r3
 800599a:	461a      	mov	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80059a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a8:	6a3a      	ldr	r2, [r7, #32]
 80059aa:	492d      	ldr	r1, [pc, #180]	@ (8005a60 <I2C_RequestMemoryWrite+0x128>)
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f000 f9bb 	bl	8005d28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d001      	beq.n	80059bc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e04c      	b.n	8005a56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059bc:	2300      	movs	r3, #0
 80059be:	617b      	str	r3, [r7, #20]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	617b      	str	r3, [r7, #20]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	617b      	str	r3, [r7, #20]
 80059d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059d4:	6a39      	ldr	r1, [r7, #32]
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f000 fa46 	bl	8005e68 <I2C_WaitOnTXEFlagUntilTimeout>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00d      	beq.n	80059fe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e6:	2b04      	cmp	r3, #4
 80059e8:	d107      	bne.n	80059fa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e02b      	b.n	8005a56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059fe:	88fb      	ldrh	r3, [r7, #6]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d105      	bne.n	8005a10 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a04:	893b      	ldrh	r3, [r7, #8]
 8005a06:	b2da      	uxtb	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	611a      	str	r2, [r3, #16]
 8005a0e:	e021      	b.n	8005a54 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005a10:	893b      	ldrh	r3, [r7, #8]
 8005a12:	0a1b      	lsrs	r3, r3, #8
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	b2da      	uxtb	r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a20:	6a39      	ldr	r1, [r7, #32]
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f000 fa20 	bl	8005e68 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00d      	beq.n	8005a4a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a32:	2b04      	cmp	r3, #4
 8005a34:	d107      	bne.n	8005a46 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e005      	b.n	8005a56 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a4a:	893b      	ldrh	r3, [r7, #8]
 8005a4c:	b2da      	uxtb	r2, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3718      	adds	r7, #24
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	00010002 	.word	0x00010002

08005a64 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b088      	sub	sp, #32
 8005a68:	af02      	add	r7, sp, #8
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	4608      	mov	r0, r1
 8005a6e:	4611      	mov	r1, r2
 8005a70:	461a      	mov	r2, r3
 8005a72:	4603      	mov	r3, r0
 8005a74:	817b      	strh	r3, [r7, #10]
 8005a76:	460b      	mov	r3, r1
 8005a78:	813b      	strh	r3, [r7, #8]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005a8c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa0:	9300      	str	r3, [sp, #0]
 8005aa2:	6a3b      	ldr	r3, [r7, #32]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f000 f8c2 	bl	8005c34 <I2C_WaitOnFlagUntilTimeout>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00d      	beq.n	8005ad2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ac0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ac4:	d103      	bne.n	8005ace <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005acc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e0aa      	b.n	8005c28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ad2:	897b      	ldrh	r3, [r7, #10]
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005ae0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae4:	6a3a      	ldr	r2, [r7, #32]
 8005ae6:	4952      	ldr	r1, [pc, #328]	@ (8005c30 <I2C_RequestMemoryRead+0x1cc>)
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f000 f91d 	bl	8005d28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d001      	beq.n	8005af8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e097      	b.n	8005c28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005af8:	2300      	movs	r3, #0
 8005afa:	617b      	str	r3, [r7, #20]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	617b      	str	r3, [r7, #20]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	617b      	str	r3, [r7, #20]
 8005b0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b10:	6a39      	ldr	r1, [r7, #32]
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f000 f9a8 	bl	8005e68 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00d      	beq.n	8005b3a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b22:	2b04      	cmp	r3, #4
 8005b24:	d107      	bne.n	8005b36 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e076      	b.n	8005c28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b3a:	88fb      	ldrh	r3, [r7, #6]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d105      	bne.n	8005b4c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b40:	893b      	ldrh	r3, [r7, #8]
 8005b42:	b2da      	uxtb	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	611a      	str	r2, [r3, #16]
 8005b4a:	e021      	b.n	8005b90 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b4c:	893b      	ldrh	r3, [r7, #8]
 8005b4e:	0a1b      	lsrs	r3, r3, #8
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	b2da      	uxtb	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b5c:	6a39      	ldr	r1, [r7, #32]
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f000 f982 	bl	8005e68 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00d      	beq.n	8005b86 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b6e:	2b04      	cmp	r3, #4
 8005b70:	d107      	bne.n	8005b82 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e050      	b.n	8005c28 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b86:	893b      	ldrh	r3, [r7, #8]
 8005b88:	b2da      	uxtb	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b92:	6a39      	ldr	r1, [r7, #32]
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f000 f967 	bl	8005e68 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00d      	beq.n	8005bbc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba4:	2b04      	cmp	r3, #4
 8005ba6:	d107      	bne.n	8005bb8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bb6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e035      	b.n	8005c28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005bca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f000 f82b 	bl	8005c34 <I2C_WaitOnFlagUntilTimeout>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00d      	beq.n	8005c00 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bf2:	d103      	bne.n	8005bfc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bfa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e013      	b.n	8005c28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005c00:	897b      	ldrh	r3, [r7, #10]
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	f043 0301 	orr.w	r3, r3, #1
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c12:	6a3a      	ldr	r2, [r7, #32]
 8005c14:	4906      	ldr	r1, [pc, #24]	@ (8005c30 <I2C_RequestMemoryRead+0x1cc>)
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f000 f886 	bl	8005d28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d001      	beq.n	8005c26 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e000      	b.n	8005c28 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3718      	adds	r7, #24
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	00010002 	.word	0x00010002

08005c34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	603b      	str	r3, [r7, #0]
 8005c40:	4613      	mov	r3, r2
 8005c42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c44:	e048      	b.n	8005cd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c4c:	d044      	beq.n	8005cd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c4e:	f7fe fdc9 	bl	80047e4 <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	683a      	ldr	r2, [r7, #0]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d302      	bcc.n	8005c64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d139      	bne.n	8005cd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	0c1b      	lsrs	r3, r3, #16
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d10d      	bne.n	8005c8a <I2C_WaitOnFlagUntilTimeout+0x56>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	695b      	ldr	r3, [r3, #20]
 8005c74:	43da      	mvns	r2, r3
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	4013      	ands	r3, r2
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	bf0c      	ite	eq
 8005c80:	2301      	moveq	r3, #1
 8005c82:	2300      	movne	r3, #0
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	461a      	mov	r2, r3
 8005c88:	e00c      	b.n	8005ca4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	43da      	mvns	r2, r3
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	4013      	ands	r3, r2
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	bf0c      	ite	eq
 8005c9c:	2301      	moveq	r3, #1
 8005c9e:	2300      	movne	r3, #0
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	79fb      	ldrb	r3, [r7, #7]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d116      	bne.n	8005cd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cc4:	f043 0220 	orr.w	r2, r3, #32
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e023      	b.n	8005d20 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	0c1b      	lsrs	r3, r3, #16
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d10d      	bne.n	8005cfe <I2C_WaitOnFlagUntilTimeout+0xca>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	43da      	mvns	r2, r3
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	4013      	ands	r3, r2
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	bf0c      	ite	eq
 8005cf4:	2301      	moveq	r3, #1
 8005cf6:	2300      	movne	r3, #0
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	e00c      	b.n	8005d18 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	43da      	mvns	r2, r3
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	4013      	ands	r3, r2
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	bf0c      	ite	eq
 8005d10:	2301      	moveq	r3, #1
 8005d12:	2300      	movne	r3, #0
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	461a      	mov	r2, r3
 8005d18:	79fb      	ldrb	r3, [r7, #7]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d093      	beq.n	8005c46 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
 8005d34:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d36:	e071      	b.n	8005e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d46:	d123      	bne.n	8005d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d56:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005d60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2220      	movs	r2, #32
 8005d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d7c:	f043 0204 	orr.w	r2, r3, #4
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e067      	b.n	8005e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d96:	d041      	beq.n	8005e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d98:	f7fe fd24 	bl	80047e4 <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d302      	bcc.n	8005dae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d136      	bne.n	8005e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	0c1b      	lsrs	r3, r3, #16
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d10c      	bne.n	8005dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	43da      	mvns	r2, r3
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	bf14      	ite	ne
 8005dca:	2301      	movne	r3, #1
 8005dcc:	2300      	moveq	r3, #0
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	e00b      	b.n	8005dea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	699b      	ldr	r3, [r3, #24]
 8005dd8:	43da      	mvns	r2, r3
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	4013      	ands	r3, r2
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	bf14      	ite	ne
 8005de4:	2301      	movne	r3, #1
 8005de6:	2300      	moveq	r3, #0
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d016      	beq.n	8005e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2220      	movs	r2, #32
 8005df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e08:	f043 0220 	orr.w	r2, r3, #32
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e021      	b.n	8005e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	0c1b      	lsrs	r3, r3, #16
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d10c      	bne.n	8005e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	695b      	ldr	r3, [r3, #20]
 8005e2c:	43da      	mvns	r2, r3
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	4013      	ands	r3, r2
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	bf14      	ite	ne
 8005e38:	2301      	movne	r3, #1
 8005e3a:	2300      	moveq	r3, #0
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	e00b      	b.n	8005e58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	43da      	mvns	r2, r3
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	bf14      	ite	ne
 8005e52:	2301      	movne	r3, #1
 8005e54:	2300      	moveq	r3, #0
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f47f af6d 	bne.w	8005d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e74:	e034      	b.n	8005ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f000 f8e3 	bl	8006042 <I2C_IsAcknowledgeFailed>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d001      	beq.n	8005e86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e034      	b.n	8005ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e8c:	d028      	beq.n	8005ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e8e:	f7fe fca9 	bl	80047e4 <HAL_GetTick>
 8005e92:	4602      	mov	r2, r0
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d302      	bcc.n	8005ea4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d11d      	bne.n	8005ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eae:	2b80      	cmp	r3, #128	@ 0x80
 8005eb0:	d016      	beq.n	8005ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2220      	movs	r2, #32
 8005ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ecc:	f043 0220 	orr.w	r2, r3, #32
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e007      	b.n	8005ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eea:	2b80      	cmp	r3, #128	@ 0x80
 8005eec:	d1c3      	bne.n	8005e76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3710      	adds	r7, #16
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f04:	e034      	b.n	8005f70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f000 f89b 	bl	8006042 <I2C_IsAcknowledgeFailed>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d001      	beq.n	8005f16 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e034      	b.n	8005f80 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f1c:	d028      	beq.n	8005f70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f1e:	f7fe fc61 	bl	80047e4 <HAL_GetTick>
 8005f22:	4602      	mov	r2, r0
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	68ba      	ldr	r2, [r7, #8]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d302      	bcc.n	8005f34 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d11d      	bne.n	8005f70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	f003 0304 	and.w	r3, r3, #4
 8005f3e:	2b04      	cmp	r3, #4
 8005f40:	d016      	beq.n	8005f70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2220      	movs	r2, #32
 8005f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f5c:	f043 0220 	orr.w	r2, r3, #32
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e007      	b.n	8005f80 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	f003 0304 	and.w	r3, r3, #4
 8005f7a:	2b04      	cmp	r3, #4
 8005f7c:	d1c3      	bne.n	8005f06 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f94:	e049      	b.n	800602a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	695b      	ldr	r3, [r3, #20]
 8005f9c:	f003 0310 	and.w	r3, r3, #16
 8005fa0:	2b10      	cmp	r3, #16
 8005fa2:	d119      	bne.n	8005fd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f06f 0210 	mvn.w	r2, #16
 8005fac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2220      	movs	r2, #32
 8005fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e030      	b.n	800603a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fd8:	f7fe fc04 	bl	80047e4 <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	68ba      	ldr	r2, [r7, #8]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d302      	bcc.n	8005fee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d11d      	bne.n	800602a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ff8:	2b40      	cmp	r3, #64	@ 0x40
 8005ffa:	d016      	beq.n	800602a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2220      	movs	r2, #32
 8006006:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006016:	f043 0220 	orr.w	r2, r3, #32
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e007      	b.n	800603a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	695b      	ldr	r3, [r3, #20]
 8006030:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006034:	2b40      	cmp	r3, #64	@ 0x40
 8006036:	d1ae      	bne.n	8005f96 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006042:	b480      	push	{r7}
 8006044:	b083      	sub	sp, #12
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	695b      	ldr	r3, [r3, #20]
 8006050:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006054:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006058:	d11b      	bne.n	8006092 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006062:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2220      	movs	r2, #32
 800606e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800607e:	f043 0204 	orr.w	r2, r3, #4
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e000      	b.n	8006094 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d101      	bne.n	80060b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e267      	b.n	8006582 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d075      	beq.n	80061aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80060be:	4b88      	ldr	r3, [pc, #544]	@ (80062e0 <HAL_RCC_OscConfig+0x240>)
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f003 030c 	and.w	r3, r3, #12
 80060c6:	2b04      	cmp	r3, #4
 80060c8:	d00c      	beq.n	80060e4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060ca:	4b85      	ldr	r3, [pc, #532]	@ (80062e0 <HAL_RCC_OscConfig+0x240>)
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80060d2:	2b08      	cmp	r3, #8
 80060d4:	d112      	bne.n	80060fc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060d6:	4b82      	ldr	r3, [pc, #520]	@ (80062e0 <HAL_RCC_OscConfig+0x240>)
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80060e2:	d10b      	bne.n	80060fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060e4:	4b7e      	ldr	r3, [pc, #504]	@ (80062e0 <HAL_RCC_OscConfig+0x240>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d05b      	beq.n	80061a8 <HAL_RCC_OscConfig+0x108>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d157      	bne.n	80061a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e242      	b.n	8006582 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006104:	d106      	bne.n	8006114 <HAL_RCC_OscConfig+0x74>
 8006106:	4b76      	ldr	r3, [pc, #472]	@ (80062e0 <HAL_RCC_OscConfig+0x240>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a75      	ldr	r2, [pc, #468]	@ (80062e0 <HAL_RCC_OscConfig+0x240>)
 800610c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006110:	6013      	str	r3, [r2, #0]
 8006112:	e01d      	b.n	8006150 <HAL_RCC_OscConfig+0xb0>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800611c:	d10c      	bne.n	8006138 <HAL_RCC_OscConfig+0x98>
 800611e:	4b70      	ldr	r3, [pc, #448]	@ (80062e0 <HAL_RCC_OscConfig+0x240>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a6f      	ldr	r2, [pc, #444]	@ (80062e0 <HAL_RCC_OscConfig+0x240>)
 8006124:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006128:	6013      	str	r3, [r2, #0]
 800612a:	4b6d      	ldr	r3, [pc, #436]	@ (80062e0 <HAL_RCC_OscConfig+0x240>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a6c      	ldr	r2, [pc, #432]	@ (80062e0 <HAL_RCC_OscConfig+0x240>)
 8006130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006134:	6013      	str	r3, [r2, #0]
 8006136:	e00b      	b.n	8006150 <HAL_RCC_OscConfig+0xb0>
 8006138:	4b69      	ldr	r3, [pc, #420]	@ (80062e0 <HAL_RCC_OscConfig+0x240>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a68      	ldr	r2, [pc, #416]	@ (80062e0 <HAL_RCC_OscConfig+0x240>)
 800613e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006142:	6013      	str	r3, [r2, #0]
 8006144:	4b66      	ldr	r3, [pc, #408]	@ (80062e0 <HAL_RCC_OscConfig+0x240>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a65      	ldr	r2, [pc, #404]	@ (80062e0 <HAL_RCC_OscConfig+0x240>)
 800614a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800614e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d013      	beq.n	8006180 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006158:	f7fe fb44 	bl	80047e4 <HAL_GetTick>
 800615c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800615e:	e008      	b.n	8006172 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006160:	f7fe fb40 	bl	80047e4 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	2b64      	cmp	r3, #100	@ 0x64
 800616c:	d901      	bls.n	8006172 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e207      	b.n	8006582 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006172:	4b5b      	ldr	r3, [pc, #364]	@ (80062e0 <HAL_RCC_OscConfig+0x240>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d0f0      	beq.n	8006160 <HAL_RCC_OscConfig+0xc0>
 800617e:	e014      	b.n	80061aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006180:	f7fe fb30 	bl	80047e4 <HAL_GetTick>
 8006184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006186:	e008      	b.n	800619a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006188:	f7fe fb2c 	bl	80047e4 <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	2b64      	cmp	r3, #100	@ 0x64
 8006194:	d901      	bls.n	800619a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e1f3      	b.n	8006582 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800619a:	4b51      	ldr	r3, [pc, #324]	@ (80062e0 <HAL_RCC_OscConfig+0x240>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1f0      	bne.n	8006188 <HAL_RCC_OscConfig+0xe8>
 80061a6:	e000      	b.n	80061aa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0302 	and.w	r3, r3, #2
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d063      	beq.n	800627e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80061b6:	4b4a      	ldr	r3, [pc, #296]	@ (80062e0 <HAL_RCC_OscConfig+0x240>)
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f003 030c 	and.w	r3, r3, #12
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00b      	beq.n	80061da <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061c2:	4b47      	ldr	r3, [pc, #284]	@ (80062e0 <HAL_RCC_OscConfig+0x240>)
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80061ca:	2b08      	cmp	r3, #8
 80061cc:	d11c      	bne.n	8006208 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061ce:	4b44      	ldr	r3, [pc, #272]	@ (80062e0 <HAL_RCC_OscConfig+0x240>)
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d116      	bne.n	8006208 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061da:	4b41      	ldr	r3, [pc, #260]	@ (80062e0 <HAL_RCC_OscConfig+0x240>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 0302 	and.w	r3, r3, #2
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d005      	beq.n	80061f2 <HAL_RCC_OscConfig+0x152>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d001      	beq.n	80061f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e1c7      	b.n	8006582 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061f2:	4b3b      	ldr	r3, [pc, #236]	@ (80062e0 <HAL_RCC_OscConfig+0x240>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	00db      	lsls	r3, r3, #3
 8006200:	4937      	ldr	r1, [pc, #220]	@ (80062e0 <HAL_RCC_OscConfig+0x240>)
 8006202:	4313      	orrs	r3, r2
 8006204:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006206:	e03a      	b.n	800627e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d020      	beq.n	8006252 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006210:	4b34      	ldr	r3, [pc, #208]	@ (80062e4 <HAL_RCC_OscConfig+0x244>)
 8006212:	2201      	movs	r2, #1
 8006214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006216:	f7fe fae5 	bl	80047e4 <HAL_GetTick>
 800621a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800621c:	e008      	b.n	8006230 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800621e:	f7fe fae1 	bl	80047e4 <HAL_GetTick>
 8006222:	4602      	mov	r2, r0
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	2b02      	cmp	r3, #2
 800622a:	d901      	bls.n	8006230 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e1a8      	b.n	8006582 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006230:	4b2b      	ldr	r3, [pc, #172]	@ (80062e0 <HAL_RCC_OscConfig+0x240>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0302 	and.w	r3, r3, #2
 8006238:	2b00      	cmp	r3, #0
 800623a:	d0f0      	beq.n	800621e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800623c:	4b28      	ldr	r3, [pc, #160]	@ (80062e0 <HAL_RCC_OscConfig+0x240>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	00db      	lsls	r3, r3, #3
 800624a:	4925      	ldr	r1, [pc, #148]	@ (80062e0 <HAL_RCC_OscConfig+0x240>)
 800624c:	4313      	orrs	r3, r2
 800624e:	600b      	str	r3, [r1, #0]
 8006250:	e015      	b.n	800627e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006252:	4b24      	ldr	r3, [pc, #144]	@ (80062e4 <HAL_RCC_OscConfig+0x244>)
 8006254:	2200      	movs	r2, #0
 8006256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006258:	f7fe fac4 	bl	80047e4 <HAL_GetTick>
 800625c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800625e:	e008      	b.n	8006272 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006260:	f7fe fac0 	bl	80047e4 <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	2b02      	cmp	r3, #2
 800626c:	d901      	bls.n	8006272 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e187      	b.n	8006582 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006272:	4b1b      	ldr	r3, [pc, #108]	@ (80062e0 <HAL_RCC_OscConfig+0x240>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 0302 	and.w	r3, r3, #2
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1f0      	bne.n	8006260 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0308 	and.w	r3, r3, #8
 8006286:	2b00      	cmp	r3, #0
 8006288:	d036      	beq.n	80062f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d016      	beq.n	80062c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006292:	4b15      	ldr	r3, [pc, #84]	@ (80062e8 <HAL_RCC_OscConfig+0x248>)
 8006294:	2201      	movs	r2, #1
 8006296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006298:	f7fe faa4 	bl	80047e4 <HAL_GetTick>
 800629c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800629e:	e008      	b.n	80062b2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062a0:	f7fe faa0 	bl	80047e4 <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d901      	bls.n	80062b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e167      	b.n	8006582 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062b2:	4b0b      	ldr	r3, [pc, #44]	@ (80062e0 <HAL_RCC_OscConfig+0x240>)
 80062b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062b6:	f003 0302 	and.w	r3, r3, #2
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d0f0      	beq.n	80062a0 <HAL_RCC_OscConfig+0x200>
 80062be:	e01b      	b.n	80062f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062c0:	4b09      	ldr	r3, [pc, #36]	@ (80062e8 <HAL_RCC_OscConfig+0x248>)
 80062c2:	2200      	movs	r2, #0
 80062c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062c6:	f7fe fa8d 	bl	80047e4 <HAL_GetTick>
 80062ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062cc:	e00e      	b.n	80062ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062ce:	f7fe fa89 	bl	80047e4 <HAL_GetTick>
 80062d2:	4602      	mov	r2, r0
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d907      	bls.n	80062ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e150      	b.n	8006582 <HAL_RCC_OscConfig+0x4e2>
 80062e0:	40023800 	.word	0x40023800
 80062e4:	42470000 	.word	0x42470000
 80062e8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062ec:	4b88      	ldr	r3, [pc, #544]	@ (8006510 <HAL_RCC_OscConfig+0x470>)
 80062ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062f0:	f003 0302 	and.w	r3, r3, #2
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1ea      	bne.n	80062ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0304 	and.w	r3, r3, #4
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 8097 	beq.w	8006434 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006306:	2300      	movs	r3, #0
 8006308:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800630a:	4b81      	ldr	r3, [pc, #516]	@ (8006510 <HAL_RCC_OscConfig+0x470>)
 800630c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800630e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006312:	2b00      	cmp	r3, #0
 8006314:	d10f      	bne.n	8006336 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006316:	2300      	movs	r3, #0
 8006318:	60bb      	str	r3, [r7, #8]
 800631a:	4b7d      	ldr	r3, [pc, #500]	@ (8006510 <HAL_RCC_OscConfig+0x470>)
 800631c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800631e:	4a7c      	ldr	r2, [pc, #496]	@ (8006510 <HAL_RCC_OscConfig+0x470>)
 8006320:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006324:	6413      	str	r3, [r2, #64]	@ 0x40
 8006326:	4b7a      	ldr	r3, [pc, #488]	@ (8006510 <HAL_RCC_OscConfig+0x470>)
 8006328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800632a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800632e:	60bb      	str	r3, [r7, #8]
 8006330:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006332:	2301      	movs	r3, #1
 8006334:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006336:	4b77      	ldr	r3, [pc, #476]	@ (8006514 <HAL_RCC_OscConfig+0x474>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800633e:	2b00      	cmp	r3, #0
 8006340:	d118      	bne.n	8006374 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006342:	4b74      	ldr	r3, [pc, #464]	@ (8006514 <HAL_RCC_OscConfig+0x474>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a73      	ldr	r2, [pc, #460]	@ (8006514 <HAL_RCC_OscConfig+0x474>)
 8006348:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800634c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800634e:	f7fe fa49 	bl	80047e4 <HAL_GetTick>
 8006352:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006354:	e008      	b.n	8006368 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006356:	f7fe fa45 	bl	80047e4 <HAL_GetTick>
 800635a:	4602      	mov	r2, r0
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	2b02      	cmp	r3, #2
 8006362:	d901      	bls.n	8006368 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006364:	2303      	movs	r3, #3
 8006366:	e10c      	b.n	8006582 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006368:	4b6a      	ldr	r3, [pc, #424]	@ (8006514 <HAL_RCC_OscConfig+0x474>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006370:	2b00      	cmp	r3, #0
 8006372:	d0f0      	beq.n	8006356 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	2b01      	cmp	r3, #1
 800637a:	d106      	bne.n	800638a <HAL_RCC_OscConfig+0x2ea>
 800637c:	4b64      	ldr	r3, [pc, #400]	@ (8006510 <HAL_RCC_OscConfig+0x470>)
 800637e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006380:	4a63      	ldr	r2, [pc, #396]	@ (8006510 <HAL_RCC_OscConfig+0x470>)
 8006382:	f043 0301 	orr.w	r3, r3, #1
 8006386:	6713      	str	r3, [r2, #112]	@ 0x70
 8006388:	e01c      	b.n	80063c4 <HAL_RCC_OscConfig+0x324>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	2b05      	cmp	r3, #5
 8006390:	d10c      	bne.n	80063ac <HAL_RCC_OscConfig+0x30c>
 8006392:	4b5f      	ldr	r3, [pc, #380]	@ (8006510 <HAL_RCC_OscConfig+0x470>)
 8006394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006396:	4a5e      	ldr	r2, [pc, #376]	@ (8006510 <HAL_RCC_OscConfig+0x470>)
 8006398:	f043 0304 	orr.w	r3, r3, #4
 800639c:	6713      	str	r3, [r2, #112]	@ 0x70
 800639e:	4b5c      	ldr	r3, [pc, #368]	@ (8006510 <HAL_RCC_OscConfig+0x470>)
 80063a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063a2:	4a5b      	ldr	r2, [pc, #364]	@ (8006510 <HAL_RCC_OscConfig+0x470>)
 80063a4:	f043 0301 	orr.w	r3, r3, #1
 80063a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80063aa:	e00b      	b.n	80063c4 <HAL_RCC_OscConfig+0x324>
 80063ac:	4b58      	ldr	r3, [pc, #352]	@ (8006510 <HAL_RCC_OscConfig+0x470>)
 80063ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063b0:	4a57      	ldr	r2, [pc, #348]	@ (8006510 <HAL_RCC_OscConfig+0x470>)
 80063b2:	f023 0301 	bic.w	r3, r3, #1
 80063b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80063b8:	4b55      	ldr	r3, [pc, #340]	@ (8006510 <HAL_RCC_OscConfig+0x470>)
 80063ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063bc:	4a54      	ldr	r2, [pc, #336]	@ (8006510 <HAL_RCC_OscConfig+0x470>)
 80063be:	f023 0304 	bic.w	r3, r3, #4
 80063c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d015      	beq.n	80063f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063cc:	f7fe fa0a 	bl	80047e4 <HAL_GetTick>
 80063d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063d2:	e00a      	b.n	80063ea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063d4:	f7fe fa06 	bl	80047e4 <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d901      	bls.n	80063ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e0cb      	b.n	8006582 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063ea:	4b49      	ldr	r3, [pc, #292]	@ (8006510 <HAL_RCC_OscConfig+0x470>)
 80063ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ee:	f003 0302 	and.w	r3, r3, #2
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d0ee      	beq.n	80063d4 <HAL_RCC_OscConfig+0x334>
 80063f6:	e014      	b.n	8006422 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063f8:	f7fe f9f4 	bl	80047e4 <HAL_GetTick>
 80063fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063fe:	e00a      	b.n	8006416 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006400:	f7fe f9f0 	bl	80047e4 <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800640e:	4293      	cmp	r3, r2
 8006410:	d901      	bls.n	8006416 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e0b5      	b.n	8006582 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006416:	4b3e      	ldr	r3, [pc, #248]	@ (8006510 <HAL_RCC_OscConfig+0x470>)
 8006418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1ee      	bne.n	8006400 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006422:	7dfb      	ldrb	r3, [r7, #23]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d105      	bne.n	8006434 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006428:	4b39      	ldr	r3, [pc, #228]	@ (8006510 <HAL_RCC_OscConfig+0x470>)
 800642a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800642c:	4a38      	ldr	r2, [pc, #224]	@ (8006510 <HAL_RCC_OscConfig+0x470>)
 800642e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006432:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	2b00      	cmp	r3, #0
 800643a:	f000 80a1 	beq.w	8006580 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800643e:	4b34      	ldr	r3, [pc, #208]	@ (8006510 <HAL_RCC_OscConfig+0x470>)
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f003 030c 	and.w	r3, r3, #12
 8006446:	2b08      	cmp	r3, #8
 8006448:	d05c      	beq.n	8006504 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	2b02      	cmp	r3, #2
 8006450:	d141      	bne.n	80064d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006452:	4b31      	ldr	r3, [pc, #196]	@ (8006518 <HAL_RCC_OscConfig+0x478>)
 8006454:	2200      	movs	r2, #0
 8006456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006458:	f7fe f9c4 	bl	80047e4 <HAL_GetTick>
 800645c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800645e:	e008      	b.n	8006472 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006460:	f7fe f9c0 	bl	80047e4 <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	2b02      	cmp	r3, #2
 800646c:	d901      	bls.n	8006472 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e087      	b.n	8006582 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006472:	4b27      	ldr	r3, [pc, #156]	@ (8006510 <HAL_RCC_OscConfig+0x470>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1f0      	bne.n	8006460 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	69da      	ldr	r2, [r3, #28]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	431a      	orrs	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800648c:	019b      	lsls	r3, r3, #6
 800648e:	431a      	orrs	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006494:	085b      	lsrs	r3, r3, #1
 8006496:	3b01      	subs	r3, #1
 8006498:	041b      	lsls	r3, r3, #16
 800649a:	431a      	orrs	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a0:	061b      	lsls	r3, r3, #24
 80064a2:	491b      	ldr	r1, [pc, #108]	@ (8006510 <HAL_RCC_OscConfig+0x470>)
 80064a4:	4313      	orrs	r3, r2
 80064a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064a8:	4b1b      	ldr	r3, [pc, #108]	@ (8006518 <HAL_RCC_OscConfig+0x478>)
 80064aa:	2201      	movs	r2, #1
 80064ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064ae:	f7fe f999 	bl	80047e4 <HAL_GetTick>
 80064b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064b4:	e008      	b.n	80064c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064b6:	f7fe f995 	bl	80047e4 <HAL_GetTick>
 80064ba:	4602      	mov	r2, r0
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d901      	bls.n	80064c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80064c4:	2303      	movs	r3, #3
 80064c6:	e05c      	b.n	8006582 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064c8:	4b11      	ldr	r3, [pc, #68]	@ (8006510 <HAL_RCC_OscConfig+0x470>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d0f0      	beq.n	80064b6 <HAL_RCC_OscConfig+0x416>
 80064d4:	e054      	b.n	8006580 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064d6:	4b10      	ldr	r3, [pc, #64]	@ (8006518 <HAL_RCC_OscConfig+0x478>)
 80064d8:	2200      	movs	r2, #0
 80064da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064dc:	f7fe f982 	bl	80047e4 <HAL_GetTick>
 80064e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064e2:	e008      	b.n	80064f6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064e4:	f7fe f97e 	bl	80047e4 <HAL_GetTick>
 80064e8:	4602      	mov	r2, r0
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d901      	bls.n	80064f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e045      	b.n	8006582 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064f6:	4b06      	ldr	r3, [pc, #24]	@ (8006510 <HAL_RCC_OscConfig+0x470>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1f0      	bne.n	80064e4 <HAL_RCC_OscConfig+0x444>
 8006502:	e03d      	b.n	8006580 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	699b      	ldr	r3, [r3, #24]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d107      	bne.n	800651c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e038      	b.n	8006582 <HAL_RCC_OscConfig+0x4e2>
 8006510:	40023800 	.word	0x40023800
 8006514:	40007000 	.word	0x40007000
 8006518:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800651c:	4b1b      	ldr	r3, [pc, #108]	@ (800658c <HAL_RCC_OscConfig+0x4ec>)
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	699b      	ldr	r3, [r3, #24]
 8006526:	2b01      	cmp	r3, #1
 8006528:	d028      	beq.n	800657c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006534:	429a      	cmp	r2, r3
 8006536:	d121      	bne.n	800657c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006542:	429a      	cmp	r2, r3
 8006544:	d11a      	bne.n	800657c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800654c:	4013      	ands	r3, r2
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006552:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006554:	4293      	cmp	r3, r2
 8006556:	d111      	bne.n	800657c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006562:	085b      	lsrs	r3, r3, #1
 8006564:	3b01      	subs	r3, #1
 8006566:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006568:	429a      	cmp	r2, r3
 800656a:	d107      	bne.n	800657c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006576:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006578:	429a      	cmp	r2, r3
 800657a:	d001      	beq.n	8006580 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e000      	b.n	8006582 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3718      	adds	r7, #24
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	40023800 	.word	0x40023800

08006590 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d101      	bne.n	80065a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e0cc      	b.n	800673e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065a4:	4b68      	ldr	r3, [pc, #416]	@ (8006748 <HAL_RCC_ClockConfig+0x1b8>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 0307 	and.w	r3, r3, #7
 80065ac:	683a      	ldr	r2, [r7, #0]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d90c      	bls.n	80065cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065b2:	4b65      	ldr	r3, [pc, #404]	@ (8006748 <HAL_RCC_ClockConfig+0x1b8>)
 80065b4:	683a      	ldr	r2, [r7, #0]
 80065b6:	b2d2      	uxtb	r2, r2
 80065b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065ba:	4b63      	ldr	r3, [pc, #396]	@ (8006748 <HAL_RCC_ClockConfig+0x1b8>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0307 	and.w	r3, r3, #7
 80065c2:	683a      	ldr	r2, [r7, #0]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d001      	beq.n	80065cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e0b8      	b.n	800673e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0302 	and.w	r3, r3, #2
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d020      	beq.n	800661a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 0304 	and.w	r3, r3, #4
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d005      	beq.n	80065f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80065e4:	4b59      	ldr	r3, [pc, #356]	@ (800674c <HAL_RCC_ClockConfig+0x1bc>)
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	4a58      	ldr	r2, [pc, #352]	@ (800674c <HAL_RCC_ClockConfig+0x1bc>)
 80065ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80065ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0308 	and.w	r3, r3, #8
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d005      	beq.n	8006608 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80065fc:	4b53      	ldr	r3, [pc, #332]	@ (800674c <HAL_RCC_ClockConfig+0x1bc>)
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	4a52      	ldr	r2, [pc, #328]	@ (800674c <HAL_RCC_ClockConfig+0x1bc>)
 8006602:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006606:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006608:	4b50      	ldr	r3, [pc, #320]	@ (800674c <HAL_RCC_ClockConfig+0x1bc>)
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	494d      	ldr	r1, [pc, #308]	@ (800674c <HAL_RCC_ClockConfig+0x1bc>)
 8006616:	4313      	orrs	r3, r2
 8006618:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	2b00      	cmp	r3, #0
 8006624:	d044      	beq.n	80066b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	2b01      	cmp	r3, #1
 800662c:	d107      	bne.n	800663e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800662e:	4b47      	ldr	r3, [pc, #284]	@ (800674c <HAL_RCC_ClockConfig+0x1bc>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d119      	bne.n	800666e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e07f      	b.n	800673e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	2b02      	cmp	r3, #2
 8006644:	d003      	beq.n	800664e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800664a:	2b03      	cmp	r3, #3
 800664c:	d107      	bne.n	800665e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800664e:	4b3f      	ldr	r3, [pc, #252]	@ (800674c <HAL_RCC_ClockConfig+0x1bc>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006656:	2b00      	cmp	r3, #0
 8006658:	d109      	bne.n	800666e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e06f      	b.n	800673e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800665e:	4b3b      	ldr	r3, [pc, #236]	@ (800674c <HAL_RCC_ClockConfig+0x1bc>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 0302 	and.w	r3, r3, #2
 8006666:	2b00      	cmp	r3, #0
 8006668:	d101      	bne.n	800666e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e067      	b.n	800673e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800666e:	4b37      	ldr	r3, [pc, #220]	@ (800674c <HAL_RCC_ClockConfig+0x1bc>)
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	f023 0203 	bic.w	r2, r3, #3
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	4934      	ldr	r1, [pc, #208]	@ (800674c <HAL_RCC_ClockConfig+0x1bc>)
 800667c:	4313      	orrs	r3, r2
 800667e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006680:	f7fe f8b0 	bl	80047e4 <HAL_GetTick>
 8006684:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006686:	e00a      	b.n	800669e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006688:	f7fe f8ac 	bl	80047e4 <HAL_GetTick>
 800668c:	4602      	mov	r2, r0
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006696:	4293      	cmp	r3, r2
 8006698:	d901      	bls.n	800669e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	e04f      	b.n	800673e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800669e:	4b2b      	ldr	r3, [pc, #172]	@ (800674c <HAL_RCC_ClockConfig+0x1bc>)
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f003 020c 	and.w	r2, r3, #12
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d1eb      	bne.n	8006688 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80066b0:	4b25      	ldr	r3, [pc, #148]	@ (8006748 <HAL_RCC_ClockConfig+0x1b8>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 0307 	and.w	r3, r3, #7
 80066b8:	683a      	ldr	r2, [r7, #0]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d20c      	bcs.n	80066d8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066be:	4b22      	ldr	r3, [pc, #136]	@ (8006748 <HAL_RCC_ClockConfig+0x1b8>)
 80066c0:	683a      	ldr	r2, [r7, #0]
 80066c2:	b2d2      	uxtb	r2, r2
 80066c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066c6:	4b20      	ldr	r3, [pc, #128]	@ (8006748 <HAL_RCC_ClockConfig+0x1b8>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0307 	and.w	r3, r3, #7
 80066ce:	683a      	ldr	r2, [r7, #0]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d001      	beq.n	80066d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e032      	b.n	800673e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0304 	and.w	r3, r3, #4
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d008      	beq.n	80066f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066e4:	4b19      	ldr	r3, [pc, #100]	@ (800674c <HAL_RCC_ClockConfig+0x1bc>)
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	4916      	ldr	r1, [pc, #88]	@ (800674c <HAL_RCC_ClockConfig+0x1bc>)
 80066f2:	4313      	orrs	r3, r2
 80066f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0308 	and.w	r3, r3, #8
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d009      	beq.n	8006716 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006702:	4b12      	ldr	r3, [pc, #72]	@ (800674c <HAL_RCC_ClockConfig+0x1bc>)
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	00db      	lsls	r3, r3, #3
 8006710:	490e      	ldr	r1, [pc, #56]	@ (800674c <HAL_RCC_ClockConfig+0x1bc>)
 8006712:	4313      	orrs	r3, r2
 8006714:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006716:	f000 f821 	bl	800675c <HAL_RCC_GetSysClockFreq>
 800671a:	4602      	mov	r2, r0
 800671c:	4b0b      	ldr	r3, [pc, #44]	@ (800674c <HAL_RCC_ClockConfig+0x1bc>)
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	091b      	lsrs	r3, r3, #4
 8006722:	f003 030f 	and.w	r3, r3, #15
 8006726:	490a      	ldr	r1, [pc, #40]	@ (8006750 <HAL_RCC_ClockConfig+0x1c0>)
 8006728:	5ccb      	ldrb	r3, [r1, r3]
 800672a:	fa22 f303 	lsr.w	r3, r2, r3
 800672e:	4a09      	ldr	r2, [pc, #36]	@ (8006754 <HAL_RCC_ClockConfig+0x1c4>)
 8006730:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006732:	4b09      	ldr	r3, [pc, #36]	@ (8006758 <HAL_RCC_ClockConfig+0x1c8>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4618      	mov	r0, r3
 8006738:	f7fe f810 	bl	800475c <HAL_InitTick>

  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	40023c00 	.word	0x40023c00
 800674c:	40023800 	.word	0x40023800
 8006750:	0801db54 	.word	0x0801db54
 8006754:	2000003c 	.word	0x2000003c
 8006758:	20000040 	.word	0x20000040

0800675c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800675c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006760:	b094      	sub	sp, #80	@ 0x50
 8006762:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006764:	2300      	movs	r3, #0
 8006766:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006768:	2300      	movs	r3, #0
 800676a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800676c:	2300      	movs	r3, #0
 800676e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006770:	2300      	movs	r3, #0
 8006772:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006774:	4b79      	ldr	r3, [pc, #484]	@ (800695c <HAL_RCC_GetSysClockFreq+0x200>)
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	f003 030c 	and.w	r3, r3, #12
 800677c:	2b08      	cmp	r3, #8
 800677e:	d00d      	beq.n	800679c <HAL_RCC_GetSysClockFreq+0x40>
 8006780:	2b08      	cmp	r3, #8
 8006782:	f200 80e1 	bhi.w	8006948 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006786:	2b00      	cmp	r3, #0
 8006788:	d002      	beq.n	8006790 <HAL_RCC_GetSysClockFreq+0x34>
 800678a:	2b04      	cmp	r3, #4
 800678c:	d003      	beq.n	8006796 <HAL_RCC_GetSysClockFreq+0x3a>
 800678e:	e0db      	b.n	8006948 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006790:	4b73      	ldr	r3, [pc, #460]	@ (8006960 <HAL_RCC_GetSysClockFreq+0x204>)
 8006792:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006794:	e0db      	b.n	800694e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006796:	4b73      	ldr	r3, [pc, #460]	@ (8006964 <HAL_RCC_GetSysClockFreq+0x208>)
 8006798:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800679a:	e0d8      	b.n	800694e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800679c:	4b6f      	ldr	r3, [pc, #444]	@ (800695c <HAL_RCC_GetSysClockFreq+0x200>)
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067a4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80067a6:	4b6d      	ldr	r3, [pc, #436]	@ (800695c <HAL_RCC_GetSysClockFreq+0x200>)
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d063      	beq.n	800687a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067b2:	4b6a      	ldr	r3, [pc, #424]	@ (800695c <HAL_RCC_GetSysClockFreq+0x200>)
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	099b      	lsrs	r3, r3, #6
 80067b8:	2200      	movs	r2, #0
 80067ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80067be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80067c6:	2300      	movs	r3, #0
 80067c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80067ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80067ce:	4622      	mov	r2, r4
 80067d0:	462b      	mov	r3, r5
 80067d2:	f04f 0000 	mov.w	r0, #0
 80067d6:	f04f 0100 	mov.w	r1, #0
 80067da:	0159      	lsls	r1, r3, #5
 80067dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067e0:	0150      	lsls	r0, r2, #5
 80067e2:	4602      	mov	r2, r0
 80067e4:	460b      	mov	r3, r1
 80067e6:	4621      	mov	r1, r4
 80067e8:	1a51      	subs	r1, r2, r1
 80067ea:	6139      	str	r1, [r7, #16]
 80067ec:	4629      	mov	r1, r5
 80067ee:	eb63 0301 	sbc.w	r3, r3, r1
 80067f2:	617b      	str	r3, [r7, #20]
 80067f4:	f04f 0200 	mov.w	r2, #0
 80067f8:	f04f 0300 	mov.w	r3, #0
 80067fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006800:	4659      	mov	r1, fp
 8006802:	018b      	lsls	r3, r1, #6
 8006804:	4651      	mov	r1, sl
 8006806:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800680a:	4651      	mov	r1, sl
 800680c:	018a      	lsls	r2, r1, #6
 800680e:	4651      	mov	r1, sl
 8006810:	ebb2 0801 	subs.w	r8, r2, r1
 8006814:	4659      	mov	r1, fp
 8006816:	eb63 0901 	sbc.w	r9, r3, r1
 800681a:	f04f 0200 	mov.w	r2, #0
 800681e:	f04f 0300 	mov.w	r3, #0
 8006822:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006826:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800682a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800682e:	4690      	mov	r8, r2
 8006830:	4699      	mov	r9, r3
 8006832:	4623      	mov	r3, r4
 8006834:	eb18 0303 	adds.w	r3, r8, r3
 8006838:	60bb      	str	r3, [r7, #8]
 800683a:	462b      	mov	r3, r5
 800683c:	eb49 0303 	adc.w	r3, r9, r3
 8006840:	60fb      	str	r3, [r7, #12]
 8006842:	f04f 0200 	mov.w	r2, #0
 8006846:	f04f 0300 	mov.w	r3, #0
 800684a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800684e:	4629      	mov	r1, r5
 8006850:	024b      	lsls	r3, r1, #9
 8006852:	4621      	mov	r1, r4
 8006854:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006858:	4621      	mov	r1, r4
 800685a:	024a      	lsls	r2, r1, #9
 800685c:	4610      	mov	r0, r2
 800685e:	4619      	mov	r1, r3
 8006860:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006862:	2200      	movs	r2, #0
 8006864:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006866:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006868:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800686c:	f7f9 fd08 	bl	8000280 <__aeabi_uldivmod>
 8006870:	4602      	mov	r2, r0
 8006872:	460b      	mov	r3, r1
 8006874:	4613      	mov	r3, r2
 8006876:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006878:	e058      	b.n	800692c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800687a:	4b38      	ldr	r3, [pc, #224]	@ (800695c <HAL_RCC_GetSysClockFreq+0x200>)
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	099b      	lsrs	r3, r3, #6
 8006880:	2200      	movs	r2, #0
 8006882:	4618      	mov	r0, r3
 8006884:	4611      	mov	r1, r2
 8006886:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800688a:	623b      	str	r3, [r7, #32]
 800688c:	2300      	movs	r3, #0
 800688e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006890:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006894:	4642      	mov	r2, r8
 8006896:	464b      	mov	r3, r9
 8006898:	f04f 0000 	mov.w	r0, #0
 800689c:	f04f 0100 	mov.w	r1, #0
 80068a0:	0159      	lsls	r1, r3, #5
 80068a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068a6:	0150      	lsls	r0, r2, #5
 80068a8:	4602      	mov	r2, r0
 80068aa:	460b      	mov	r3, r1
 80068ac:	4641      	mov	r1, r8
 80068ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80068b2:	4649      	mov	r1, r9
 80068b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80068b8:	f04f 0200 	mov.w	r2, #0
 80068bc:	f04f 0300 	mov.w	r3, #0
 80068c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80068c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80068c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80068cc:	ebb2 040a 	subs.w	r4, r2, sl
 80068d0:	eb63 050b 	sbc.w	r5, r3, fp
 80068d4:	f04f 0200 	mov.w	r2, #0
 80068d8:	f04f 0300 	mov.w	r3, #0
 80068dc:	00eb      	lsls	r3, r5, #3
 80068de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068e2:	00e2      	lsls	r2, r4, #3
 80068e4:	4614      	mov	r4, r2
 80068e6:	461d      	mov	r5, r3
 80068e8:	4643      	mov	r3, r8
 80068ea:	18e3      	adds	r3, r4, r3
 80068ec:	603b      	str	r3, [r7, #0]
 80068ee:	464b      	mov	r3, r9
 80068f0:	eb45 0303 	adc.w	r3, r5, r3
 80068f4:	607b      	str	r3, [r7, #4]
 80068f6:	f04f 0200 	mov.w	r2, #0
 80068fa:	f04f 0300 	mov.w	r3, #0
 80068fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006902:	4629      	mov	r1, r5
 8006904:	028b      	lsls	r3, r1, #10
 8006906:	4621      	mov	r1, r4
 8006908:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800690c:	4621      	mov	r1, r4
 800690e:	028a      	lsls	r2, r1, #10
 8006910:	4610      	mov	r0, r2
 8006912:	4619      	mov	r1, r3
 8006914:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006916:	2200      	movs	r2, #0
 8006918:	61bb      	str	r3, [r7, #24]
 800691a:	61fa      	str	r2, [r7, #28]
 800691c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006920:	f7f9 fcae 	bl	8000280 <__aeabi_uldivmod>
 8006924:	4602      	mov	r2, r0
 8006926:	460b      	mov	r3, r1
 8006928:	4613      	mov	r3, r2
 800692a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800692c:	4b0b      	ldr	r3, [pc, #44]	@ (800695c <HAL_RCC_GetSysClockFreq+0x200>)
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	0c1b      	lsrs	r3, r3, #16
 8006932:	f003 0303 	and.w	r3, r3, #3
 8006936:	3301      	adds	r3, #1
 8006938:	005b      	lsls	r3, r3, #1
 800693a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800693c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800693e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006940:	fbb2 f3f3 	udiv	r3, r2, r3
 8006944:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006946:	e002      	b.n	800694e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006948:	4b05      	ldr	r3, [pc, #20]	@ (8006960 <HAL_RCC_GetSysClockFreq+0x204>)
 800694a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800694c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800694e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006950:	4618      	mov	r0, r3
 8006952:	3750      	adds	r7, #80	@ 0x50
 8006954:	46bd      	mov	sp, r7
 8006956:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800695a:	bf00      	nop
 800695c:	40023800 	.word	0x40023800
 8006960:	00f42400 	.word	0x00f42400
 8006964:	007a1200 	.word	0x007a1200

08006968 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006968:	b480      	push	{r7}
 800696a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800696c:	4b03      	ldr	r3, [pc, #12]	@ (800697c <HAL_RCC_GetHCLKFreq+0x14>)
 800696e:	681b      	ldr	r3, [r3, #0]
}
 8006970:	4618      	mov	r0, r3
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	2000003c 	.word	0x2000003c

08006980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006984:	f7ff fff0 	bl	8006968 <HAL_RCC_GetHCLKFreq>
 8006988:	4602      	mov	r2, r0
 800698a:	4b05      	ldr	r3, [pc, #20]	@ (80069a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	0a9b      	lsrs	r3, r3, #10
 8006990:	f003 0307 	and.w	r3, r3, #7
 8006994:	4903      	ldr	r1, [pc, #12]	@ (80069a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006996:	5ccb      	ldrb	r3, [r1, r3]
 8006998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800699c:	4618      	mov	r0, r3
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	40023800 	.word	0x40023800
 80069a4:	0801db64 	.word	0x0801db64

080069a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80069ac:	f7ff ffdc 	bl	8006968 <HAL_RCC_GetHCLKFreq>
 80069b0:	4602      	mov	r2, r0
 80069b2:	4b05      	ldr	r3, [pc, #20]	@ (80069c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	0b5b      	lsrs	r3, r3, #13
 80069b8:	f003 0307 	and.w	r3, r3, #7
 80069bc:	4903      	ldr	r1, [pc, #12]	@ (80069cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80069be:	5ccb      	ldrb	r3, [r1, r3]
 80069c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	40023800 	.word	0x40023800
 80069cc:	0801db64 	.word	0x0801db64

080069d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d101      	bne.n	80069e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e042      	b.n	8006a68 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d106      	bne.n	80069fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 f83a 	bl	8006a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2224      	movs	r2, #36	@ 0x24
 8006a00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68da      	ldr	r2, [r3, #12]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006a12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 f97d 	bl	8006d14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	691a      	ldr	r2, [r3, #16]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	695a      	ldr	r2, [r3, #20]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68da      	ldr	r2, [r3, #12]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006a48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2220      	movs	r2, #32
 8006a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2220      	movs	r2, #32
 8006a5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3708      	adds	r7, #8
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8006a78:	bf00      	nop
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b08a      	sub	sp, #40	@ 0x28
 8006a88:	af02      	add	r7, sp, #8
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	603b      	str	r3, [r7, #0]
 8006a90:	4613      	mov	r3, r2
 8006a92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006a94:	2300      	movs	r3, #0
 8006a96:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	2b20      	cmp	r3, #32
 8006aa2:	d175      	bne.n	8006b90 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d002      	beq.n	8006ab0 <HAL_UART_Transmit+0x2c>
 8006aaa:	88fb      	ldrh	r3, [r7, #6]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d101      	bne.n	8006ab4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e06e      	b.n	8006b92 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2221      	movs	r2, #33	@ 0x21
 8006abe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ac2:	f7fd fe8f 	bl	80047e4 <HAL_GetTick>
 8006ac6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	88fa      	ldrh	r2, [r7, #6]
 8006acc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	88fa      	ldrh	r2, [r7, #6]
 8006ad2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006adc:	d108      	bne.n	8006af0 <HAL_UART_Transmit+0x6c>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d104      	bne.n	8006af0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	61bb      	str	r3, [r7, #24]
 8006aee:	e003      	b.n	8006af8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006af4:	2300      	movs	r3, #0
 8006af6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006af8:	e02e      	b.n	8006b58 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	9300      	str	r3, [sp, #0]
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	2200      	movs	r2, #0
 8006b02:	2180      	movs	r1, #128	@ 0x80
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	f000 f848 	bl	8006b9a <UART_WaitOnFlagUntilTimeout>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d005      	beq.n	8006b1c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2220      	movs	r2, #32
 8006b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e03a      	b.n	8006b92 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d10b      	bne.n	8006b3a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	881b      	ldrh	r3, [r3, #0]
 8006b26:	461a      	mov	r2, r3
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	3302      	adds	r3, #2
 8006b36:	61bb      	str	r3, [r7, #24]
 8006b38:	e007      	b.n	8006b4a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	781a      	ldrb	r2, [r3, #0]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	3301      	adds	r3, #1
 8006b48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	3b01      	subs	r3, #1
 8006b52:	b29a      	uxth	r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1cb      	bne.n	8006afa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	9300      	str	r3, [sp, #0]
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	2140      	movs	r1, #64	@ 0x40
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f000 f814 	bl	8006b9a <UART_WaitOnFlagUntilTimeout>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d005      	beq.n	8006b84 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006b80:	2303      	movs	r3, #3
 8006b82:	e006      	b.n	8006b92 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2220      	movs	r2, #32
 8006b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	e000      	b.n	8006b92 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006b90:	2302      	movs	r3, #2
  }
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3720      	adds	r7, #32
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b086      	sub	sp, #24
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	60f8      	str	r0, [r7, #12]
 8006ba2:	60b9      	str	r1, [r7, #8]
 8006ba4:	603b      	str	r3, [r7, #0]
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006baa:	e03b      	b.n	8006c24 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bac:	6a3b      	ldr	r3, [r7, #32]
 8006bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb2:	d037      	beq.n	8006c24 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bb4:	f7fd fe16 	bl	80047e4 <HAL_GetTick>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	6a3a      	ldr	r2, [r7, #32]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d302      	bcc.n	8006bca <UART_WaitOnFlagUntilTimeout+0x30>
 8006bc4:	6a3b      	ldr	r3, [r7, #32]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d101      	bne.n	8006bce <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e03a      	b.n	8006c44 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	f003 0304 	and.w	r3, r3, #4
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d023      	beq.n	8006c24 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	2b80      	cmp	r3, #128	@ 0x80
 8006be0:	d020      	beq.n	8006c24 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	2b40      	cmp	r3, #64	@ 0x40
 8006be6:	d01d      	beq.n	8006c24 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 0308 	and.w	r3, r3, #8
 8006bf2:	2b08      	cmp	r3, #8
 8006bf4:	d116      	bne.n	8006c24 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	617b      	str	r3, [r7, #20]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	617b      	str	r3, [r7, #20]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	617b      	str	r3, [r7, #20]
 8006c0a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f000 f81d 	bl	8006c4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2208      	movs	r2, #8
 8006c16:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e00f      	b.n	8006c44 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	bf0c      	ite	eq
 8006c34:	2301      	moveq	r3, #1
 8006c36:	2300      	movne	r3, #0
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	79fb      	ldrb	r3, [r7, #7]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d0b4      	beq.n	8006bac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3718      	adds	r7, #24
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b095      	sub	sp, #84	@ 0x54
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	330c      	adds	r3, #12
 8006c5a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c5e:	e853 3f00 	ldrex	r3, [r3]
 8006c62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	330c      	adds	r3, #12
 8006c72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006c74:	643a      	str	r2, [r7, #64]	@ 0x40
 8006c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c7c:	e841 2300 	strex	r3, r2, [r1]
 8006c80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d1e5      	bne.n	8006c54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	3314      	adds	r3, #20
 8006c8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c90:	6a3b      	ldr	r3, [r7, #32]
 8006c92:	e853 3f00 	ldrex	r3, [r3]
 8006c96:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	f023 0301 	bic.w	r3, r3, #1
 8006c9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	3314      	adds	r3, #20
 8006ca6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ca8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006caa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cb0:	e841 2300 	strex	r3, r2, [r1]
 8006cb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d1e5      	bne.n	8006c88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d119      	bne.n	8006cf8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	330c      	adds	r3, #12
 8006cca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	e853 3f00 	ldrex	r3, [r3]
 8006cd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	f023 0310 	bic.w	r3, r3, #16
 8006cda:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	330c      	adds	r3, #12
 8006ce2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ce4:	61ba      	str	r2, [r7, #24]
 8006ce6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce8:	6979      	ldr	r1, [r7, #20]
 8006cea:	69ba      	ldr	r2, [r7, #24]
 8006cec:	e841 2300 	strex	r3, r2, [r1]
 8006cf0:	613b      	str	r3, [r7, #16]
   return(result);
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1e5      	bne.n	8006cc4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2220      	movs	r2, #32
 8006cfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006d06:	bf00      	nop
 8006d08:	3754      	adds	r7, #84	@ 0x54
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
	...

08006d14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d18:	b0c0      	sub	sp, #256	@ 0x100
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d30:	68d9      	ldr	r1, [r3, #12]
 8006d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	ea40 0301 	orr.w	r3, r0, r1
 8006d3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d42:	689a      	ldr	r2, [r3, #8]
 8006d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	431a      	orrs	r2, r3
 8006d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d50:	695b      	ldr	r3, [r3, #20]
 8006d52:	431a      	orrs	r2, r3
 8006d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d58:	69db      	ldr	r3, [r3, #28]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006d6c:	f021 010c 	bic.w	r1, r1, #12
 8006d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006d7a:	430b      	orrs	r3, r1
 8006d7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d8e:	6999      	ldr	r1, [r3, #24]
 8006d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	ea40 0301 	orr.w	r3, r0, r1
 8006d9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	4b8f      	ldr	r3, [pc, #572]	@ (8006fe0 <UART_SetConfig+0x2cc>)
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d005      	beq.n	8006db4 <UART_SetConfig+0xa0>
 8006da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	4b8d      	ldr	r3, [pc, #564]	@ (8006fe4 <UART_SetConfig+0x2d0>)
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d104      	bne.n	8006dbe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006db4:	f7ff fdf8 	bl	80069a8 <HAL_RCC_GetPCLK2Freq>
 8006db8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006dbc:	e003      	b.n	8006dc6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006dbe:	f7ff fddf 	bl	8006980 <HAL_RCC_GetPCLK1Freq>
 8006dc2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dca:	69db      	ldr	r3, [r3, #28]
 8006dcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006dd0:	f040 810c 	bne.w	8006fec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006dd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006dde:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006de2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006de6:	4622      	mov	r2, r4
 8006de8:	462b      	mov	r3, r5
 8006dea:	1891      	adds	r1, r2, r2
 8006dec:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006dee:	415b      	adcs	r3, r3
 8006df0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006df2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006df6:	4621      	mov	r1, r4
 8006df8:	eb12 0801 	adds.w	r8, r2, r1
 8006dfc:	4629      	mov	r1, r5
 8006dfe:	eb43 0901 	adc.w	r9, r3, r1
 8006e02:	f04f 0200 	mov.w	r2, #0
 8006e06:	f04f 0300 	mov.w	r3, #0
 8006e0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e16:	4690      	mov	r8, r2
 8006e18:	4699      	mov	r9, r3
 8006e1a:	4623      	mov	r3, r4
 8006e1c:	eb18 0303 	adds.w	r3, r8, r3
 8006e20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006e24:	462b      	mov	r3, r5
 8006e26:	eb49 0303 	adc.w	r3, r9, r3
 8006e2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006e3a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006e3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006e42:	460b      	mov	r3, r1
 8006e44:	18db      	adds	r3, r3, r3
 8006e46:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e48:	4613      	mov	r3, r2
 8006e4a:	eb42 0303 	adc.w	r3, r2, r3
 8006e4e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006e54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006e58:	f7f9 fa12 	bl	8000280 <__aeabi_uldivmod>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	460b      	mov	r3, r1
 8006e60:	4b61      	ldr	r3, [pc, #388]	@ (8006fe8 <UART_SetConfig+0x2d4>)
 8006e62:	fba3 2302 	umull	r2, r3, r3, r2
 8006e66:	095b      	lsrs	r3, r3, #5
 8006e68:	011c      	lsls	r4, r3, #4
 8006e6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e74:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006e78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006e7c:	4642      	mov	r2, r8
 8006e7e:	464b      	mov	r3, r9
 8006e80:	1891      	adds	r1, r2, r2
 8006e82:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006e84:	415b      	adcs	r3, r3
 8006e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006e8c:	4641      	mov	r1, r8
 8006e8e:	eb12 0a01 	adds.w	sl, r2, r1
 8006e92:	4649      	mov	r1, r9
 8006e94:	eb43 0b01 	adc.w	fp, r3, r1
 8006e98:	f04f 0200 	mov.w	r2, #0
 8006e9c:	f04f 0300 	mov.w	r3, #0
 8006ea0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ea4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006ea8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006eac:	4692      	mov	sl, r2
 8006eae:	469b      	mov	fp, r3
 8006eb0:	4643      	mov	r3, r8
 8006eb2:	eb1a 0303 	adds.w	r3, sl, r3
 8006eb6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006eba:	464b      	mov	r3, r9
 8006ebc:	eb4b 0303 	adc.w	r3, fp, r3
 8006ec0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ed0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006ed4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006ed8:	460b      	mov	r3, r1
 8006eda:	18db      	adds	r3, r3, r3
 8006edc:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ede:	4613      	mov	r3, r2
 8006ee0:	eb42 0303 	adc.w	r3, r2, r3
 8006ee4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ee6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006eea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006eee:	f7f9 f9c7 	bl	8000280 <__aeabi_uldivmod>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	4611      	mov	r1, r2
 8006ef8:	4b3b      	ldr	r3, [pc, #236]	@ (8006fe8 <UART_SetConfig+0x2d4>)
 8006efa:	fba3 2301 	umull	r2, r3, r3, r1
 8006efe:	095b      	lsrs	r3, r3, #5
 8006f00:	2264      	movs	r2, #100	@ 0x64
 8006f02:	fb02 f303 	mul.w	r3, r2, r3
 8006f06:	1acb      	subs	r3, r1, r3
 8006f08:	00db      	lsls	r3, r3, #3
 8006f0a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006f0e:	4b36      	ldr	r3, [pc, #216]	@ (8006fe8 <UART_SetConfig+0x2d4>)
 8006f10:	fba3 2302 	umull	r2, r3, r3, r2
 8006f14:	095b      	lsrs	r3, r3, #5
 8006f16:	005b      	lsls	r3, r3, #1
 8006f18:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006f1c:	441c      	add	r4, r3
 8006f1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f22:	2200      	movs	r2, #0
 8006f24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006f28:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006f2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006f30:	4642      	mov	r2, r8
 8006f32:	464b      	mov	r3, r9
 8006f34:	1891      	adds	r1, r2, r2
 8006f36:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006f38:	415b      	adcs	r3, r3
 8006f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006f40:	4641      	mov	r1, r8
 8006f42:	1851      	adds	r1, r2, r1
 8006f44:	6339      	str	r1, [r7, #48]	@ 0x30
 8006f46:	4649      	mov	r1, r9
 8006f48:	414b      	adcs	r3, r1
 8006f4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f4c:	f04f 0200 	mov.w	r2, #0
 8006f50:	f04f 0300 	mov.w	r3, #0
 8006f54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006f58:	4659      	mov	r1, fp
 8006f5a:	00cb      	lsls	r3, r1, #3
 8006f5c:	4651      	mov	r1, sl
 8006f5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f62:	4651      	mov	r1, sl
 8006f64:	00ca      	lsls	r2, r1, #3
 8006f66:	4610      	mov	r0, r2
 8006f68:	4619      	mov	r1, r3
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	4642      	mov	r2, r8
 8006f6e:	189b      	adds	r3, r3, r2
 8006f70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006f74:	464b      	mov	r3, r9
 8006f76:	460a      	mov	r2, r1
 8006f78:	eb42 0303 	adc.w	r3, r2, r3
 8006f7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006f8c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006f90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006f94:	460b      	mov	r3, r1
 8006f96:	18db      	adds	r3, r3, r3
 8006f98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	eb42 0303 	adc.w	r3, r2, r3
 8006fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fa2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006fa6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006faa:	f7f9 f969 	bl	8000280 <__aeabi_uldivmod>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8006fe8 <UART_SetConfig+0x2d4>)
 8006fb4:	fba3 1302 	umull	r1, r3, r3, r2
 8006fb8:	095b      	lsrs	r3, r3, #5
 8006fba:	2164      	movs	r1, #100	@ 0x64
 8006fbc:	fb01 f303 	mul.w	r3, r1, r3
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	00db      	lsls	r3, r3, #3
 8006fc4:	3332      	adds	r3, #50	@ 0x32
 8006fc6:	4a08      	ldr	r2, [pc, #32]	@ (8006fe8 <UART_SetConfig+0x2d4>)
 8006fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8006fcc:	095b      	lsrs	r3, r3, #5
 8006fce:	f003 0207 	and.w	r2, r3, #7
 8006fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4422      	add	r2, r4
 8006fda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006fdc:	e106      	b.n	80071ec <UART_SetConfig+0x4d8>
 8006fde:	bf00      	nop
 8006fe0:	40011000 	.word	0x40011000
 8006fe4:	40011400 	.word	0x40011400
 8006fe8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006fec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006ff6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006ffa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006ffe:	4642      	mov	r2, r8
 8007000:	464b      	mov	r3, r9
 8007002:	1891      	adds	r1, r2, r2
 8007004:	6239      	str	r1, [r7, #32]
 8007006:	415b      	adcs	r3, r3
 8007008:	627b      	str	r3, [r7, #36]	@ 0x24
 800700a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800700e:	4641      	mov	r1, r8
 8007010:	1854      	adds	r4, r2, r1
 8007012:	4649      	mov	r1, r9
 8007014:	eb43 0501 	adc.w	r5, r3, r1
 8007018:	f04f 0200 	mov.w	r2, #0
 800701c:	f04f 0300 	mov.w	r3, #0
 8007020:	00eb      	lsls	r3, r5, #3
 8007022:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007026:	00e2      	lsls	r2, r4, #3
 8007028:	4614      	mov	r4, r2
 800702a:	461d      	mov	r5, r3
 800702c:	4643      	mov	r3, r8
 800702e:	18e3      	adds	r3, r4, r3
 8007030:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007034:	464b      	mov	r3, r9
 8007036:	eb45 0303 	adc.w	r3, r5, r3
 800703a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800703e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800704a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800704e:	f04f 0200 	mov.w	r2, #0
 8007052:	f04f 0300 	mov.w	r3, #0
 8007056:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800705a:	4629      	mov	r1, r5
 800705c:	008b      	lsls	r3, r1, #2
 800705e:	4621      	mov	r1, r4
 8007060:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007064:	4621      	mov	r1, r4
 8007066:	008a      	lsls	r2, r1, #2
 8007068:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800706c:	f7f9 f908 	bl	8000280 <__aeabi_uldivmod>
 8007070:	4602      	mov	r2, r0
 8007072:	460b      	mov	r3, r1
 8007074:	4b60      	ldr	r3, [pc, #384]	@ (80071f8 <UART_SetConfig+0x4e4>)
 8007076:	fba3 2302 	umull	r2, r3, r3, r2
 800707a:	095b      	lsrs	r3, r3, #5
 800707c:	011c      	lsls	r4, r3, #4
 800707e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007082:	2200      	movs	r2, #0
 8007084:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007088:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800708c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007090:	4642      	mov	r2, r8
 8007092:	464b      	mov	r3, r9
 8007094:	1891      	adds	r1, r2, r2
 8007096:	61b9      	str	r1, [r7, #24]
 8007098:	415b      	adcs	r3, r3
 800709a:	61fb      	str	r3, [r7, #28]
 800709c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070a0:	4641      	mov	r1, r8
 80070a2:	1851      	adds	r1, r2, r1
 80070a4:	6139      	str	r1, [r7, #16]
 80070a6:	4649      	mov	r1, r9
 80070a8:	414b      	adcs	r3, r1
 80070aa:	617b      	str	r3, [r7, #20]
 80070ac:	f04f 0200 	mov.w	r2, #0
 80070b0:	f04f 0300 	mov.w	r3, #0
 80070b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80070b8:	4659      	mov	r1, fp
 80070ba:	00cb      	lsls	r3, r1, #3
 80070bc:	4651      	mov	r1, sl
 80070be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070c2:	4651      	mov	r1, sl
 80070c4:	00ca      	lsls	r2, r1, #3
 80070c6:	4610      	mov	r0, r2
 80070c8:	4619      	mov	r1, r3
 80070ca:	4603      	mov	r3, r0
 80070cc:	4642      	mov	r2, r8
 80070ce:	189b      	adds	r3, r3, r2
 80070d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80070d4:	464b      	mov	r3, r9
 80070d6:	460a      	mov	r2, r1
 80070d8:	eb42 0303 	adc.w	r3, r2, r3
 80070dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80070e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80070ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80070ec:	f04f 0200 	mov.w	r2, #0
 80070f0:	f04f 0300 	mov.w	r3, #0
 80070f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80070f8:	4649      	mov	r1, r9
 80070fa:	008b      	lsls	r3, r1, #2
 80070fc:	4641      	mov	r1, r8
 80070fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007102:	4641      	mov	r1, r8
 8007104:	008a      	lsls	r2, r1, #2
 8007106:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800710a:	f7f9 f8b9 	bl	8000280 <__aeabi_uldivmod>
 800710e:	4602      	mov	r2, r0
 8007110:	460b      	mov	r3, r1
 8007112:	4611      	mov	r1, r2
 8007114:	4b38      	ldr	r3, [pc, #224]	@ (80071f8 <UART_SetConfig+0x4e4>)
 8007116:	fba3 2301 	umull	r2, r3, r3, r1
 800711a:	095b      	lsrs	r3, r3, #5
 800711c:	2264      	movs	r2, #100	@ 0x64
 800711e:	fb02 f303 	mul.w	r3, r2, r3
 8007122:	1acb      	subs	r3, r1, r3
 8007124:	011b      	lsls	r3, r3, #4
 8007126:	3332      	adds	r3, #50	@ 0x32
 8007128:	4a33      	ldr	r2, [pc, #204]	@ (80071f8 <UART_SetConfig+0x4e4>)
 800712a:	fba2 2303 	umull	r2, r3, r2, r3
 800712e:	095b      	lsrs	r3, r3, #5
 8007130:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007134:	441c      	add	r4, r3
 8007136:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800713a:	2200      	movs	r2, #0
 800713c:	673b      	str	r3, [r7, #112]	@ 0x70
 800713e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007140:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007144:	4642      	mov	r2, r8
 8007146:	464b      	mov	r3, r9
 8007148:	1891      	adds	r1, r2, r2
 800714a:	60b9      	str	r1, [r7, #8]
 800714c:	415b      	adcs	r3, r3
 800714e:	60fb      	str	r3, [r7, #12]
 8007150:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007154:	4641      	mov	r1, r8
 8007156:	1851      	adds	r1, r2, r1
 8007158:	6039      	str	r1, [r7, #0]
 800715a:	4649      	mov	r1, r9
 800715c:	414b      	adcs	r3, r1
 800715e:	607b      	str	r3, [r7, #4]
 8007160:	f04f 0200 	mov.w	r2, #0
 8007164:	f04f 0300 	mov.w	r3, #0
 8007168:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800716c:	4659      	mov	r1, fp
 800716e:	00cb      	lsls	r3, r1, #3
 8007170:	4651      	mov	r1, sl
 8007172:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007176:	4651      	mov	r1, sl
 8007178:	00ca      	lsls	r2, r1, #3
 800717a:	4610      	mov	r0, r2
 800717c:	4619      	mov	r1, r3
 800717e:	4603      	mov	r3, r0
 8007180:	4642      	mov	r2, r8
 8007182:	189b      	adds	r3, r3, r2
 8007184:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007186:	464b      	mov	r3, r9
 8007188:	460a      	mov	r2, r1
 800718a:	eb42 0303 	adc.w	r3, r2, r3
 800718e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	663b      	str	r3, [r7, #96]	@ 0x60
 800719a:	667a      	str	r2, [r7, #100]	@ 0x64
 800719c:	f04f 0200 	mov.w	r2, #0
 80071a0:	f04f 0300 	mov.w	r3, #0
 80071a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80071a8:	4649      	mov	r1, r9
 80071aa:	008b      	lsls	r3, r1, #2
 80071ac:	4641      	mov	r1, r8
 80071ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071b2:	4641      	mov	r1, r8
 80071b4:	008a      	lsls	r2, r1, #2
 80071b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80071ba:	f7f9 f861 	bl	8000280 <__aeabi_uldivmod>
 80071be:	4602      	mov	r2, r0
 80071c0:	460b      	mov	r3, r1
 80071c2:	4b0d      	ldr	r3, [pc, #52]	@ (80071f8 <UART_SetConfig+0x4e4>)
 80071c4:	fba3 1302 	umull	r1, r3, r3, r2
 80071c8:	095b      	lsrs	r3, r3, #5
 80071ca:	2164      	movs	r1, #100	@ 0x64
 80071cc:	fb01 f303 	mul.w	r3, r1, r3
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	011b      	lsls	r3, r3, #4
 80071d4:	3332      	adds	r3, #50	@ 0x32
 80071d6:	4a08      	ldr	r2, [pc, #32]	@ (80071f8 <UART_SetConfig+0x4e4>)
 80071d8:	fba2 2303 	umull	r2, r3, r2, r3
 80071dc:	095b      	lsrs	r3, r3, #5
 80071de:	f003 020f 	and.w	r2, r3, #15
 80071e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4422      	add	r2, r4
 80071ea:	609a      	str	r2, [r3, #8]
}
 80071ec:	bf00      	nop
 80071ee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80071f2:	46bd      	mov	sp, r7
 80071f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071f8:	51eb851f 	.word	0x51eb851f

080071fc <std>:
 80071fc:	2300      	movs	r3, #0
 80071fe:	b510      	push	{r4, lr}
 8007200:	4604      	mov	r4, r0
 8007202:	e9c0 3300 	strd	r3, r3, [r0]
 8007206:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800720a:	6083      	str	r3, [r0, #8]
 800720c:	8181      	strh	r1, [r0, #12]
 800720e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007210:	81c2      	strh	r2, [r0, #14]
 8007212:	6183      	str	r3, [r0, #24]
 8007214:	4619      	mov	r1, r3
 8007216:	2208      	movs	r2, #8
 8007218:	305c      	adds	r0, #92	@ 0x5c
 800721a:	f000 fa01 	bl	8007620 <memset>
 800721e:	4b0d      	ldr	r3, [pc, #52]	@ (8007254 <std+0x58>)
 8007220:	6263      	str	r3, [r4, #36]	@ 0x24
 8007222:	4b0d      	ldr	r3, [pc, #52]	@ (8007258 <std+0x5c>)
 8007224:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007226:	4b0d      	ldr	r3, [pc, #52]	@ (800725c <std+0x60>)
 8007228:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800722a:	4b0d      	ldr	r3, [pc, #52]	@ (8007260 <std+0x64>)
 800722c:	6323      	str	r3, [r4, #48]	@ 0x30
 800722e:	4b0d      	ldr	r3, [pc, #52]	@ (8007264 <std+0x68>)
 8007230:	6224      	str	r4, [r4, #32]
 8007232:	429c      	cmp	r4, r3
 8007234:	d006      	beq.n	8007244 <std+0x48>
 8007236:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800723a:	4294      	cmp	r4, r2
 800723c:	d002      	beq.n	8007244 <std+0x48>
 800723e:	33d0      	adds	r3, #208	@ 0xd0
 8007240:	429c      	cmp	r4, r3
 8007242:	d105      	bne.n	8007250 <std+0x54>
 8007244:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800724c:	f000 ba60 	b.w	8007710 <__retarget_lock_init_recursive>
 8007250:	bd10      	pop	{r4, pc}
 8007252:	bf00      	nop
 8007254:	08007471 	.word	0x08007471
 8007258:	08007493 	.word	0x08007493
 800725c:	080074cb 	.word	0x080074cb
 8007260:	080074ef 	.word	0x080074ef
 8007264:	20002fac 	.word	0x20002fac

08007268 <stdio_exit_handler>:
 8007268:	4a02      	ldr	r2, [pc, #8]	@ (8007274 <stdio_exit_handler+0xc>)
 800726a:	4903      	ldr	r1, [pc, #12]	@ (8007278 <stdio_exit_handler+0x10>)
 800726c:	4803      	ldr	r0, [pc, #12]	@ (800727c <stdio_exit_handler+0x14>)
 800726e:	f000 b869 	b.w	8007344 <_fwalk_sglue>
 8007272:	bf00      	nop
 8007274:	20000048 	.word	0x20000048
 8007278:	08007fc9 	.word	0x08007fc9
 800727c:	20000058 	.word	0x20000058

08007280 <cleanup_stdio>:
 8007280:	6841      	ldr	r1, [r0, #4]
 8007282:	4b0c      	ldr	r3, [pc, #48]	@ (80072b4 <cleanup_stdio+0x34>)
 8007284:	4299      	cmp	r1, r3
 8007286:	b510      	push	{r4, lr}
 8007288:	4604      	mov	r4, r0
 800728a:	d001      	beq.n	8007290 <cleanup_stdio+0x10>
 800728c:	f000 fe9c 	bl	8007fc8 <_fflush_r>
 8007290:	68a1      	ldr	r1, [r4, #8]
 8007292:	4b09      	ldr	r3, [pc, #36]	@ (80072b8 <cleanup_stdio+0x38>)
 8007294:	4299      	cmp	r1, r3
 8007296:	d002      	beq.n	800729e <cleanup_stdio+0x1e>
 8007298:	4620      	mov	r0, r4
 800729a:	f000 fe95 	bl	8007fc8 <_fflush_r>
 800729e:	68e1      	ldr	r1, [r4, #12]
 80072a0:	4b06      	ldr	r3, [pc, #24]	@ (80072bc <cleanup_stdio+0x3c>)
 80072a2:	4299      	cmp	r1, r3
 80072a4:	d004      	beq.n	80072b0 <cleanup_stdio+0x30>
 80072a6:	4620      	mov	r0, r4
 80072a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072ac:	f000 be8c 	b.w	8007fc8 <_fflush_r>
 80072b0:	bd10      	pop	{r4, pc}
 80072b2:	bf00      	nop
 80072b4:	20002fac 	.word	0x20002fac
 80072b8:	20003014 	.word	0x20003014
 80072bc:	2000307c 	.word	0x2000307c

080072c0 <global_stdio_init.part.0>:
 80072c0:	b510      	push	{r4, lr}
 80072c2:	4b0b      	ldr	r3, [pc, #44]	@ (80072f0 <global_stdio_init.part.0+0x30>)
 80072c4:	4c0b      	ldr	r4, [pc, #44]	@ (80072f4 <global_stdio_init.part.0+0x34>)
 80072c6:	4a0c      	ldr	r2, [pc, #48]	@ (80072f8 <global_stdio_init.part.0+0x38>)
 80072c8:	601a      	str	r2, [r3, #0]
 80072ca:	4620      	mov	r0, r4
 80072cc:	2200      	movs	r2, #0
 80072ce:	2104      	movs	r1, #4
 80072d0:	f7ff ff94 	bl	80071fc <std>
 80072d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80072d8:	2201      	movs	r2, #1
 80072da:	2109      	movs	r1, #9
 80072dc:	f7ff ff8e 	bl	80071fc <std>
 80072e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80072e4:	2202      	movs	r2, #2
 80072e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072ea:	2112      	movs	r1, #18
 80072ec:	f7ff bf86 	b.w	80071fc <std>
 80072f0:	200030e4 	.word	0x200030e4
 80072f4:	20002fac 	.word	0x20002fac
 80072f8:	08007269 	.word	0x08007269

080072fc <__sfp_lock_acquire>:
 80072fc:	4801      	ldr	r0, [pc, #4]	@ (8007304 <__sfp_lock_acquire+0x8>)
 80072fe:	f000 ba08 	b.w	8007712 <__retarget_lock_acquire_recursive>
 8007302:	bf00      	nop
 8007304:	200030ed 	.word	0x200030ed

08007308 <__sfp_lock_release>:
 8007308:	4801      	ldr	r0, [pc, #4]	@ (8007310 <__sfp_lock_release+0x8>)
 800730a:	f000 ba03 	b.w	8007714 <__retarget_lock_release_recursive>
 800730e:	bf00      	nop
 8007310:	200030ed 	.word	0x200030ed

08007314 <__sinit>:
 8007314:	b510      	push	{r4, lr}
 8007316:	4604      	mov	r4, r0
 8007318:	f7ff fff0 	bl	80072fc <__sfp_lock_acquire>
 800731c:	6a23      	ldr	r3, [r4, #32]
 800731e:	b11b      	cbz	r3, 8007328 <__sinit+0x14>
 8007320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007324:	f7ff bff0 	b.w	8007308 <__sfp_lock_release>
 8007328:	4b04      	ldr	r3, [pc, #16]	@ (800733c <__sinit+0x28>)
 800732a:	6223      	str	r3, [r4, #32]
 800732c:	4b04      	ldr	r3, [pc, #16]	@ (8007340 <__sinit+0x2c>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1f5      	bne.n	8007320 <__sinit+0xc>
 8007334:	f7ff ffc4 	bl	80072c0 <global_stdio_init.part.0>
 8007338:	e7f2      	b.n	8007320 <__sinit+0xc>
 800733a:	bf00      	nop
 800733c:	08007281 	.word	0x08007281
 8007340:	200030e4 	.word	0x200030e4

08007344 <_fwalk_sglue>:
 8007344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007348:	4607      	mov	r7, r0
 800734a:	4688      	mov	r8, r1
 800734c:	4614      	mov	r4, r2
 800734e:	2600      	movs	r6, #0
 8007350:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007354:	f1b9 0901 	subs.w	r9, r9, #1
 8007358:	d505      	bpl.n	8007366 <_fwalk_sglue+0x22>
 800735a:	6824      	ldr	r4, [r4, #0]
 800735c:	2c00      	cmp	r4, #0
 800735e:	d1f7      	bne.n	8007350 <_fwalk_sglue+0xc>
 8007360:	4630      	mov	r0, r6
 8007362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007366:	89ab      	ldrh	r3, [r5, #12]
 8007368:	2b01      	cmp	r3, #1
 800736a:	d907      	bls.n	800737c <_fwalk_sglue+0x38>
 800736c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007370:	3301      	adds	r3, #1
 8007372:	d003      	beq.n	800737c <_fwalk_sglue+0x38>
 8007374:	4629      	mov	r1, r5
 8007376:	4638      	mov	r0, r7
 8007378:	47c0      	blx	r8
 800737a:	4306      	orrs	r6, r0
 800737c:	3568      	adds	r5, #104	@ 0x68
 800737e:	e7e9      	b.n	8007354 <_fwalk_sglue+0x10>

08007380 <iprintf>:
 8007380:	b40f      	push	{r0, r1, r2, r3}
 8007382:	b507      	push	{r0, r1, r2, lr}
 8007384:	4906      	ldr	r1, [pc, #24]	@ (80073a0 <iprintf+0x20>)
 8007386:	ab04      	add	r3, sp, #16
 8007388:	6808      	ldr	r0, [r1, #0]
 800738a:	f853 2b04 	ldr.w	r2, [r3], #4
 800738e:	6881      	ldr	r1, [r0, #8]
 8007390:	9301      	str	r3, [sp, #4]
 8007392:	f000 faf1 	bl	8007978 <_vfiprintf_r>
 8007396:	b003      	add	sp, #12
 8007398:	f85d eb04 	ldr.w	lr, [sp], #4
 800739c:	b004      	add	sp, #16
 800739e:	4770      	bx	lr
 80073a0:	20000054 	.word	0x20000054

080073a4 <putchar>:
 80073a4:	4b02      	ldr	r3, [pc, #8]	@ (80073b0 <putchar+0xc>)
 80073a6:	4601      	mov	r1, r0
 80073a8:	6818      	ldr	r0, [r3, #0]
 80073aa:	6882      	ldr	r2, [r0, #8]
 80073ac:	f000 be96 	b.w	80080dc <_putc_r>
 80073b0:	20000054 	.word	0x20000054

080073b4 <_puts_r>:
 80073b4:	6a03      	ldr	r3, [r0, #32]
 80073b6:	b570      	push	{r4, r5, r6, lr}
 80073b8:	6884      	ldr	r4, [r0, #8]
 80073ba:	4605      	mov	r5, r0
 80073bc:	460e      	mov	r6, r1
 80073be:	b90b      	cbnz	r3, 80073c4 <_puts_r+0x10>
 80073c0:	f7ff ffa8 	bl	8007314 <__sinit>
 80073c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80073c6:	07db      	lsls	r3, r3, #31
 80073c8:	d405      	bmi.n	80073d6 <_puts_r+0x22>
 80073ca:	89a3      	ldrh	r3, [r4, #12]
 80073cc:	0598      	lsls	r0, r3, #22
 80073ce:	d402      	bmi.n	80073d6 <_puts_r+0x22>
 80073d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80073d2:	f000 f99e 	bl	8007712 <__retarget_lock_acquire_recursive>
 80073d6:	89a3      	ldrh	r3, [r4, #12]
 80073d8:	0719      	lsls	r1, r3, #28
 80073da:	d502      	bpl.n	80073e2 <_puts_r+0x2e>
 80073dc:	6923      	ldr	r3, [r4, #16]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d135      	bne.n	800744e <_puts_r+0x9a>
 80073e2:	4621      	mov	r1, r4
 80073e4:	4628      	mov	r0, r5
 80073e6:	f000 f8c5 	bl	8007574 <__swsetup_r>
 80073ea:	b380      	cbz	r0, 800744e <_puts_r+0x9a>
 80073ec:	f04f 35ff 	mov.w	r5, #4294967295
 80073f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80073f2:	07da      	lsls	r2, r3, #31
 80073f4:	d405      	bmi.n	8007402 <_puts_r+0x4e>
 80073f6:	89a3      	ldrh	r3, [r4, #12]
 80073f8:	059b      	lsls	r3, r3, #22
 80073fa:	d402      	bmi.n	8007402 <_puts_r+0x4e>
 80073fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80073fe:	f000 f989 	bl	8007714 <__retarget_lock_release_recursive>
 8007402:	4628      	mov	r0, r5
 8007404:	bd70      	pop	{r4, r5, r6, pc}
 8007406:	2b00      	cmp	r3, #0
 8007408:	da04      	bge.n	8007414 <_puts_r+0x60>
 800740a:	69a2      	ldr	r2, [r4, #24]
 800740c:	429a      	cmp	r2, r3
 800740e:	dc17      	bgt.n	8007440 <_puts_r+0x8c>
 8007410:	290a      	cmp	r1, #10
 8007412:	d015      	beq.n	8007440 <_puts_r+0x8c>
 8007414:	6823      	ldr	r3, [r4, #0]
 8007416:	1c5a      	adds	r2, r3, #1
 8007418:	6022      	str	r2, [r4, #0]
 800741a:	7019      	strb	r1, [r3, #0]
 800741c:	68a3      	ldr	r3, [r4, #8]
 800741e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007422:	3b01      	subs	r3, #1
 8007424:	60a3      	str	r3, [r4, #8]
 8007426:	2900      	cmp	r1, #0
 8007428:	d1ed      	bne.n	8007406 <_puts_r+0x52>
 800742a:	2b00      	cmp	r3, #0
 800742c:	da11      	bge.n	8007452 <_puts_r+0x9e>
 800742e:	4622      	mov	r2, r4
 8007430:	210a      	movs	r1, #10
 8007432:	4628      	mov	r0, r5
 8007434:	f000 f85f 	bl	80074f6 <__swbuf_r>
 8007438:	3001      	adds	r0, #1
 800743a:	d0d7      	beq.n	80073ec <_puts_r+0x38>
 800743c:	250a      	movs	r5, #10
 800743e:	e7d7      	b.n	80073f0 <_puts_r+0x3c>
 8007440:	4622      	mov	r2, r4
 8007442:	4628      	mov	r0, r5
 8007444:	f000 f857 	bl	80074f6 <__swbuf_r>
 8007448:	3001      	adds	r0, #1
 800744a:	d1e7      	bne.n	800741c <_puts_r+0x68>
 800744c:	e7ce      	b.n	80073ec <_puts_r+0x38>
 800744e:	3e01      	subs	r6, #1
 8007450:	e7e4      	b.n	800741c <_puts_r+0x68>
 8007452:	6823      	ldr	r3, [r4, #0]
 8007454:	1c5a      	adds	r2, r3, #1
 8007456:	6022      	str	r2, [r4, #0]
 8007458:	220a      	movs	r2, #10
 800745a:	701a      	strb	r2, [r3, #0]
 800745c:	e7ee      	b.n	800743c <_puts_r+0x88>
	...

08007460 <puts>:
 8007460:	4b02      	ldr	r3, [pc, #8]	@ (800746c <puts+0xc>)
 8007462:	4601      	mov	r1, r0
 8007464:	6818      	ldr	r0, [r3, #0]
 8007466:	f7ff bfa5 	b.w	80073b4 <_puts_r>
 800746a:	bf00      	nop
 800746c:	20000054 	.word	0x20000054

08007470 <__sread>:
 8007470:	b510      	push	{r4, lr}
 8007472:	460c      	mov	r4, r1
 8007474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007478:	f000 f8fc 	bl	8007674 <_read_r>
 800747c:	2800      	cmp	r0, #0
 800747e:	bfab      	itete	ge
 8007480:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007482:	89a3      	ldrhlt	r3, [r4, #12]
 8007484:	181b      	addge	r3, r3, r0
 8007486:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800748a:	bfac      	ite	ge
 800748c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800748e:	81a3      	strhlt	r3, [r4, #12]
 8007490:	bd10      	pop	{r4, pc}

08007492 <__swrite>:
 8007492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007496:	461f      	mov	r7, r3
 8007498:	898b      	ldrh	r3, [r1, #12]
 800749a:	05db      	lsls	r3, r3, #23
 800749c:	4605      	mov	r5, r0
 800749e:	460c      	mov	r4, r1
 80074a0:	4616      	mov	r6, r2
 80074a2:	d505      	bpl.n	80074b0 <__swrite+0x1e>
 80074a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074a8:	2302      	movs	r3, #2
 80074aa:	2200      	movs	r2, #0
 80074ac:	f000 f8d0 	bl	8007650 <_lseek_r>
 80074b0:	89a3      	ldrh	r3, [r4, #12]
 80074b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80074ba:	81a3      	strh	r3, [r4, #12]
 80074bc:	4632      	mov	r2, r6
 80074be:	463b      	mov	r3, r7
 80074c0:	4628      	mov	r0, r5
 80074c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074c6:	f000 b8e7 	b.w	8007698 <_write_r>

080074ca <__sseek>:
 80074ca:	b510      	push	{r4, lr}
 80074cc:	460c      	mov	r4, r1
 80074ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074d2:	f000 f8bd 	bl	8007650 <_lseek_r>
 80074d6:	1c43      	adds	r3, r0, #1
 80074d8:	89a3      	ldrh	r3, [r4, #12]
 80074da:	bf15      	itete	ne
 80074dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80074de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80074e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80074e6:	81a3      	strheq	r3, [r4, #12]
 80074e8:	bf18      	it	ne
 80074ea:	81a3      	strhne	r3, [r4, #12]
 80074ec:	bd10      	pop	{r4, pc}

080074ee <__sclose>:
 80074ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074f2:	f000 b89d 	b.w	8007630 <_close_r>

080074f6 <__swbuf_r>:
 80074f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074f8:	460e      	mov	r6, r1
 80074fa:	4614      	mov	r4, r2
 80074fc:	4605      	mov	r5, r0
 80074fe:	b118      	cbz	r0, 8007508 <__swbuf_r+0x12>
 8007500:	6a03      	ldr	r3, [r0, #32]
 8007502:	b90b      	cbnz	r3, 8007508 <__swbuf_r+0x12>
 8007504:	f7ff ff06 	bl	8007314 <__sinit>
 8007508:	69a3      	ldr	r3, [r4, #24]
 800750a:	60a3      	str	r3, [r4, #8]
 800750c:	89a3      	ldrh	r3, [r4, #12]
 800750e:	071a      	lsls	r2, r3, #28
 8007510:	d501      	bpl.n	8007516 <__swbuf_r+0x20>
 8007512:	6923      	ldr	r3, [r4, #16]
 8007514:	b943      	cbnz	r3, 8007528 <__swbuf_r+0x32>
 8007516:	4621      	mov	r1, r4
 8007518:	4628      	mov	r0, r5
 800751a:	f000 f82b 	bl	8007574 <__swsetup_r>
 800751e:	b118      	cbz	r0, 8007528 <__swbuf_r+0x32>
 8007520:	f04f 37ff 	mov.w	r7, #4294967295
 8007524:	4638      	mov	r0, r7
 8007526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007528:	6823      	ldr	r3, [r4, #0]
 800752a:	6922      	ldr	r2, [r4, #16]
 800752c:	1a98      	subs	r0, r3, r2
 800752e:	6963      	ldr	r3, [r4, #20]
 8007530:	b2f6      	uxtb	r6, r6
 8007532:	4283      	cmp	r3, r0
 8007534:	4637      	mov	r7, r6
 8007536:	dc05      	bgt.n	8007544 <__swbuf_r+0x4e>
 8007538:	4621      	mov	r1, r4
 800753a:	4628      	mov	r0, r5
 800753c:	f000 fd44 	bl	8007fc8 <_fflush_r>
 8007540:	2800      	cmp	r0, #0
 8007542:	d1ed      	bne.n	8007520 <__swbuf_r+0x2a>
 8007544:	68a3      	ldr	r3, [r4, #8]
 8007546:	3b01      	subs	r3, #1
 8007548:	60a3      	str	r3, [r4, #8]
 800754a:	6823      	ldr	r3, [r4, #0]
 800754c:	1c5a      	adds	r2, r3, #1
 800754e:	6022      	str	r2, [r4, #0]
 8007550:	701e      	strb	r6, [r3, #0]
 8007552:	6962      	ldr	r2, [r4, #20]
 8007554:	1c43      	adds	r3, r0, #1
 8007556:	429a      	cmp	r2, r3
 8007558:	d004      	beq.n	8007564 <__swbuf_r+0x6e>
 800755a:	89a3      	ldrh	r3, [r4, #12]
 800755c:	07db      	lsls	r3, r3, #31
 800755e:	d5e1      	bpl.n	8007524 <__swbuf_r+0x2e>
 8007560:	2e0a      	cmp	r6, #10
 8007562:	d1df      	bne.n	8007524 <__swbuf_r+0x2e>
 8007564:	4621      	mov	r1, r4
 8007566:	4628      	mov	r0, r5
 8007568:	f000 fd2e 	bl	8007fc8 <_fflush_r>
 800756c:	2800      	cmp	r0, #0
 800756e:	d0d9      	beq.n	8007524 <__swbuf_r+0x2e>
 8007570:	e7d6      	b.n	8007520 <__swbuf_r+0x2a>
	...

08007574 <__swsetup_r>:
 8007574:	b538      	push	{r3, r4, r5, lr}
 8007576:	4b29      	ldr	r3, [pc, #164]	@ (800761c <__swsetup_r+0xa8>)
 8007578:	4605      	mov	r5, r0
 800757a:	6818      	ldr	r0, [r3, #0]
 800757c:	460c      	mov	r4, r1
 800757e:	b118      	cbz	r0, 8007588 <__swsetup_r+0x14>
 8007580:	6a03      	ldr	r3, [r0, #32]
 8007582:	b90b      	cbnz	r3, 8007588 <__swsetup_r+0x14>
 8007584:	f7ff fec6 	bl	8007314 <__sinit>
 8007588:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800758c:	0719      	lsls	r1, r3, #28
 800758e:	d422      	bmi.n	80075d6 <__swsetup_r+0x62>
 8007590:	06da      	lsls	r2, r3, #27
 8007592:	d407      	bmi.n	80075a4 <__swsetup_r+0x30>
 8007594:	2209      	movs	r2, #9
 8007596:	602a      	str	r2, [r5, #0]
 8007598:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800759c:	81a3      	strh	r3, [r4, #12]
 800759e:	f04f 30ff 	mov.w	r0, #4294967295
 80075a2:	e033      	b.n	800760c <__swsetup_r+0x98>
 80075a4:	0758      	lsls	r0, r3, #29
 80075a6:	d512      	bpl.n	80075ce <__swsetup_r+0x5a>
 80075a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80075aa:	b141      	cbz	r1, 80075be <__swsetup_r+0x4a>
 80075ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80075b0:	4299      	cmp	r1, r3
 80075b2:	d002      	beq.n	80075ba <__swsetup_r+0x46>
 80075b4:	4628      	mov	r0, r5
 80075b6:	f000 f8bd 	bl	8007734 <_free_r>
 80075ba:	2300      	movs	r3, #0
 80075bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80075be:	89a3      	ldrh	r3, [r4, #12]
 80075c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80075c4:	81a3      	strh	r3, [r4, #12]
 80075c6:	2300      	movs	r3, #0
 80075c8:	6063      	str	r3, [r4, #4]
 80075ca:	6923      	ldr	r3, [r4, #16]
 80075cc:	6023      	str	r3, [r4, #0]
 80075ce:	89a3      	ldrh	r3, [r4, #12]
 80075d0:	f043 0308 	orr.w	r3, r3, #8
 80075d4:	81a3      	strh	r3, [r4, #12]
 80075d6:	6923      	ldr	r3, [r4, #16]
 80075d8:	b94b      	cbnz	r3, 80075ee <__swsetup_r+0x7a>
 80075da:	89a3      	ldrh	r3, [r4, #12]
 80075dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80075e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075e4:	d003      	beq.n	80075ee <__swsetup_r+0x7a>
 80075e6:	4621      	mov	r1, r4
 80075e8:	4628      	mov	r0, r5
 80075ea:	f000 fd3b 	bl	8008064 <__smakebuf_r>
 80075ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075f2:	f013 0201 	ands.w	r2, r3, #1
 80075f6:	d00a      	beq.n	800760e <__swsetup_r+0x9a>
 80075f8:	2200      	movs	r2, #0
 80075fa:	60a2      	str	r2, [r4, #8]
 80075fc:	6962      	ldr	r2, [r4, #20]
 80075fe:	4252      	negs	r2, r2
 8007600:	61a2      	str	r2, [r4, #24]
 8007602:	6922      	ldr	r2, [r4, #16]
 8007604:	b942      	cbnz	r2, 8007618 <__swsetup_r+0xa4>
 8007606:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800760a:	d1c5      	bne.n	8007598 <__swsetup_r+0x24>
 800760c:	bd38      	pop	{r3, r4, r5, pc}
 800760e:	0799      	lsls	r1, r3, #30
 8007610:	bf58      	it	pl
 8007612:	6962      	ldrpl	r2, [r4, #20]
 8007614:	60a2      	str	r2, [r4, #8]
 8007616:	e7f4      	b.n	8007602 <__swsetup_r+0x8e>
 8007618:	2000      	movs	r0, #0
 800761a:	e7f7      	b.n	800760c <__swsetup_r+0x98>
 800761c:	20000054 	.word	0x20000054

08007620 <memset>:
 8007620:	4402      	add	r2, r0
 8007622:	4603      	mov	r3, r0
 8007624:	4293      	cmp	r3, r2
 8007626:	d100      	bne.n	800762a <memset+0xa>
 8007628:	4770      	bx	lr
 800762a:	f803 1b01 	strb.w	r1, [r3], #1
 800762e:	e7f9      	b.n	8007624 <memset+0x4>

08007630 <_close_r>:
 8007630:	b538      	push	{r3, r4, r5, lr}
 8007632:	4d06      	ldr	r5, [pc, #24]	@ (800764c <_close_r+0x1c>)
 8007634:	2300      	movs	r3, #0
 8007636:	4604      	mov	r4, r0
 8007638:	4608      	mov	r0, r1
 800763a:	602b      	str	r3, [r5, #0]
 800763c:	f7f9 fe2f 	bl	800129e <_close>
 8007640:	1c43      	adds	r3, r0, #1
 8007642:	d102      	bne.n	800764a <_close_r+0x1a>
 8007644:	682b      	ldr	r3, [r5, #0]
 8007646:	b103      	cbz	r3, 800764a <_close_r+0x1a>
 8007648:	6023      	str	r3, [r4, #0]
 800764a:	bd38      	pop	{r3, r4, r5, pc}
 800764c:	200030e8 	.word	0x200030e8

08007650 <_lseek_r>:
 8007650:	b538      	push	{r3, r4, r5, lr}
 8007652:	4d07      	ldr	r5, [pc, #28]	@ (8007670 <_lseek_r+0x20>)
 8007654:	4604      	mov	r4, r0
 8007656:	4608      	mov	r0, r1
 8007658:	4611      	mov	r1, r2
 800765a:	2200      	movs	r2, #0
 800765c:	602a      	str	r2, [r5, #0]
 800765e:	461a      	mov	r2, r3
 8007660:	f7f9 fe44 	bl	80012ec <_lseek>
 8007664:	1c43      	adds	r3, r0, #1
 8007666:	d102      	bne.n	800766e <_lseek_r+0x1e>
 8007668:	682b      	ldr	r3, [r5, #0]
 800766a:	b103      	cbz	r3, 800766e <_lseek_r+0x1e>
 800766c:	6023      	str	r3, [r4, #0]
 800766e:	bd38      	pop	{r3, r4, r5, pc}
 8007670:	200030e8 	.word	0x200030e8

08007674 <_read_r>:
 8007674:	b538      	push	{r3, r4, r5, lr}
 8007676:	4d07      	ldr	r5, [pc, #28]	@ (8007694 <_read_r+0x20>)
 8007678:	4604      	mov	r4, r0
 800767a:	4608      	mov	r0, r1
 800767c:	4611      	mov	r1, r2
 800767e:	2200      	movs	r2, #0
 8007680:	602a      	str	r2, [r5, #0]
 8007682:	461a      	mov	r2, r3
 8007684:	f7f9 fdd2 	bl	800122c <_read>
 8007688:	1c43      	adds	r3, r0, #1
 800768a:	d102      	bne.n	8007692 <_read_r+0x1e>
 800768c:	682b      	ldr	r3, [r5, #0]
 800768e:	b103      	cbz	r3, 8007692 <_read_r+0x1e>
 8007690:	6023      	str	r3, [r4, #0]
 8007692:	bd38      	pop	{r3, r4, r5, pc}
 8007694:	200030e8 	.word	0x200030e8

08007698 <_write_r>:
 8007698:	b538      	push	{r3, r4, r5, lr}
 800769a:	4d07      	ldr	r5, [pc, #28]	@ (80076b8 <_write_r+0x20>)
 800769c:	4604      	mov	r4, r0
 800769e:	4608      	mov	r0, r1
 80076a0:	4611      	mov	r1, r2
 80076a2:	2200      	movs	r2, #0
 80076a4:	602a      	str	r2, [r5, #0]
 80076a6:	461a      	mov	r2, r3
 80076a8:	f7f9 fddd 	bl	8001266 <_write>
 80076ac:	1c43      	adds	r3, r0, #1
 80076ae:	d102      	bne.n	80076b6 <_write_r+0x1e>
 80076b0:	682b      	ldr	r3, [r5, #0]
 80076b2:	b103      	cbz	r3, 80076b6 <_write_r+0x1e>
 80076b4:	6023      	str	r3, [r4, #0]
 80076b6:	bd38      	pop	{r3, r4, r5, pc}
 80076b8:	200030e8 	.word	0x200030e8

080076bc <__errno>:
 80076bc:	4b01      	ldr	r3, [pc, #4]	@ (80076c4 <__errno+0x8>)
 80076be:	6818      	ldr	r0, [r3, #0]
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	20000054 	.word	0x20000054

080076c8 <__libc_init_array>:
 80076c8:	b570      	push	{r4, r5, r6, lr}
 80076ca:	4d0d      	ldr	r5, [pc, #52]	@ (8007700 <__libc_init_array+0x38>)
 80076cc:	4c0d      	ldr	r4, [pc, #52]	@ (8007704 <__libc_init_array+0x3c>)
 80076ce:	1b64      	subs	r4, r4, r5
 80076d0:	10a4      	asrs	r4, r4, #2
 80076d2:	2600      	movs	r6, #0
 80076d4:	42a6      	cmp	r6, r4
 80076d6:	d109      	bne.n	80076ec <__libc_init_array+0x24>
 80076d8:	4d0b      	ldr	r5, [pc, #44]	@ (8007708 <__libc_init_array+0x40>)
 80076da:	4c0c      	ldr	r4, [pc, #48]	@ (800770c <__libc_init_array+0x44>)
 80076dc:	f000 fd64 	bl	80081a8 <_init>
 80076e0:	1b64      	subs	r4, r4, r5
 80076e2:	10a4      	asrs	r4, r4, #2
 80076e4:	2600      	movs	r6, #0
 80076e6:	42a6      	cmp	r6, r4
 80076e8:	d105      	bne.n	80076f6 <__libc_init_array+0x2e>
 80076ea:	bd70      	pop	{r4, r5, r6, pc}
 80076ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80076f0:	4798      	blx	r3
 80076f2:	3601      	adds	r6, #1
 80076f4:	e7ee      	b.n	80076d4 <__libc_init_array+0xc>
 80076f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80076fa:	4798      	blx	r3
 80076fc:	3601      	adds	r6, #1
 80076fe:	e7f2      	b.n	80076e6 <__libc_init_array+0x1e>
 8007700:	0801dba8 	.word	0x0801dba8
 8007704:	0801dba8 	.word	0x0801dba8
 8007708:	0801dba8 	.word	0x0801dba8
 800770c:	0801dbac 	.word	0x0801dbac

08007710 <__retarget_lock_init_recursive>:
 8007710:	4770      	bx	lr

08007712 <__retarget_lock_acquire_recursive>:
 8007712:	4770      	bx	lr

08007714 <__retarget_lock_release_recursive>:
 8007714:	4770      	bx	lr

08007716 <memcpy>:
 8007716:	440a      	add	r2, r1
 8007718:	4291      	cmp	r1, r2
 800771a:	f100 33ff 	add.w	r3, r0, #4294967295
 800771e:	d100      	bne.n	8007722 <memcpy+0xc>
 8007720:	4770      	bx	lr
 8007722:	b510      	push	{r4, lr}
 8007724:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007728:	f803 4f01 	strb.w	r4, [r3, #1]!
 800772c:	4291      	cmp	r1, r2
 800772e:	d1f9      	bne.n	8007724 <memcpy+0xe>
 8007730:	bd10      	pop	{r4, pc}
	...

08007734 <_free_r>:
 8007734:	b538      	push	{r3, r4, r5, lr}
 8007736:	4605      	mov	r5, r0
 8007738:	2900      	cmp	r1, #0
 800773a:	d041      	beq.n	80077c0 <_free_r+0x8c>
 800773c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007740:	1f0c      	subs	r4, r1, #4
 8007742:	2b00      	cmp	r3, #0
 8007744:	bfb8      	it	lt
 8007746:	18e4      	addlt	r4, r4, r3
 8007748:	f000 f8e0 	bl	800790c <__malloc_lock>
 800774c:	4a1d      	ldr	r2, [pc, #116]	@ (80077c4 <_free_r+0x90>)
 800774e:	6813      	ldr	r3, [r2, #0]
 8007750:	b933      	cbnz	r3, 8007760 <_free_r+0x2c>
 8007752:	6063      	str	r3, [r4, #4]
 8007754:	6014      	str	r4, [r2, #0]
 8007756:	4628      	mov	r0, r5
 8007758:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800775c:	f000 b8dc 	b.w	8007918 <__malloc_unlock>
 8007760:	42a3      	cmp	r3, r4
 8007762:	d908      	bls.n	8007776 <_free_r+0x42>
 8007764:	6820      	ldr	r0, [r4, #0]
 8007766:	1821      	adds	r1, r4, r0
 8007768:	428b      	cmp	r3, r1
 800776a:	bf01      	itttt	eq
 800776c:	6819      	ldreq	r1, [r3, #0]
 800776e:	685b      	ldreq	r3, [r3, #4]
 8007770:	1809      	addeq	r1, r1, r0
 8007772:	6021      	streq	r1, [r4, #0]
 8007774:	e7ed      	b.n	8007752 <_free_r+0x1e>
 8007776:	461a      	mov	r2, r3
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	b10b      	cbz	r3, 8007780 <_free_r+0x4c>
 800777c:	42a3      	cmp	r3, r4
 800777e:	d9fa      	bls.n	8007776 <_free_r+0x42>
 8007780:	6811      	ldr	r1, [r2, #0]
 8007782:	1850      	adds	r0, r2, r1
 8007784:	42a0      	cmp	r0, r4
 8007786:	d10b      	bne.n	80077a0 <_free_r+0x6c>
 8007788:	6820      	ldr	r0, [r4, #0]
 800778a:	4401      	add	r1, r0
 800778c:	1850      	adds	r0, r2, r1
 800778e:	4283      	cmp	r3, r0
 8007790:	6011      	str	r1, [r2, #0]
 8007792:	d1e0      	bne.n	8007756 <_free_r+0x22>
 8007794:	6818      	ldr	r0, [r3, #0]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	6053      	str	r3, [r2, #4]
 800779a:	4408      	add	r0, r1
 800779c:	6010      	str	r0, [r2, #0]
 800779e:	e7da      	b.n	8007756 <_free_r+0x22>
 80077a0:	d902      	bls.n	80077a8 <_free_r+0x74>
 80077a2:	230c      	movs	r3, #12
 80077a4:	602b      	str	r3, [r5, #0]
 80077a6:	e7d6      	b.n	8007756 <_free_r+0x22>
 80077a8:	6820      	ldr	r0, [r4, #0]
 80077aa:	1821      	adds	r1, r4, r0
 80077ac:	428b      	cmp	r3, r1
 80077ae:	bf04      	itt	eq
 80077b0:	6819      	ldreq	r1, [r3, #0]
 80077b2:	685b      	ldreq	r3, [r3, #4]
 80077b4:	6063      	str	r3, [r4, #4]
 80077b6:	bf04      	itt	eq
 80077b8:	1809      	addeq	r1, r1, r0
 80077ba:	6021      	streq	r1, [r4, #0]
 80077bc:	6054      	str	r4, [r2, #4]
 80077be:	e7ca      	b.n	8007756 <_free_r+0x22>
 80077c0:	bd38      	pop	{r3, r4, r5, pc}
 80077c2:	bf00      	nop
 80077c4:	200030f4 	.word	0x200030f4

080077c8 <sbrk_aligned>:
 80077c8:	b570      	push	{r4, r5, r6, lr}
 80077ca:	4e0f      	ldr	r6, [pc, #60]	@ (8007808 <sbrk_aligned+0x40>)
 80077cc:	460c      	mov	r4, r1
 80077ce:	6831      	ldr	r1, [r6, #0]
 80077d0:	4605      	mov	r5, r0
 80077d2:	b911      	cbnz	r1, 80077da <sbrk_aligned+0x12>
 80077d4:	f000 fcd8 	bl	8008188 <_sbrk_r>
 80077d8:	6030      	str	r0, [r6, #0]
 80077da:	4621      	mov	r1, r4
 80077dc:	4628      	mov	r0, r5
 80077de:	f000 fcd3 	bl	8008188 <_sbrk_r>
 80077e2:	1c43      	adds	r3, r0, #1
 80077e4:	d103      	bne.n	80077ee <sbrk_aligned+0x26>
 80077e6:	f04f 34ff 	mov.w	r4, #4294967295
 80077ea:	4620      	mov	r0, r4
 80077ec:	bd70      	pop	{r4, r5, r6, pc}
 80077ee:	1cc4      	adds	r4, r0, #3
 80077f0:	f024 0403 	bic.w	r4, r4, #3
 80077f4:	42a0      	cmp	r0, r4
 80077f6:	d0f8      	beq.n	80077ea <sbrk_aligned+0x22>
 80077f8:	1a21      	subs	r1, r4, r0
 80077fa:	4628      	mov	r0, r5
 80077fc:	f000 fcc4 	bl	8008188 <_sbrk_r>
 8007800:	3001      	adds	r0, #1
 8007802:	d1f2      	bne.n	80077ea <sbrk_aligned+0x22>
 8007804:	e7ef      	b.n	80077e6 <sbrk_aligned+0x1e>
 8007806:	bf00      	nop
 8007808:	200030f0 	.word	0x200030f0

0800780c <_malloc_r>:
 800780c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007810:	1ccd      	adds	r5, r1, #3
 8007812:	f025 0503 	bic.w	r5, r5, #3
 8007816:	3508      	adds	r5, #8
 8007818:	2d0c      	cmp	r5, #12
 800781a:	bf38      	it	cc
 800781c:	250c      	movcc	r5, #12
 800781e:	2d00      	cmp	r5, #0
 8007820:	4606      	mov	r6, r0
 8007822:	db01      	blt.n	8007828 <_malloc_r+0x1c>
 8007824:	42a9      	cmp	r1, r5
 8007826:	d904      	bls.n	8007832 <_malloc_r+0x26>
 8007828:	230c      	movs	r3, #12
 800782a:	6033      	str	r3, [r6, #0]
 800782c:	2000      	movs	r0, #0
 800782e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007832:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007908 <_malloc_r+0xfc>
 8007836:	f000 f869 	bl	800790c <__malloc_lock>
 800783a:	f8d8 3000 	ldr.w	r3, [r8]
 800783e:	461c      	mov	r4, r3
 8007840:	bb44      	cbnz	r4, 8007894 <_malloc_r+0x88>
 8007842:	4629      	mov	r1, r5
 8007844:	4630      	mov	r0, r6
 8007846:	f7ff ffbf 	bl	80077c8 <sbrk_aligned>
 800784a:	1c43      	adds	r3, r0, #1
 800784c:	4604      	mov	r4, r0
 800784e:	d158      	bne.n	8007902 <_malloc_r+0xf6>
 8007850:	f8d8 4000 	ldr.w	r4, [r8]
 8007854:	4627      	mov	r7, r4
 8007856:	2f00      	cmp	r7, #0
 8007858:	d143      	bne.n	80078e2 <_malloc_r+0xd6>
 800785a:	2c00      	cmp	r4, #0
 800785c:	d04b      	beq.n	80078f6 <_malloc_r+0xea>
 800785e:	6823      	ldr	r3, [r4, #0]
 8007860:	4639      	mov	r1, r7
 8007862:	4630      	mov	r0, r6
 8007864:	eb04 0903 	add.w	r9, r4, r3
 8007868:	f000 fc8e 	bl	8008188 <_sbrk_r>
 800786c:	4581      	cmp	r9, r0
 800786e:	d142      	bne.n	80078f6 <_malloc_r+0xea>
 8007870:	6821      	ldr	r1, [r4, #0]
 8007872:	1a6d      	subs	r5, r5, r1
 8007874:	4629      	mov	r1, r5
 8007876:	4630      	mov	r0, r6
 8007878:	f7ff ffa6 	bl	80077c8 <sbrk_aligned>
 800787c:	3001      	adds	r0, #1
 800787e:	d03a      	beq.n	80078f6 <_malloc_r+0xea>
 8007880:	6823      	ldr	r3, [r4, #0]
 8007882:	442b      	add	r3, r5
 8007884:	6023      	str	r3, [r4, #0]
 8007886:	f8d8 3000 	ldr.w	r3, [r8]
 800788a:	685a      	ldr	r2, [r3, #4]
 800788c:	bb62      	cbnz	r2, 80078e8 <_malloc_r+0xdc>
 800788e:	f8c8 7000 	str.w	r7, [r8]
 8007892:	e00f      	b.n	80078b4 <_malloc_r+0xa8>
 8007894:	6822      	ldr	r2, [r4, #0]
 8007896:	1b52      	subs	r2, r2, r5
 8007898:	d420      	bmi.n	80078dc <_malloc_r+0xd0>
 800789a:	2a0b      	cmp	r2, #11
 800789c:	d917      	bls.n	80078ce <_malloc_r+0xc2>
 800789e:	1961      	adds	r1, r4, r5
 80078a0:	42a3      	cmp	r3, r4
 80078a2:	6025      	str	r5, [r4, #0]
 80078a4:	bf18      	it	ne
 80078a6:	6059      	strne	r1, [r3, #4]
 80078a8:	6863      	ldr	r3, [r4, #4]
 80078aa:	bf08      	it	eq
 80078ac:	f8c8 1000 	streq.w	r1, [r8]
 80078b0:	5162      	str	r2, [r4, r5]
 80078b2:	604b      	str	r3, [r1, #4]
 80078b4:	4630      	mov	r0, r6
 80078b6:	f000 f82f 	bl	8007918 <__malloc_unlock>
 80078ba:	f104 000b 	add.w	r0, r4, #11
 80078be:	1d23      	adds	r3, r4, #4
 80078c0:	f020 0007 	bic.w	r0, r0, #7
 80078c4:	1ac2      	subs	r2, r0, r3
 80078c6:	bf1c      	itt	ne
 80078c8:	1a1b      	subne	r3, r3, r0
 80078ca:	50a3      	strne	r3, [r4, r2]
 80078cc:	e7af      	b.n	800782e <_malloc_r+0x22>
 80078ce:	6862      	ldr	r2, [r4, #4]
 80078d0:	42a3      	cmp	r3, r4
 80078d2:	bf0c      	ite	eq
 80078d4:	f8c8 2000 	streq.w	r2, [r8]
 80078d8:	605a      	strne	r2, [r3, #4]
 80078da:	e7eb      	b.n	80078b4 <_malloc_r+0xa8>
 80078dc:	4623      	mov	r3, r4
 80078de:	6864      	ldr	r4, [r4, #4]
 80078e0:	e7ae      	b.n	8007840 <_malloc_r+0x34>
 80078e2:	463c      	mov	r4, r7
 80078e4:	687f      	ldr	r7, [r7, #4]
 80078e6:	e7b6      	b.n	8007856 <_malloc_r+0x4a>
 80078e8:	461a      	mov	r2, r3
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	42a3      	cmp	r3, r4
 80078ee:	d1fb      	bne.n	80078e8 <_malloc_r+0xdc>
 80078f0:	2300      	movs	r3, #0
 80078f2:	6053      	str	r3, [r2, #4]
 80078f4:	e7de      	b.n	80078b4 <_malloc_r+0xa8>
 80078f6:	230c      	movs	r3, #12
 80078f8:	6033      	str	r3, [r6, #0]
 80078fa:	4630      	mov	r0, r6
 80078fc:	f000 f80c 	bl	8007918 <__malloc_unlock>
 8007900:	e794      	b.n	800782c <_malloc_r+0x20>
 8007902:	6005      	str	r5, [r0, #0]
 8007904:	e7d6      	b.n	80078b4 <_malloc_r+0xa8>
 8007906:	bf00      	nop
 8007908:	200030f4 	.word	0x200030f4

0800790c <__malloc_lock>:
 800790c:	4801      	ldr	r0, [pc, #4]	@ (8007914 <__malloc_lock+0x8>)
 800790e:	f7ff bf00 	b.w	8007712 <__retarget_lock_acquire_recursive>
 8007912:	bf00      	nop
 8007914:	200030ec 	.word	0x200030ec

08007918 <__malloc_unlock>:
 8007918:	4801      	ldr	r0, [pc, #4]	@ (8007920 <__malloc_unlock+0x8>)
 800791a:	f7ff befb 	b.w	8007714 <__retarget_lock_release_recursive>
 800791e:	bf00      	nop
 8007920:	200030ec 	.word	0x200030ec

08007924 <__sfputc_r>:
 8007924:	6893      	ldr	r3, [r2, #8]
 8007926:	3b01      	subs	r3, #1
 8007928:	2b00      	cmp	r3, #0
 800792a:	b410      	push	{r4}
 800792c:	6093      	str	r3, [r2, #8]
 800792e:	da08      	bge.n	8007942 <__sfputc_r+0x1e>
 8007930:	6994      	ldr	r4, [r2, #24]
 8007932:	42a3      	cmp	r3, r4
 8007934:	db01      	blt.n	800793a <__sfputc_r+0x16>
 8007936:	290a      	cmp	r1, #10
 8007938:	d103      	bne.n	8007942 <__sfputc_r+0x1e>
 800793a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800793e:	f7ff bdda 	b.w	80074f6 <__swbuf_r>
 8007942:	6813      	ldr	r3, [r2, #0]
 8007944:	1c58      	adds	r0, r3, #1
 8007946:	6010      	str	r0, [r2, #0]
 8007948:	7019      	strb	r1, [r3, #0]
 800794a:	4608      	mov	r0, r1
 800794c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007950:	4770      	bx	lr

08007952 <__sfputs_r>:
 8007952:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007954:	4606      	mov	r6, r0
 8007956:	460f      	mov	r7, r1
 8007958:	4614      	mov	r4, r2
 800795a:	18d5      	adds	r5, r2, r3
 800795c:	42ac      	cmp	r4, r5
 800795e:	d101      	bne.n	8007964 <__sfputs_r+0x12>
 8007960:	2000      	movs	r0, #0
 8007962:	e007      	b.n	8007974 <__sfputs_r+0x22>
 8007964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007968:	463a      	mov	r2, r7
 800796a:	4630      	mov	r0, r6
 800796c:	f7ff ffda 	bl	8007924 <__sfputc_r>
 8007970:	1c43      	adds	r3, r0, #1
 8007972:	d1f3      	bne.n	800795c <__sfputs_r+0xa>
 8007974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007978 <_vfiprintf_r>:
 8007978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800797c:	460d      	mov	r5, r1
 800797e:	b09d      	sub	sp, #116	@ 0x74
 8007980:	4614      	mov	r4, r2
 8007982:	4698      	mov	r8, r3
 8007984:	4606      	mov	r6, r0
 8007986:	b118      	cbz	r0, 8007990 <_vfiprintf_r+0x18>
 8007988:	6a03      	ldr	r3, [r0, #32]
 800798a:	b90b      	cbnz	r3, 8007990 <_vfiprintf_r+0x18>
 800798c:	f7ff fcc2 	bl	8007314 <__sinit>
 8007990:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007992:	07d9      	lsls	r1, r3, #31
 8007994:	d405      	bmi.n	80079a2 <_vfiprintf_r+0x2a>
 8007996:	89ab      	ldrh	r3, [r5, #12]
 8007998:	059a      	lsls	r2, r3, #22
 800799a:	d402      	bmi.n	80079a2 <_vfiprintf_r+0x2a>
 800799c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800799e:	f7ff feb8 	bl	8007712 <__retarget_lock_acquire_recursive>
 80079a2:	89ab      	ldrh	r3, [r5, #12]
 80079a4:	071b      	lsls	r3, r3, #28
 80079a6:	d501      	bpl.n	80079ac <_vfiprintf_r+0x34>
 80079a8:	692b      	ldr	r3, [r5, #16]
 80079aa:	b99b      	cbnz	r3, 80079d4 <_vfiprintf_r+0x5c>
 80079ac:	4629      	mov	r1, r5
 80079ae:	4630      	mov	r0, r6
 80079b0:	f7ff fde0 	bl	8007574 <__swsetup_r>
 80079b4:	b170      	cbz	r0, 80079d4 <_vfiprintf_r+0x5c>
 80079b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80079b8:	07dc      	lsls	r4, r3, #31
 80079ba:	d504      	bpl.n	80079c6 <_vfiprintf_r+0x4e>
 80079bc:	f04f 30ff 	mov.w	r0, #4294967295
 80079c0:	b01d      	add	sp, #116	@ 0x74
 80079c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079c6:	89ab      	ldrh	r3, [r5, #12]
 80079c8:	0598      	lsls	r0, r3, #22
 80079ca:	d4f7      	bmi.n	80079bc <_vfiprintf_r+0x44>
 80079cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80079ce:	f7ff fea1 	bl	8007714 <__retarget_lock_release_recursive>
 80079d2:	e7f3      	b.n	80079bc <_vfiprintf_r+0x44>
 80079d4:	2300      	movs	r3, #0
 80079d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80079d8:	2320      	movs	r3, #32
 80079da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80079de:	f8cd 800c 	str.w	r8, [sp, #12]
 80079e2:	2330      	movs	r3, #48	@ 0x30
 80079e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007b94 <_vfiprintf_r+0x21c>
 80079e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80079ec:	f04f 0901 	mov.w	r9, #1
 80079f0:	4623      	mov	r3, r4
 80079f2:	469a      	mov	sl, r3
 80079f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079f8:	b10a      	cbz	r2, 80079fe <_vfiprintf_r+0x86>
 80079fa:	2a25      	cmp	r2, #37	@ 0x25
 80079fc:	d1f9      	bne.n	80079f2 <_vfiprintf_r+0x7a>
 80079fe:	ebba 0b04 	subs.w	fp, sl, r4
 8007a02:	d00b      	beq.n	8007a1c <_vfiprintf_r+0xa4>
 8007a04:	465b      	mov	r3, fp
 8007a06:	4622      	mov	r2, r4
 8007a08:	4629      	mov	r1, r5
 8007a0a:	4630      	mov	r0, r6
 8007a0c:	f7ff ffa1 	bl	8007952 <__sfputs_r>
 8007a10:	3001      	adds	r0, #1
 8007a12:	f000 80a7 	beq.w	8007b64 <_vfiprintf_r+0x1ec>
 8007a16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a18:	445a      	add	r2, fp
 8007a1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a1c:	f89a 3000 	ldrb.w	r3, [sl]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 809f 	beq.w	8007b64 <_vfiprintf_r+0x1ec>
 8007a26:	2300      	movs	r3, #0
 8007a28:	f04f 32ff 	mov.w	r2, #4294967295
 8007a2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a30:	f10a 0a01 	add.w	sl, sl, #1
 8007a34:	9304      	str	r3, [sp, #16]
 8007a36:	9307      	str	r3, [sp, #28]
 8007a38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007a3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a3e:	4654      	mov	r4, sl
 8007a40:	2205      	movs	r2, #5
 8007a42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a46:	4853      	ldr	r0, [pc, #332]	@ (8007b94 <_vfiprintf_r+0x21c>)
 8007a48:	f7f8 fbca 	bl	80001e0 <memchr>
 8007a4c:	9a04      	ldr	r2, [sp, #16]
 8007a4e:	b9d8      	cbnz	r0, 8007a88 <_vfiprintf_r+0x110>
 8007a50:	06d1      	lsls	r1, r2, #27
 8007a52:	bf44      	itt	mi
 8007a54:	2320      	movmi	r3, #32
 8007a56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a5a:	0713      	lsls	r3, r2, #28
 8007a5c:	bf44      	itt	mi
 8007a5e:	232b      	movmi	r3, #43	@ 0x2b
 8007a60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a64:	f89a 3000 	ldrb.w	r3, [sl]
 8007a68:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a6a:	d015      	beq.n	8007a98 <_vfiprintf_r+0x120>
 8007a6c:	9a07      	ldr	r2, [sp, #28]
 8007a6e:	4654      	mov	r4, sl
 8007a70:	2000      	movs	r0, #0
 8007a72:	f04f 0c0a 	mov.w	ip, #10
 8007a76:	4621      	mov	r1, r4
 8007a78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a7c:	3b30      	subs	r3, #48	@ 0x30
 8007a7e:	2b09      	cmp	r3, #9
 8007a80:	d94b      	bls.n	8007b1a <_vfiprintf_r+0x1a2>
 8007a82:	b1b0      	cbz	r0, 8007ab2 <_vfiprintf_r+0x13a>
 8007a84:	9207      	str	r2, [sp, #28]
 8007a86:	e014      	b.n	8007ab2 <_vfiprintf_r+0x13a>
 8007a88:	eba0 0308 	sub.w	r3, r0, r8
 8007a8c:	fa09 f303 	lsl.w	r3, r9, r3
 8007a90:	4313      	orrs	r3, r2
 8007a92:	9304      	str	r3, [sp, #16]
 8007a94:	46a2      	mov	sl, r4
 8007a96:	e7d2      	b.n	8007a3e <_vfiprintf_r+0xc6>
 8007a98:	9b03      	ldr	r3, [sp, #12]
 8007a9a:	1d19      	adds	r1, r3, #4
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	9103      	str	r1, [sp, #12]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	bfbb      	ittet	lt
 8007aa4:	425b      	neglt	r3, r3
 8007aa6:	f042 0202 	orrlt.w	r2, r2, #2
 8007aaa:	9307      	strge	r3, [sp, #28]
 8007aac:	9307      	strlt	r3, [sp, #28]
 8007aae:	bfb8      	it	lt
 8007ab0:	9204      	strlt	r2, [sp, #16]
 8007ab2:	7823      	ldrb	r3, [r4, #0]
 8007ab4:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ab6:	d10a      	bne.n	8007ace <_vfiprintf_r+0x156>
 8007ab8:	7863      	ldrb	r3, [r4, #1]
 8007aba:	2b2a      	cmp	r3, #42	@ 0x2a
 8007abc:	d132      	bne.n	8007b24 <_vfiprintf_r+0x1ac>
 8007abe:	9b03      	ldr	r3, [sp, #12]
 8007ac0:	1d1a      	adds	r2, r3, #4
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	9203      	str	r2, [sp, #12]
 8007ac6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007aca:	3402      	adds	r4, #2
 8007acc:	9305      	str	r3, [sp, #20]
 8007ace:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007ba4 <_vfiprintf_r+0x22c>
 8007ad2:	7821      	ldrb	r1, [r4, #0]
 8007ad4:	2203      	movs	r2, #3
 8007ad6:	4650      	mov	r0, sl
 8007ad8:	f7f8 fb82 	bl	80001e0 <memchr>
 8007adc:	b138      	cbz	r0, 8007aee <_vfiprintf_r+0x176>
 8007ade:	9b04      	ldr	r3, [sp, #16]
 8007ae0:	eba0 000a 	sub.w	r0, r0, sl
 8007ae4:	2240      	movs	r2, #64	@ 0x40
 8007ae6:	4082      	lsls	r2, r0
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	3401      	adds	r4, #1
 8007aec:	9304      	str	r3, [sp, #16]
 8007aee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007af2:	4829      	ldr	r0, [pc, #164]	@ (8007b98 <_vfiprintf_r+0x220>)
 8007af4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007af8:	2206      	movs	r2, #6
 8007afa:	f7f8 fb71 	bl	80001e0 <memchr>
 8007afe:	2800      	cmp	r0, #0
 8007b00:	d03f      	beq.n	8007b82 <_vfiprintf_r+0x20a>
 8007b02:	4b26      	ldr	r3, [pc, #152]	@ (8007b9c <_vfiprintf_r+0x224>)
 8007b04:	bb1b      	cbnz	r3, 8007b4e <_vfiprintf_r+0x1d6>
 8007b06:	9b03      	ldr	r3, [sp, #12]
 8007b08:	3307      	adds	r3, #7
 8007b0a:	f023 0307 	bic.w	r3, r3, #7
 8007b0e:	3308      	adds	r3, #8
 8007b10:	9303      	str	r3, [sp, #12]
 8007b12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b14:	443b      	add	r3, r7
 8007b16:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b18:	e76a      	b.n	80079f0 <_vfiprintf_r+0x78>
 8007b1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b1e:	460c      	mov	r4, r1
 8007b20:	2001      	movs	r0, #1
 8007b22:	e7a8      	b.n	8007a76 <_vfiprintf_r+0xfe>
 8007b24:	2300      	movs	r3, #0
 8007b26:	3401      	adds	r4, #1
 8007b28:	9305      	str	r3, [sp, #20]
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	f04f 0c0a 	mov.w	ip, #10
 8007b30:	4620      	mov	r0, r4
 8007b32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b36:	3a30      	subs	r2, #48	@ 0x30
 8007b38:	2a09      	cmp	r2, #9
 8007b3a:	d903      	bls.n	8007b44 <_vfiprintf_r+0x1cc>
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d0c6      	beq.n	8007ace <_vfiprintf_r+0x156>
 8007b40:	9105      	str	r1, [sp, #20]
 8007b42:	e7c4      	b.n	8007ace <_vfiprintf_r+0x156>
 8007b44:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b48:	4604      	mov	r4, r0
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e7f0      	b.n	8007b30 <_vfiprintf_r+0x1b8>
 8007b4e:	ab03      	add	r3, sp, #12
 8007b50:	9300      	str	r3, [sp, #0]
 8007b52:	462a      	mov	r2, r5
 8007b54:	4b12      	ldr	r3, [pc, #72]	@ (8007ba0 <_vfiprintf_r+0x228>)
 8007b56:	a904      	add	r1, sp, #16
 8007b58:	4630      	mov	r0, r6
 8007b5a:	f3af 8000 	nop.w
 8007b5e:	4607      	mov	r7, r0
 8007b60:	1c78      	adds	r0, r7, #1
 8007b62:	d1d6      	bne.n	8007b12 <_vfiprintf_r+0x19a>
 8007b64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b66:	07d9      	lsls	r1, r3, #31
 8007b68:	d405      	bmi.n	8007b76 <_vfiprintf_r+0x1fe>
 8007b6a:	89ab      	ldrh	r3, [r5, #12]
 8007b6c:	059a      	lsls	r2, r3, #22
 8007b6e:	d402      	bmi.n	8007b76 <_vfiprintf_r+0x1fe>
 8007b70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b72:	f7ff fdcf 	bl	8007714 <__retarget_lock_release_recursive>
 8007b76:	89ab      	ldrh	r3, [r5, #12]
 8007b78:	065b      	lsls	r3, r3, #25
 8007b7a:	f53f af1f 	bmi.w	80079bc <_vfiprintf_r+0x44>
 8007b7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b80:	e71e      	b.n	80079c0 <_vfiprintf_r+0x48>
 8007b82:	ab03      	add	r3, sp, #12
 8007b84:	9300      	str	r3, [sp, #0]
 8007b86:	462a      	mov	r2, r5
 8007b88:	4b05      	ldr	r3, [pc, #20]	@ (8007ba0 <_vfiprintf_r+0x228>)
 8007b8a:	a904      	add	r1, sp, #16
 8007b8c:	4630      	mov	r0, r6
 8007b8e:	f000 f879 	bl	8007c84 <_printf_i>
 8007b92:	e7e4      	b.n	8007b5e <_vfiprintf_r+0x1e6>
 8007b94:	0801db6c 	.word	0x0801db6c
 8007b98:	0801db76 	.word	0x0801db76
 8007b9c:	00000000 	.word	0x00000000
 8007ba0:	08007953 	.word	0x08007953
 8007ba4:	0801db72 	.word	0x0801db72

08007ba8 <_printf_common>:
 8007ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bac:	4616      	mov	r6, r2
 8007bae:	4698      	mov	r8, r3
 8007bb0:	688a      	ldr	r2, [r1, #8]
 8007bb2:	690b      	ldr	r3, [r1, #16]
 8007bb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	bfb8      	it	lt
 8007bbc:	4613      	movlt	r3, r2
 8007bbe:	6033      	str	r3, [r6, #0]
 8007bc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007bc4:	4607      	mov	r7, r0
 8007bc6:	460c      	mov	r4, r1
 8007bc8:	b10a      	cbz	r2, 8007bce <_printf_common+0x26>
 8007bca:	3301      	adds	r3, #1
 8007bcc:	6033      	str	r3, [r6, #0]
 8007bce:	6823      	ldr	r3, [r4, #0]
 8007bd0:	0699      	lsls	r1, r3, #26
 8007bd2:	bf42      	ittt	mi
 8007bd4:	6833      	ldrmi	r3, [r6, #0]
 8007bd6:	3302      	addmi	r3, #2
 8007bd8:	6033      	strmi	r3, [r6, #0]
 8007bda:	6825      	ldr	r5, [r4, #0]
 8007bdc:	f015 0506 	ands.w	r5, r5, #6
 8007be0:	d106      	bne.n	8007bf0 <_printf_common+0x48>
 8007be2:	f104 0a19 	add.w	sl, r4, #25
 8007be6:	68e3      	ldr	r3, [r4, #12]
 8007be8:	6832      	ldr	r2, [r6, #0]
 8007bea:	1a9b      	subs	r3, r3, r2
 8007bec:	42ab      	cmp	r3, r5
 8007bee:	dc26      	bgt.n	8007c3e <_printf_common+0x96>
 8007bf0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007bf4:	6822      	ldr	r2, [r4, #0]
 8007bf6:	3b00      	subs	r3, #0
 8007bf8:	bf18      	it	ne
 8007bfa:	2301      	movne	r3, #1
 8007bfc:	0692      	lsls	r2, r2, #26
 8007bfe:	d42b      	bmi.n	8007c58 <_printf_common+0xb0>
 8007c00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007c04:	4641      	mov	r1, r8
 8007c06:	4638      	mov	r0, r7
 8007c08:	47c8      	blx	r9
 8007c0a:	3001      	adds	r0, #1
 8007c0c:	d01e      	beq.n	8007c4c <_printf_common+0xa4>
 8007c0e:	6823      	ldr	r3, [r4, #0]
 8007c10:	6922      	ldr	r2, [r4, #16]
 8007c12:	f003 0306 	and.w	r3, r3, #6
 8007c16:	2b04      	cmp	r3, #4
 8007c18:	bf02      	ittt	eq
 8007c1a:	68e5      	ldreq	r5, [r4, #12]
 8007c1c:	6833      	ldreq	r3, [r6, #0]
 8007c1e:	1aed      	subeq	r5, r5, r3
 8007c20:	68a3      	ldr	r3, [r4, #8]
 8007c22:	bf0c      	ite	eq
 8007c24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c28:	2500      	movne	r5, #0
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	bfc4      	itt	gt
 8007c2e:	1a9b      	subgt	r3, r3, r2
 8007c30:	18ed      	addgt	r5, r5, r3
 8007c32:	2600      	movs	r6, #0
 8007c34:	341a      	adds	r4, #26
 8007c36:	42b5      	cmp	r5, r6
 8007c38:	d11a      	bne.n	8007c70 <_printf_common+0xc8>
 8007c3a:	2000      	movs	r0, #0
 8007c3c:	e008      	b.n	8007c50 <_printf_common+0xa8>
 8007c3e:	2301      	movs	r3, #1
 8007c40:	4652      	mov	r2, sl
 8007c42:	4641      	mov	r1, r8
 8007c44:	4638      	mov	r0, r7
 8007c46:	47c8      	blx	r9
 8007c48:	3001      	adds	r0, #1
 8007c4a:	d103      	bne.n	8007c54 <_printf_common+0xac>
 8007c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c54:	3501      	adds	r5, #1
 8007c56:	e7c6      	b.n	8007be6 <_printf_common+0x3e>
 8007c58:	18e1      	adds	r1, r4, r3
 8007c5a:	1c5a      	adds	r2, r3, #1
 8007c5c:	2030      	movs	r0, #48	@ 0x30
 8007c5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007c62:	4422      	add	r2, r4
 8007c64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007c68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007c6c:	3302      	adds	r3, #2
 8007c6e:	e7c7      	b.n	8007c00 <_printf_common+0x58>
 8007c70:	2301      	movs	r3, #1
 8007c72:	4622      	mov	r2, r4
 8007c74:	4641      	mov	r1, r8
 8007c76:	4638      	mov	r0, r7
 8007c78:	47c8      	blx	r9
 8007c7a:	3001      	adds	r0, #1
 8007c7c:	d0e6      	beq.n	8007c4c <_printf_common+0xa4>
 8007c7e:	3601      	adds	r6, #1
 8007c80:	e7d9      	b.n	8007c36 <_printf_common+0x8e>
	...

08007c84 <_printf_i>:
 8007c84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c88:	7e0f      	ldrb	r7, [r1, #24]
 8007c8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007c8c:	2f78      	cmp	r7, #120	@ 0x78
 8007c8e:	4691      	mov	r9, r2
 8007c90:	4680      	mov	r8, r0
 8007c92:	460c      	mov	r4, r1
 8007c94:	469a      	mov	sl, r3
 8007c96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007c9a:	d807      	bhi.n	8007cac <_printf_i+0x28>
 8007c9c:	2f62      	cmp	r7, #98	@ 0x62
 8007c9e:	d80a      	bhi.n	8007cb6 <_printf_i+0x32>
 8007ca0:	2f00      	cmp	r7, #0
 8007ca2:	f000 80d1 	beq.w	8007e48 <_printf_i+0x1c4>
 8007ca6:	2f58      	cmp	r7, #88	@ 0x58
 8007ca8:	f000 80b8 	beq.w	8007e1c <_printf_i+0x198>
 8007cac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007cb0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007cb4:	e03a      	b.n	8007d2c <_printf_i+0xa8>
 8007cb6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007cba:	2b15      	cmp	r3, #21
 8007cbc:	d8f6      	bhi.n	8007cac <_printf_i+0x28>
 8007cbe:	a101      	add	r1, pc, #4	@ (adr r1, 8007cc4 <_printf_i+0x40>)
 8007cc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007cc4:	08007d1d 	.word	0x08007d1d
 8007cc8:	08007d31 	.word	0x08007d31
 8007ccc:	08007cad 	.word	0x08007cad
 8007cd0:	08007cad 	.word	0x08007cad
 8007cd4:	08007cad 	.word	0x08007cad
 8007cd8:	08007cad 	.word	0x08007cad
 8007cdc:	08007d31 	.word	0x08007d31
 8007ce0:	08007cad 	.word	0x08007cad
 8007ce4:	08007cad 	.word	0x08007cad
 8007ce8:	08007cad 	.word	0x08007cad
 8007cec:	08007cad 	.word	0x08007cad
 8007cf0:	08007e2f 	.word	0x08007e2f
 8007cf4:	08007d5b 	.word	0x08007d5b
 8007cf8:	08007de9 	.word	0x08007de9
 8007cfc:	08007cad 	.word	0x08007cad
 8007d00:	08007cad 	.word	0x08007cad
 8007d04:	08007e51 	.word	0x08007e51
 8007d08:	08007cad 	.word	0x08007cad
 8007d0c:	08007d5b 	.word	0x08007d5b
 8007d10:	08007cad 	.word	0x08007cad
 8007d14:	08007cad 	.word	0x08007cad
 8007d18:	08007df1 	.word	0x08007df1
 8007d1c:	6833      	ldr	r3, [r6, #0]
 8007d1e:	1d1a      	adds	r2, r3, #4
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	6032      	str	r2, [r6, #0]
 8007d24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e09c      	b.n	8007e6a <_printf_i+0x1e6>
 8007d30:	6833      	ldr	r3, [r6, #0]
 8007d32:	6820      	ldr	r0, [r4, #0]
 8007d34:	1d19      	adds	r1, r3, #4
 8007d36:	6031      	str	r1, [r6, #0]
 8007d38:	0606      	lsls	r6, r0, #24
 8007d3a:	d501      	bpl.n	8007d40 <_printf_i+0xbc>
 8007d3c:	681d      	ldr	r5, [r3, #0]
 8007d3e:	e003      	b.n	8007d48 <_printf_i+0xc4>
 8007d40:	0645      	lsls	r5, r0, #25
 8007d42:	d5fb      	bpl.n	8007d3c <_printf_i+0xb8>
 8007d44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007d48:	2d00      	cmp	r5, #0
 8007d4a:	da03      	bge.n	8007d54 <_printf_i+0xd0>
 8007d4c:	232d      	movs	r3, #45	@ 0x2d
 8007d4e:	426d      	negs	r5, r5
 8007d50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d54:	4858      	ldr	r0, [pc, #352]	@ (8007eb8 <_printf_i+0x234>)
 8007d56:	230a      	movs	r3, #10
 8007d58:	e011      	b.n	8007d7e <_printf_i+0xfa>
 8007d5a:	6821      	ldr	r1, [r4, #0]
 8007d5c:	6833      	ldr	r3, [r6, #0]
 8007d5e:	0608      	lsls	r0, r1, #24
 8007d60:	f853 5b04 	ldr.w	r5, [r3], #4
 8007d64:	d402      	bmi.n	8007d6c <_printf_i+0xe8>
 8007d66:	0649      	lsls	r1, r1, #25
 8007d68:	bf48      	it	mi
 8007d6a:	b2ad      	uxthmi	r5, r5
 8007d6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007d6e:	4852      	ldr	r0, [pc, #328]	@ (8007eb8 <_printf_i+0x234>)
 8007d70:	6033      	str	r3, [r6, #0]
 8007d72:	bf14      	ite	ne
 8007d74:	230a      	movne	r3, #10
 8007d76:	2308      	moveq	r3, #8
 8007d78:	2100      	movs	r1, #0
 8007d7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007d7e:	6866      	ldr	r6, [r4, #4]
 8007d80:	60a6      	str	r6, [r4, #8]
 8007d82:	2e00      	cmp	r6, #0
 8007d84:	db05      	blt.n	8007d92 <_printf_i+0x10e>
 8007d86:	6821      	ldr	r1, [r4, #0]
 8007d88:	432e      	orrs	r6, r5
 8007d8a:	f021 0104 	bic.w	r1, r1, #4
 8007d8e:	6021      	str	r1, [r4, #0]
 8007d90:	d04b      	beq.n	8007e2a <_printf_i+0x1a6>
 8007d92:	4616      	mov	r6, r2
 8007d94:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d98:	fb03 5711 	mls	r7, r3, r1, r5
 8007d9c:	5dc7      	ldrb	r7, [r0, r7]
 8007d9e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007da2:	462f      	mov	r7, r5
 8007da4:	42bb      	cmp	r3, r7
 8007da6:	460d      	mov	r5, r1
 8007da8:	d9f4      	bls.n	8007d94 <_printf_i+0x110>
 8007daa:	2b08      	cmp	r3, #8
 8007dac:	d10b      	bne.n	8007dc6 <_printf_i+0x142>
 8007dae:	6823      	ldr	r3, [r4, #0]
 8007db0:	07df      	lsls	r7, r3, #31
 8007db2:	d508      	bpl.n	8007dc6 <_printf_i+0x142>
 8007db4:	6923      	ldr	r3, [r4, #16]
 8007db6:	6861      	ldr	r1, [r4, #4]
 8007db8:	4299      	cmp	r1, r3
 8007dba:	bfde      	ittt	le
 8007dbc:	2330      	movle	r3, #48	@ 0x30
 8007dbe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007dc2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007dc6:	1b92      	subs	r2, r2, r6
 8007dc8:	6122      	str	r2, [r4, #16]
 8007dca:	f8cd a000 	str.w	sl, [sp]
 8007dce:	464b      	mov	r3, r9
 8007dd0:	aa03      	add	r2, sp, #12
 8007dd2:	4621      	mov	r1, r4
 8007dd4:	4640      	mov	r0, r8
 8007dd6:	f7ff fee7 	bl	8007ba8 <_printf_common>
 8007dda:	3001      	adds	r0, #1
 8007ddc:	d14a      	bne.n	8007e74 <_printf_i+0x1f0>
 8007dde:	f04f 30ff 	mov.w	r0, #4294967295
 8007de2:	b004      	add	sp, #16
 8007de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007de8:	6823      	ldr	r3, [r4, #0]
 8007dea:	f043 0320 	orr.w	r3, r3, #32
 8007dee:	6023      	str	r3, [r4, #0]
 8007df0:	4832      	ldr	r0, [pc, #200]	@ (8007ebc <_printf_i+0x238>)
 8007df2:	2778      	movs	r7, #120	@ 0x78
 8007df4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007df8:	6823      	ldr	r3, [r4, #0]
 8007dfa:	6831      	ldr	r1, [r6, #0]
 8007dfc:	061f      	lsls	r7, r3, #24
 8007dfe:	f851 5b04 	ldr.w	r5, [r1], #4
 8007e02:	d402      	bmi.n	8007e0a <_printf_i+0x186>
 8007e04:	065f      	lsls	r7, r3, #25
 8007e06:	bf48      	it	mi
 8007e08:	b2ad      	uxthmi	r5, r5
 8007e0a:	6031      	str	r1, [r6, #0]
 8007e0c:	07d9      	lsls	r1, r3, #31
 8007e0e:	bf44      	itt	mi
 8007e10:	f043 0320 	orrmi.w	r3, r3, #32
 8007e14:	6023      	strmi	r3, [r4, #0]
 8007e16:	b11d      	cbz	r5, 8007e20 <_printf_i+0x19c>
 8007e18:	2310      	movs	r3, #16
 8007e1a:	e7ad      	b.n	8007d78 <_printf_i+0xf4>
 8007e1c:	4826      	ldr	r0, [pc, #152]	@ (8007eb8 <_printf_i+0x234>)
 8007e1e:	e7e9      	b.n	8007df4 <_printf_i+0x170>
 8007e20:	6823      	ldr	r3, [r4, #0]
 8007e22:	f023 0320 	bic.w	r3, r3, #32
 8007e26:	6023      	str	r3, [r4, #0]
 8007e28:	e7f6      	b.n	8007e18 <_printf_i+0x194>
 8007e2a:	4616      	mov	r6, r2
 8007e2c:	e7bd      	b.n	8007daa <_printf_i+0x126>
 8007e2e:	6833      	ldr	r3, [r6, #0]
 8007e30:	6825      	ldr	r5, [r4, #0]
 8007e32:	6961      	ldr	r1, [r4, #20]
 8007e34:	1d18      	adds	r0, r3, #4
 8007e36:	6030      	str	r0, [r6, #0]
 8007e38:	062e      	lsls	r6, r5, #24
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	d501      	bpl.n	8007e42 <_printf_i+0x1be>
 8007e3e:	6019      	str	r1, [r3, #0]
 8007e40:	e002      	b.n	8007e48 <_printf_i+0x1c4>
 8007e42:	0668      	lsls	r0, r5, #25
 8007e44:	d5fb      	bpl.n	8007e3e <_printf_i+0x1ba>
 8007e46:	8019      	strh	r1, [r3, #0]
 8007e48:	2300      	movs	r3, #0
 8007e4a:	6123      	str	r3, [r4, #16]
 8007e4c:	4616      	mov	r6, r2
 8007e4e:	e7bc      	b.n	8007dca <_printf_i+0x146>
 8007e50:	6833      	ldr	r3, [r6, #0]
 8007e52:	1d1a      	adds	r2, r3, #4
 8007e54:	6032      	str	r2, [r6, #0]
 8007e56:	681e      	ldr	r6, [r3, #0]
 8007e58:	6862      	ldr	r2, [r4, #4]
 8007e5a:	2100      	movs	r1, #0
 8007e5c:	4630      	mov	r0, r6
 8007e5e:	f7f8 f9bf 	bl	80001e0 <memchr>
 8007e62:	b108      	cbz	r0, 8007e68 <_printf_i+0x1e4>
 8007e64:	1b80      	subs	r0, r0, r6
 8007e66:	6060      	str	r0, [r4, #4]
 8007e68:	6863      	ldr	r3, [r4, #4]
 8007e6a:	6123      	str	r3, [r4, #16]
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e72:	e7aa      	b.n	8007dca <_printf_i+0x146>
 8007e74:	6923      	ldr	r3, [r4, #16]
 8007e76:	4632      	mov	r2, r6
 8007e78:	4649      	mov	r1, r9
 8007e7a:	4640      	mov	r0, r8
 8007e7c:	47d0      	blx	sl
 8007e7e:	3001      	adds	r0, #1
 8007e80:	d0ad      	beq.n	8007dde <_printf_i+0x15a>
 8007e82:	6823      	ldr	r3, [r4, #0]
 8007e84:	079b      	lsls	r3, r3, #30
 8007e86:	d413      	bmi.n	8007eb0 <_printf_i+0x22c>
 8007e88:	68e0      	ldr	r0, [r4, #12]
 8007e8a:	9b03      	ldr	r3, [sp, #12]
 8007e8c:	4298      	cmp	r0, r3
 8007e8e:	bfb8      	it	lt
 8007e90:	4618      	movlt	r0, r3
 8007e92:	e7a6      	b.n	8007de2 <_printf_i+0x15e>
 8007e94:	2301      	movs	r3, #1
 8007e96:	4632      	mov	r2, r6
 8007e98:	4649      	mov	r1, r9
 8007e9a:	4640      	mov	r0, r8
 8007e9c:	47d0      	blx	sl
 8007e9e:	3001      	adds	r0, #1
 8007ea0:	d09d      	beq.n	8007dde <_printf_i+0x15a>
 8007ea2:	3501      	adds	r5, #1
 8007ea4:	68e3      	ldr	r3, [r4, #12]
 8007ea6:	9903      	ldr	r1, [sp, #12]
 8007ea8:	1a5b      	subs	r3, r3, r1
 8007eaa:	42ab      	cmp	r3, r5
 8007eac:	dcf2      	bgt.n	8007e94 <_printf_i+0x210>
 8007eae:	e7eb      	b.n	8007e88 <_printf_i+0x204>
 8007eb0:	2500      	movs	r5, #0
 8007eb2:	f104 0619 	add.w	r6, r4, #25
 8007eb6:	e7f5      	b.n	8007ea4 <_printf_i+0x220>
 8007eb8:	0801db7d 	.word	0x0801db7d
 8007ebc:	0801db8e 	.word	0x0801db8e

08007ec0 <__sflush_r>:
 8007ec0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ec8:	0716      	lsls	r6, r2, #28
 8007eca:	4605      	mov	r5, r0
 8007ecc:	460c      	mov	r4, r1
 8007ece:	d454      	bmi.n	8007f7a <__sflush_r+0xba>
 8007ed0:	684b      	ldr	r3, [r1, #4]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	dc02      	bgt.n	8007edc <__sflush_r+0x1c>
 8007ed6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	dd48      	ble.n	8007f6e <__sflush_r+0xae>
 8007edc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ede:	2e00      	cmp	r6, #0
 8007ee0:	d045      	beq.n	8007f6e <__sflush_r+0xae>
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007ee8:	682f      	ldr	r7, [r5, #0]
 8007eea:	6a21      	ldr	r1, [r4, #32]
 8007eec:	602b      	str	r3, [r5, #0]
 8007eee:	d030      	beq.n	8007f52 <__sflush_r+0x92>
 8007ef0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007ef2:	89a3      	ldrh	r3, [r4, #12]
 8007ef4:	0759      	lsls	r1, r3, #29
 8007ef6:	d505      	bpl.n	8007f04 <__sflush_r+0x44>
 8007ef8:	6863      	ldr	r3, [r4, #4]
 8007efa:	1ad2      	subs	r2, r2, r3
 8007efc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007efe:	b10b      	cbz	r3, 8007f04 <__sflush_r+0x44>
 8007f00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007f02:	1ad2      	subs	r2, r2, r3
 8007f04:	2300      	movs	r3, #0
 8007f06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f08:	6a21      	ldr	r1, [r4, #32]
 8007f0a:	4628      	mov	r0, r5
 8007f0c:	47b0      	blx	r6
 8007f0e:	1c43      	adds	r3, r0, #1
 8007f10:	89a3      	ldrh	r3, [r4, #12]
 8007f12:	d106      	bne.n	8007f22 <__sflush_r+0x62>
 8007f14:	6829      	ldr	r1, [r5, #0]
 8007f16:	291d      	cmp	r1, #29
 8007f18:	d82b      	bhi.n	8007f72 <__sflush_r+0xb2>
 8007f1a:	4a2a      	ldr	r2, [pc, #168]	@ (8007fc4 <__sflush_r+0x104>)
 8007f1c:	40ca      	lsrs	r2, r1
 8007f1e:	07d6      	lsls	r6, r2, #31
 8007f20:	d527      	bpl.n	8007f72 <__sflush_r+0xb2>
 8007f22:	2200      	movs	r2, #0
 8007f24:	6062      	str	r2, [r4, #4]
 8007f26:	04d9      	lsls	r1, r3, #19
 8007f28:	6922      	ldr	r2, [r4, #16]
 8007f2a:	6022      	str	r2, [r4, #0]
 8007f2c:	d504      	bpl.n	8007f38 <__sflush_r+0x78>
 8007f2e:	1c42      	adds	r2, r0, #1
 8007f30:	d101      	bne.n	8007f36 <__sflush_r+0x76>
 8007f32:	682b      	ldr	r3, [r5, #0]
 8007f34:	b903      	cbnz	r3, 8007f38 <__sflush_r+0x78>
 8007f36:	6560      	str	r0, [r4, #84]	@ 0x54
 8007f38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f3a:	602f      	str	r7, [r5, #0]
 8007f3c:	b1b9      	cbz	r1, 8007f6e <__sflush_r+0xae>
 8007f3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f42:	4299      	cmp	r1, r3
 8007f44:	d002      	beq.n	8007f4c <__sflush_r+0x8c>
 8007f46:	4628      	mov	r0, r5
 8007f48:	f7ff fbf4 	bl	8007734 <_free_r>
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f50:	e00d      	b.n	8007f6e <__sflush_r+0xae>
 8007f52:	2301      	movs	r3, #1
 8007f54:	4628      	mov	r0, r5
 8007f56:	47b0      	blx	r6
 8007f58:	4602      	mov	r2, r0
 8007f5a:	1c50      	adds	r0, r2, #1
 8007f5c:	d1c9      	bne.n	8007ef2 <__sflush_r+0x32>
 8007f5e:	682b      	ldr	r3, [r5, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d0c6      	beq.n	8007ef2 <__sflush_r+0x32>
 8007f64:	2b1d      	cmp	r3, #29
 8007f66:	d001      	beq.n	8007f6c <__sflush_r+0xac>
 8007f68:	2b16      	cmp	r3, #22
 8007f6a:	d11e      	bne.n	8007faa <__sflush_r+0xea>
 8007f6c:	602f      	str	r7, [r5, #0]
 8007f6e:	2000      	movs	r0, #0
 8007f70:	e022      	b.n	8007fb8 <__sflush_r+0xf8>
 8007f72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f76:	b21b      	sxth	r3, r3
 8007f78:	e01b      	b.n	8007fb2 <__sflush_r+0xf2>
 8007f7a:	690f      	ldr	r7, [r1, #16]
 8007f7c:	2f00      	cmp	r7, #0
 8007f7e:	d0f6      	beq.n	8007f6e <__sflush_r+0xae>
 8007f80:	0793      	lsls	r3, r2, #30
 8007f82:	680e      	ldr	r6, [r1, #0]
 8007f84:	bf08      	it	eq
 8007f86:	694b      	ldreq	r3, [r1, #20]
 8007f88:	600f      	str	r7, [r1, #0]
 8007f8a:	bf18      	it	ne
 8007f8c:	2300      	movne	r3, #0
 8007f8e:	eba6 0807 	sub.w	r8, r6, r7
 8007f92:	608b      	str	r3, [r1, #8]
 8007f94:	f1b8 0f00 	cmp.w	r8, #0
 8007f98:	dde9      	ble.n	8007f6e <__sflush_r+0xae>
 8007f9a:	6a21      	ldr	r1, [r4, #32]
 8007f9c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007f9e:	4643      	mov	r3, r8
 8007fa0:	463a      	mov	r2, r7
 8007fa2:	4628      	mov	r0, r5
 8007fa4:	47b0      	blx	r6
 8007fa6:	2800      	cmp	r0, #0
 8007fa8:	dc08      	bgt.n	8007fbc <__sflush_r+0xfc>
 8007faa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fb2:	81a3      	strh	r3, [r4, #12]
 8007fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fbc:	4407      	add	r7, r0
 8007fbe:	eba8 0800 	sub.w	r8, r8, r0
 8007fc2:	e7e7      	b.n	8007f94 <__sflush_r+0xd4>
 8007fc4:	20400001 	.word	0x20400001

08007fc8 <_fflush_r>:
 8007fc8:	b538      	push	{r3, r4, r5, lr}
 8007fca:	690b      	ldr	r3, [r1, #16]
 8007fcc:	4605      	mov	r5, r0
 8007fce:	460c      	mov	r4, r1
 8007fd0:	b913      	cbnz	r3, 8007fd8 <_fflush_r+0x10>
 8007fd2:	2500      	movs	r5, #0
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	bd38      	pop	{r3, r4, r5, pc}
 8007fd8:	b118      	cbz	r0, 8007fe2 <_fflush_r+0x1a>
 8007fda:	6a03      	ldr	r3, [r0, #32]
 8007fdc:	b90b      	cbnz	r3, 8007fe2 <_fflush_r+0x1a>
 8007fde:	f7ff f999 	bl	8007314 <__sinit>
 8007fe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d0f3      	beq.n	8007fd2 <_fflush_r+0xa>
 8007fea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007fec:	07d0      	lsls	r0, r2, #31
 8007fee:	d404      	bmi.n	8007ffa <_fflush_r+0x32>
 8007ff0:	0599      	lsls	r1, r3, #22
 8007ff2:	d402      	bmi.n	8007ffa <_fflush_r+0x32>
 8007ff4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ff6:	f7ff fb8c 	bl	8007712 <__retarget_lock_acquire_recursive>
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	4621      	mov	r1, r4
 8007ffe:	f7ff ff5f 	bl	8007ec0 <__sflush_r>
 8008002:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008004:	07da      	lsls	r2, r3, #31
 8008006:	4605      	mov	r5, r0
 8008008:	d4e4      	bmi.n	8007fd4 <_fflush_r+0xc>
 800800a:	89a3      	ldrh	r3, [r4, #12]
 800800c:	059b      	lsls	r3, r3, #22
 800800e:	d4e1      	bmi.n	8007fd4 <_fflush_r+0xc>
 8008010:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008012:	f7ff fb7f 	bl	8007714 <__retarget_lock_release_recursive>
 8008016:	e7dd      	b.n	8007fd4 <_fflush_r+0xc>

08008018 <__swhatbuf_r>:
 8008018:	b570      	push	{r4, r5, r6, lr}
 800801a:	460c      	mov	r4, r1
 800801c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008020:	2900      	cmp	r1, #0
 8008022:	b096      	sub	sp, #88	@ 0x58
 8008024:	4615      	mov	r5, r2
 8008026:	461e      	mov	r6, r3
 8008028:	da0d      	bge.n	8008046 <__swhatbuf_r+0x2e>
 800802a:	89a3      	ldrh	r3, [r4, #12]
 800802c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008030:	f04f 0100 	mov.w	r1, #0
 8008034:	bf14      	ite	ne
 8008036:	2340      	movne	r3, #64	@ 0x40
 8008038:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800803c:	2000      	movs	r0, #0
 800803e:	6031      	str	r1, [r6, #0]
 8008040:	602b      	str	r3, [r5, #0]
 8008042:	b016      	add	sp, #88	@ 0x58
 8008044:	bd70      	pop	{r4, r5, r6, pc}
 8008046:	466a      	mov	r2, sp
 8008048:	f000 f87c 	bl	8008144 <_fstat_r>
 800804c:	2800      	cmp	r0, #0
 800804e:	dbec      	blt.n	800802a <__swhatbuf_r+0x12>
 8008050:	9901      	ldr	r1, [sp, #4]
 8008052:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008056:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800805a:	4259      	negs	r1, r3
 800805c:	4159      	adcs	r1, r3
 800805e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008062:	e7eb      	b.n	800803c <__swhatbuf_r+0x24>

08008064 <__smakebuf_r>:
 8008064:	898b      	ldrh	r3, [r1, #12]
 8008066:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008068:	079d      	lsls	r5, r3, #30
 800806a:	4606      	mov	r6, r0
 800806c:	460c      	mov	r4, r1
 800806e:	d507      	bpl.n	8008080 <__smakebuf_r+0x1c>
 8008070:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008074:	6023      	str	r3, [r4, #0]
 8008076:	6123      	str	r3, [r4, #16]
 8008078:	2301      	movs	r3, #1
 800807a:	6163      	str	r3, [r4, #20]
 800807c:	b003      	add	sp, #12
 800807e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008080:	ab01      	add	r3, sp, #4
 8008082:	466a      	mov	r2, sp
 8008084:	f7ff ffc8 	bl	8008018 <__swhatbuf_r>
 8008088:	9f00      	ldr	r7, [sp, #0]
 800808a:	4605      	mov	r5, r0
 800808c:	4639      	mov	r1, r7
 800808e:	4630      	mov	r0, r6
 8008090:	f7ff fbbc 	bl	800780c <_malloc_r>
 8008094:	b948      	cbnz	r0, 80080aa <__smakebuf_r+0x46>
 8008096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800809a:	059a      	lsls	r2, r3, #22
 800809c:	d4ee      	bmi.n	800807c <__smakebuf_r+0x18>
 800809e:	f023 0303 	bic.w	r3, r3, #3
 80080a2:	f043 0302 	orr.w	r3, r3, #2
 80080a6:	81a3      	strh	r3, [r4, #12]
 80080a8:	e7e2      	b.n	8008070 <__smakebuf_r+0xc>
 80080aa:	89a3      	ldrh	r3, [r4, #12]
 80080ac:	6020      	str	r0, [r4, #0]
 80080ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080b2:	81a3      	strh	r3, [r4, #12]
 80080b4:	9b01      	ldr	r3, [sp, #4]
 80080b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80080ba:	b15b      	cbz	r3, 80080d4 <__smakebuf_r+0x70>
 80080bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080c0:	4630      	mov	r0, r6
 80080c2:	f000 f851 	bl	8008168 <_isatty_r>
 80080c6:	b128      	cbz	r0, 80080d4 <__smakebuf_r+0x70>
 80080c8:	89a3      	ldrh	r3, [r4, #12]
 80080ca:	f023 0303 	bic.w	r3, r3, #3
 80080ce:	f043 0301 	orr.w	r3, r3, #1
 80080d2:	81a3      	strh	r3, [r4, #12]
 80080d4:	89a3      	ldrh	r3, [r4, #12]
 80080d6:	431d      	orrs	r5, r3
 80080d8:	81a5      	strh	r5, [r4, #12]
 80080da:	e7cf      	b.n	800807c <__smakebuf_r+0x18>

080080dc <_putc_r>:
 80080dc:	b570      	push	{r4, r5, r6, lr}
 80080de:	460d      	mov	r5, r1
 80080e0:	4614      	mov	r4, r2
 80080e2:	4606      	mov	r6, r0
 80080e4:	b118      	cbz	r0, 80080ee <_putc_r+0x12>
 80080e6:	6a03      	ldr	r3, [r0, #32]
 80080e8:	b90b      	cbnz	r3, 80080ee <_putc_r+0x12>
 80080ea:	f7ff f913 	bl	8007314 <__sinit>
 80080ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80080f0:	07d8      	lsls	r0, r3, #31
 80080f2:	d405      	bmi.n	8008100 <_putc_r+0x24>
 80080f4:	89a3      	ldrh	r3, [r4, #12]
 80080f6:	0599      	lsls	r1, r3, #22
 80080f8:	d402      	bmi.n	8008100 <_putc_r+0x24>
 80080fa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080fc:	f7ff fb09 	bl	8007712 <__retarget_lock_acquire_recursive>
 8008100:	68a3      	ldr	r3, [r4, #8]
 8008102:	3b01      	subs	r3, #1
 8008104:	2b00      	cmp	r3, #0
 8008106:	60a3      	str	r3, [r4, #8]
 8008108:	da05      	bge.n	8008116 <_putc_r+0x3a>
 800810a:	69a2      	ldr	r2, [r4, #24]
 800810c:	4293      	cmp	r3, r2
 800810e:	db12      	blt.n	8008136 <_putc_r+0x5a>
 8008110:	b2eb      	uxtb	r3, r5
 8008112:	2b0a      	cmp	r3, #10
 8008114:	d00f      	beq.n	8008136 <_putc_r+0x5a>
 8008116:	6823      	ldr	r3, [r4, #0]
 8008118:	1c5a      	adds	r2, r3, #1
 800811a:	6022      	str	r2, [r4, #0]
 800811c:	701d      	strb	r5, [r3, #0]
 800811e:	b2ed      	uxtb	r5, r5
 8008120:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008122:	07da      	lsls	r2, r3, #31
 8008124:	d405      	bmi.n	8008132 <_putc_r+0x56>
 8008126:	89a3      	ldrh	r3, [r4, #12]
 8008128:	059b      	lsls	r3, r3, #22
 800812a:	d402      	bmi.n	8008132 <_putc_r+0x56>
 800812c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800812e:	f7ff faf1 	bl	8007714 <__retarget_lock_release_recursive>
 8008132:	4628      	mov	r0, r5
 8008134:	bd70      	pop	{r4, r5, r6, pc}
 8008136:	4629      	mov	r1, r5
 8008138:	4622      	mov	r2, r4
 800813a:	4630      	mov	r0, r6
 800813c:	f7ff f9db 	bl	80074f6 <__swbuf_r>
 8008140:	4605      	mov	r5, r0
 8008142:	e7ed      	b.n	8008120 <_putc_r+0x44>

08008144 <_fstat_r>:
 8008144:	b538      	push	{r3, r4, r5, lr}
 8008146:	4d07      	ldr	r5, [pc, #28]	@ (8008164 <_fstat_r+0x20>)
 8008148:	2300      	movs	r3, #0
 800814a:	4604      	mov	r4, r0
 800814c:	4608      	mov	r0, r1
 800814e:	4611      	mov	r1, r2
 8008150:	602b      	str	r3, [r5, #0]
 8008152:	f7f9 f8b0 	bl	80012b6 <_fstat>
 8008156:	1c43      	adds	r3, r0, #1
 8008158:	d102      	bne.n	8008160 <_fstat_r+0x1c>
 800815a:	682b      	ldr	r3, [r5, #0]
 800815c:	b103      	cbz	r3, 8008160 <_fstat_r+0x1c>
 800815e:	6023      	str	r3, [r4, #0]
 8008160:	bd38      	pop	{r3, r4, r5, pc}
 8008162:	bf00      	nop
 8008164:	200030e8 	.word	0x200030e8

08008168 <_isatty_r>:
 8008168:	b538      	push	{r3, r4, r5, lr}
 800816a:	4d06      	ldr	r5, [pc, #24]	@ (8008184 <_isatty_r+0x1c>)
 800816c:	2300      	movs	r3, #0
 800816e:	4604      	mov	r4, r0
 8008170:	4608      	mov	r0, r1
 8008172:	602b      	str	r3, [r5, #0]
 8008174:	f7f9 f8af 	bl	80012d6 <_isatty>
 8008178:	1c43      	adds	r3, r0, #1
 800817a:	d102      	bne.n	8008182 <_isatty_r+0x1a>
 800817c:	682b      	ldr	r3, [r5, #0]
 800817e:	b103      	cbz	r3, 8008182 <_isatty_r+0x1a>
 8008180:	6023      	str	r3, [r4, #0]
 8008182:	bd38      	pop	{r3, r4, r5, pc}
 8008184:	200030e8 	.word	0x200030e8

08008188 <_sbrk_r>:
 8008188:	b538      	push	{r3, r4, r5, lr}
 800818a:	4d06      	ldr	r5, [pc, #24]	@ (80081a4 <_sbrk_r+0x1c>)
 800818c:	2300      	movs	r3, #0
 800818e:	4604      	mov	r4, r0
 8008190:	4608      	mov	r0, r1
 8008192:	602b      	str	r3, [r5, #0]
 8008194:	f7f9 f8b8 	bl	8001308 <_sbrk>
 8008198:	1c43      	adds	r3, r0, #1
 800819a:	d102      	bne.n	80081a2 <_sbrk_r+0x1a>
 800819c:	682b      	ldr	r3, [r5, #0]
 800819e:	b103      	cbz	r3, 80081a2 <_sbrk_r+0x1a>
 80081a0:	6023      	str	r3, [r4, #0]
 80081a2:	bd38      	pop	{r3, r4, r5, pc}
 80081a4:	200030e8 	.word	0x200030e8

080081a8 <_init>:
 80081a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081aa:	bf00      	nop
 80081ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ae:	bc08      	pop	{r3}
 80081b0:	469e      	mov	lr, r3
 80081b2:	4770      	bx	lr

080081b4 <_fini>:
 80081b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081b6:	bf00      	nop
 80081b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ba:	bc08      	pop	{r3}
 80081bc:	469e      	mov	lr, r3
 80081be:	4770      	bx	lr
