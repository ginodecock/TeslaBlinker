
TeslaBlinker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e5c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015b04  08007ffc  08007ffc  00008ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801db00  0801db00  0001f0a8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801db00  0801db00  0001eb00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801db08  0801db08  0001f0a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801db08  0801db08  0001eb08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801db0c  0801db0c  0001eb0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a8  20000000  0801db10  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003054  200000a8  0801dbb8  0001f0a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  200030fc  0801dbb8  0001f0fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001f0a8  2**0
                  CONTENTS, READONLY
 12 .debug_line   00012b2f  00000000  00000000  0001f0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000063  00000000  00000000  00031c07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000eff3  00000000  00000000  00031c6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000294b  00000000  00000000  00040c5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000db0  00000000  00000000  000435a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008d928  00000000  00000000  00044358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000a7d  00000000  00000000  000d1c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000184c9  00000000  00000000  000d26fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000eabc6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ebc  00000000  00000000  000eac0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a8 	.word	0x200000a8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007fe4 	.word	0x08007fe4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000ac 	.word	0x200000ac
 80001dc:	08007fe4 	.word	0x08007fe4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80005ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80005b0:	f004 f858 	bl	8004664 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80005b4:	480c      	ldr	r0, [pc, #48]	@ (80005e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80005b6:	490d      	ldr	r1, [pc, #52]	@ (80005ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80005b8:	4a0d      	ldr	r2, [pc, #52]	@ (80005f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80005ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005bc:	e002      	b.n	80005c4 <LoopCopyDataInit>

080005be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c2:	3304      	adds	r3, #4

080005c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c8:	d3f9      	bcc.n	80005be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ca:	4a0a      	ldr	r2, [pc, #40]	@ (80005f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80005cc:	4c0a      	ldr	r4, [pc, #40]	@ (80005f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80005ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d0:	e001      	b.n	80005d6 <LoopFillZerobss>

080005d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d4:	3204      	adds	r2, #4

080005d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d8:	d3fb      	bcc.n	80005d2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80005da:	f006 ff33 	bl	8007444 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005de:	f000 fa31 	bl	8000a44 <main>
  bx  lr    
 80005e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80005e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80005e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005ec:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 80005f0:	0801db10 	.word	0x0801db10
  ldr r2, =_sbss
 80005f4:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 80005f8:	200030fc 	.word	0x200030fc

080005fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005fc:	e7fe      	b.n	80005fc <ADC_IRQHandler>
	...

08000600 <send_gpio_pulses>:
static uint8_t entry_row = 255;
static uint8_t last_row = 255;
static GestureType detected_direction = GESTURE_NONE;
static uint8_t gesture_reported = 0;

static void send_gpio_pulses(uint8_t count) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < count; i++) {
 800060a:	2300      	movs	r3, #0
 800060c:	73fb      	strb	r3, [r7, #15]
 800060e:	e012      	b.n	8000636 <send_gpio_pulses+0x36>
    HAL_GPIO_WritePin(GPIO_PULSE_PORT, GPIO_PULSE_PIN, GPIO_PIN_SET);
 8000610:	2201      	movs	r2, #1
 8000612:	2120      	movs	r1, #32
 8000614:	480c      	ldr	r0, [pc, #48]	@ (8000648 <send_gpio_pulses+0x48>)
 8000616:	f004 fc47 	bl	8004ea8 <HAL_GPIO_WritePin>
    HAL_Delay(PULSE_DELAY_MS);
 800061a:	2064      	movs	r0, #100	@ 0x64
 800061c:	f004 f8a6 	bl	800476c <HAL_Delay>
    HAL_GPIO_WritePin(GPIO_PULSE_PORT, GPIO_PULSE_PIN, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	2120      	movs	r1, #32
 8000624:	4808      	ldr	r0, [pc, #32]	@ (8000648 <send_gpio_pulses+0x48>)
 8000626:	f004 fc3f 	bl	8004ea8 <HAL_GPIO_WritePin>
    HAL_Delay(PULSE_DELAY_MS);
 800062a:	2064      	movs	r0, #100	@ 0x64
 800062c:	f004 f89e 	bl	800476c <HAL_Delay>
  for (uint8_t i = 0; i < count; i++) {
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	3301      	adds	r3, #1
 8000634:	73fb      	strb	r3, [r7, #15]
 8000636:	7bfa      	ldrb	r2, [r7, #15]
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	429a      	cmp	r2, r3
 800063c:	d3e8      	bcc.n	8000610 <send_gpio_pulses+0x10>
  }
}
 800063e:	bf00      	nop
 8000640:	bf00      	nop
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40020000 	.word	0x40020000

0800064c <detect_gesture>:

static GestureType detect_gesture(RANGING_SENSOR_Result_t *Result) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
    uint8_t zones_per_line = 8;
 8000654:	2308      	movs	r3, #8
 8000656:	753b      	strb	r3, [r7, #20]
    uint8_t active_row = 255;
 8000658:	23ff      	movs	r3, #255	@ 0xff
 800065a:	75fb      	strb	r3, [r7, #23]
    uint8_t in_range = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	75bb      	strb	r3, [r7, #22]

    // Find first zone within gesture start distance
    for (uint8_t zone = 0; zone < Result->NumberOfZones; zone++) {
 8000660:	2300      	movs	r3, #0
 8000662:	757b      	strb	r3, [r7, #21]
 8000664:	e020      	b.n	80006a8 <detect_gesture+0x5c>
        if (Result->ZoneResult[zone].NumberOfTargets > 0 &&
 8000666:	7d7a      	ldrb	r2, [r7, #21]
 8000668:	6879      	ldr	r1, [r7, #4]
 800066a:	4613      	mov	r3, r2
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	4413      	add	r3, r2
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	440b      	add	r3, r1
 8000674:	3304      	adds	r3, #4
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d012      	beq.n	80006a2 <detect_gesture+0x56>
                Result->ZoneResult[zone].Distance[0] <= GESTURE_START_DISTANCE_MM) {
 800067c:	7d7a      	ldrb	r2, [r7, #21]
 800067e:	6879      	ldr	r1, [r7, #4]
 8000680:	4613      	mov	r3, r2
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	4413      	add	r3, r2
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	440b      	add	r3, r1
 800068a:	3308      	adds	r3, #8
 800068c:	681b      	ldr	r3, [r3, #0]
        if (Result->ZoneResult[zone].NumberOfTargets > 0 &&
 800068e:	2bbe      	cmp	r3, #190	@ 0xbe
 8000690:	d807      	bhi.n	80006a2 <detect_gesture+0x56>
            active_row = zone / zones_per_line;
 8000692:	7d7a      	ldrb	r2, [r7, #21]
 8000694:	7d3b      	ldrb	r3, [r7, #20]
 8000696:	fbb2 f3f3 	udiv	r3, r2, r3
 800069a:	75fb      	strb	r3, [r7, #23]
            in_range = 1;
 800069c:	2301      	movs	r3, #1
 800069e:	75bb      	strb	r3, [r7, #22]
            break;
 80006a0:	e007      	b.n	80006b2 <detect_gesture+0x66>
    for (uint8_t zone = 0; zone < Result->NumberOfZones; zone++) {
 80006a2:	7d7b      	ldrb	r3, [r7, #21]
 80006a4:	3301      	adds	r3, #1
 80006a6:	757b      	strb	r3, [r7, #21]
 80006a8:	7d7a      	ldrb	r2, [r7, #21]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	429a      	cmp	r2, r3
 80006b0:	d3d9      	bcc.n	8000666 <detect_gesture+0x1a>
        }
    }

    printf("[Gesture] Active row: %d, In range: %d, State: %d\n\r", active_row, in_range, gesture_state);
 80006b2:	7df9      	ldrb	r1, [r7, #23]
 80006b4:	7dba      	ldrb	r2, [r7, #22]
 80006b6:	4b4e      	ldr	r3, [pc, #312]	@ (80007f0 <detect_gesture+0x1a4>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	484e      	ldr	r0, [pc, #312]	@ (80007f4 <detect_gesture+0x1a8>)
 80006bc:	f006 fe18 	bl	80072f0 <iprintf>

    switch (gesture_state) {
 80006c0:	4b4b      	ldr	r3, [pc, #300]	@ (80007f0 <detect_gesture+0x1a4>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d002      	beq.n	80006ce <detect_gesture+0x82>
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d019      	beq.n	8000700 <detect_gesture+0xb4>
 80006cc:	e086      	b.n	80007dc <detect_gesture+0x190>
    case GESTURE_STATE_WAIT_ENTRY:
        if (in_range) {
 80006ce:	7dbb      	ldrb	r3, [r7, #22]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	f000 8087 	beq.w	80007e4 <detect_gesture+0x198>
            // Hand just entered range: initialize entry and last row
            printf("[Gesture] Hand entered detection range at row %d\n\r", active_row);
 80006d6:	7dfb      	ldrb	r3, [r7, #23]
 80006d8:	4619      	mov	r1, r3
 80006da:	4847      	ldr	r0, [pc, #284]	@ (80007f8 <detect_gesture+0x1ac>)
 80006dc:	f006 fe08 	bl	80072f0 <iprintf>
            entry_row = active_row;
 80006e0:	4a46      	ldr	r2, [pc, #280]	@ (80007fc <detect_gesture+0x1b0>)
 80006e2:	7dfb      	ldrb	r3, [r7, #23]
 80006e4:	7013      	strb	r3, [r2, #0]
            last_row = active_row;
 80006e6:	4a46      	ldr	r2, [pc, #280]	@ (8000800 <detect_gesture+0x1b4>)
 80006e8:	7dfb      	ldrb	r3, [r7, #23]
 80006ea:	7013      	strb	r3, [r2, #0]
            detected_direction = GESTURE_NONE;
 80006ec:	4b45      	ldr	r3, [pc, #276]	@ (8000804 <detect_gesture+0x1b8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	701a      	strb	r2, [r3, #0]
            gesture_reported = 0;  // Reset reported flag on new entry
 80006f2:	4b45      	ldr	r3, [pc, #276]	@ (8000808 <detect_gesture+0x1bc>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	701a      	strb	r2, [r3, #0]
            gesture_state = GESTURE_STATE_TRACK;
 80006f8:	4b3d      	ldr	r3, [pc, #244]	@ (80007f0 <detect_gesture+0x1a4>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	701a      	strb	r2, [r3, #0]
        }
        break;
 80006fe:	e071      	b.n	80007e4 <detect_gesture+0x198>

    case GESTURE_STATE_TRACK:
        if (in_range) {
 8000700:	7dbb      	ldrb	r3, [r7, #22]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d044      	beq.n	8000790 <detect_gesture+0x144>
            if (active_row != 255 && active_row != last_row) {
 8000706:	7dfb      	ldrb	r3, [r7, #23]
 8000708:	2bff      	cmp	r3, #255	@ 0xff
 800070a:	d03d      	beq.n	8000788 <detect_gesture+0x13c>
 800070c:	4b3c      	ldr	r3, [pc, #240]	@ (8000800 <detect_gesture+0x1b4>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	7dfa      	ldrb	r2, [r7, #23]
 8000712:	429a      	cmp	r2, r3
 8000714:	d038      	beq.n	8000788 <detect_gesture+0x13c>
                int row_change = active_row - last_row;
 8000716:	7dfb      	ldrb	r3, [r7, #23]
 8000718:	4a39      	ldr	r2, [pc, #228]	@ (8000800 <detect_gesture+0x1b4>)
 800071a:	7812      	ldrb	r2, [r2, #0]
 800071c:	1a9b      	subs	r3, r3, r2
 800071e:	60fb      	str	r3, [r7, #12]
                int total_change = active_row - entry_row;
 8000720:	7dfb      	ldrb	r3, [r7, #23]
 8000722:	4a36      	ldr	r2, [pc, #216]	@ (80007fc <detect_gesture+0x1b0>)
 8000724:	7812      	ldrb	r2, [r2, #0]
 8000726:	1a9b      	subs	r3, r3, r2
 8000728:	60bb      	str	r3, [r7, #8]

                if (!gesture_reported) {
 800072a:	4b37      	ldr	r3, [pc, #220]	@ (8000808 <detect_gesture+0x1bc>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d125      	bne.n	800077e <detect_gesture+0x132>
                    if (abs(total_change) >= GESTURE_CONSECUTIVE_ZONES) {
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	2b00      	cmp	r3, #0
 8000736:	bfb8      	it	lt
 8000738:	425b      	neglt	r3, r3
 800073a:	2b01      	cmp	r3, #1
 800073c:	dd1f      	ble.n	800077e <detect_gesture+0x132>
                        if (row_change < 0) {
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	2b00      	cmp	r3, #0
 8000742:	da0b      	bge.n	800075c <detect_gesture+0x110>
                            detected_direction = GESTURE_UP;
 8000744:	4b2f      	ldr	r3, [pc, #188]	@ (8000804 <detect_gesture+0x1b8>)
 8000746:	2201      	movs	r2, #1
 8000748:	701a      	strb	r2, [r3, #0]
                            printf("[Gesture] Detected upward movement (from row %d to row %d)\n\r",
 800074a:	4b2d      	ldr	r3, [pc, #180]	@ (8000800 <detect_gesture+0x1b4>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	4619      	mov	r1, r3
 8000750:	7dfb      	ldrb	r3, [r7, #23]
 8000752:	461a      	mov	r2, r3
 8000754:	482d      	ldr	r0, [pc, #180]	@ (800080c <detect_gesture+0x1c0>)
 8000756:	f006 fdcb 	bl	80072f0 <iprintf>
 800075a:	e00d      	b.n	8000778 <detect_gesture+0x12c>
                                last_row, active_row);
                        } else if (row_change > 0) {
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	2b00      	cmp	r3, #0
 8000760:	dd0a      	ble.n	8000778 <detect_gesture+0x12c>
                            detected_direction = GESTURE_DOWN;
 8000762:	4b28      	ldr	r3, [pc, #160]	@ (8000804 <detect_gesture+0x1b8>)
 8000764:	2202      	movs	r2, #2
 8000766:	701a      	strb	r2, [r3, #0]
                            printf("[Gesture] Detected downward movement (from row %d to row %d)\n\r",
 8000768:	4b25      	ldr	r3, [pc, #148]	@ (8000800 <detect_gesture+0x1b4>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	4619      	mov	r1, r3
 800076e:	7dfb      	ldrb	r3, [r7, #23]
 8000770:	461a      	mov	r2, r3
 8000772:	4827      	ldr	r0, [pc, #156]	@ (8000810 <detect_gesture+0x1c4>)
 8000774:	f006 fdbc 	bl	80072f0 <iprintf>
                                last_row, active_row);
                        }

                        gesture_reported = 1; // Lock further detection
 8000778:	4b23      	ldr	r3, [pc, #140]	@ (8000808 <detect_gesture+0x1bc>)
 800077a:	2201      	movs	r2, #1
 800077c:	701a      	strb	r2, [r3, #0]
                    }
                }
                last_row = active_row; // Always update last_row to current row
 800077e:	4a20      	ldr	r2, [pc, #128]	@ (8000800 <detect_gesture+0x1b4>)
 8000780:	7dfb      	ldrb	r3, [r7, #23]
 8000782:	7013      	strb	r3, [r2, #0]
            if (active_row != 255 && active_row != last_row) {
 8000784:	bf00      	nop
                printf("[Gesture] No valid gesture detected before exit\n\r");
                gesture_reported = 0;
                gesture_state = GESTURE_STATE_WAIT_ENTRY;
            }
        }
        break;
 8000786:	e02e      	b.n	80007e6 <detect_gesture+0x19a>
                printf("[Gesture] Hand in range, no significant row change\n\r");
 8000788:	4822      	ldr	r0, [pc, #136]	@ (8000814 <detect_gesture+0x1c8>)
 800078a:	f006 fdb1 	bl	80072f0 <iprintf>
        break;
 800078e:	e02a      	b.n	80007e6 <detect_gesture+0x19a>
            printf("[Gesture] Hand left detection range\n\r");
 8000790:	4821      	ldr	r0, [pc, #132]	@ (8000818 <detect_gesture+0x1cc>)
 8000792:	f006 fdad 	bl	80072f0 <iprintf>
            if (detected_direction != GESTURE_NONE) {
 8000796:	4b1b      	ldr	r3, [pc, #108]	@ (8000804 <detect_gesture+0x1b8>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d014      	beq.n	80007c8 <detect_gesture+0x17c>
                GestureType g = detected_direction;
 800079e:	4b19      	ldr	r3, [pc, #100]	@ (8000804 <detect_gesture+0x1b8>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	74fb      	strb	r3, [r7, #19]
                printf("[Gesture] Gesture completed: %s\n\r",
 80007a4:	7cfb      	ldrb	r3, [r7, #19]
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d101      	bne.n	80007ae <detect_gesture+0x162>
 80007aa:	4b1c      	ldr	r3, [pc, #112]	@ (800081c <detect_gesture+0x1d0>)
 80007ac:	e000      	b.n	80007b0 <detect_gesture+0x164>
 80007ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000820 <detect_gesture+0x1d4>)
 80007b0:	4619      	mov	r1, r3
 80007b2:	481c      	ldr	r0, [pc, #112]	@ (8000824 <detect_gesture+0x1d8>)
 80007b4:	f006 fd9c 	bl	80072f0 <iprintf>
                gesture_reported = 0;
 80007b8:	4b13      	ldr	r3, [pc, #76]	@ (8000808 <detect_gesture+0x1bc>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	701a      	strb	r2, [r3, #0]
                gesture_state = GESTURE_STATE_WAIT_ENTRY;
 80007be:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <detect_gesture+0x1a4>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]
                return g;
 80007c4:	7cfb      	ldrb	r3, [r7, #19]
 80007c6:	e00f      	b.n	80007e8 <detect_gesture+0x19c>
                printf("[Gesture] No valid gesture detected before exit\n\r");
 80007c8:	4817      	ldr	r0, [pc, #92]	@ (8000828 <detect_gesture+0x1dc>)
 80007ca:	f006 fd91 	bl	80072f0 <iprintf>
                gesture_reported = 0;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000808 <detect_gesture+0x1bc>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	701a      	strb	r2, [r3, #0]
                gesture_state = GESTURE_STATE_WAIT_ENTRY;
 80007d4:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <detect_gesture+0x1a4>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	701a      	strb	r2, [r3, #0]
        break;
 80007da:	e004      	b.n	80007e6 <detect_gesture+0x19a>

    default:
        gesture_state = GESTURE_STATE_WAIT_ENTRY;
 80007dc:	4b04      	ldr	r3, [pc, #16]	@ (80007f0 <detect_gesture+0x1a4>)
 80007de:	2200      	movs	r2, #0
 80007e0:	701a      	strb	r2, [r3, #0]
        break;
 80007e2:	e000      	b.n	80007e6 <detect_gesture+0x19a>
        break;
 80007e4:	bf00      	nop
    }

    return GESTURE_NONE;
 80007e6:	2300      	movs	r3, #0
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3718      	adds	r7, #24
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	200005f1 	.word	0x200005f1
 80007f4:	08007ffc 	.word	0x08007ffc
 80007f8:	08008030 	.word	0x08008030
 80007fc:	20000000 	.word	0x20000000
 8000800:	20000001 	.word	0x20000001
 8000804:	200005f2 	.word	0x200005f2
 8000808:	200005f3 	.word	0x200005f3
 800080c:	08008064 	.word	0x08008064
 8000810:	080080a4 	.word	0x080080a4
 8000814:	080080e4 	.word	0x080080e4
 8000818:	0800811c 	.word	0x0800811c
 800081c:	08008144 	.word	0x08008144
 8000820:	08008148 	.word	0x08008148
 8000824:	08008150 	.word	0x08008150
 8000828:	08008174 	.word	0x08008174

0800082c <process_gestures>:


static void process_gestures(RANGING_SENSOR_Result_t *Result) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  GestureType g = detect_gesture(Result);
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f7ff ff09 	bl	800064c <detect_gesture>
 800083a:	4603      	mov	r3, r0
 800083c:	73fb      	strb	r3, [r7, #15]
  if (g == GESTURE_UP) {
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d110      	bne.n	8000866 <process_gestures+0x3a>
	printf("Upward gesture: 2 GPIO pulses for right blinker\n\r");
 8000844:	4813      	ldr	r0, [pc, #76]	@ (8000894 <process_gestures+0x68>)
 8000846:	f006 fd53 	bl	80072f0 <iprintf>
	HAL_GPIO_WritePin(LED1_PORT, LED1_PIN, GPIO_PIN_SET);//BSP_LED_On(LED1);
 800084a:	2201      	movs	r2, #1
 800084c:	2120      	movs	r1, #32
 800084e:	4812      	ldr	r0, [pc, #72]	@ (8000898 <process_gestures+0x6c>)
 8000850:	f004 fb2a 	bl	8004ea8 <HAL_GPIO_WritePin>
    send_gpio_pulses(2); // Right blinker
 8000854:	2002      	movs	r0, #2
 8000856:	f7ff fed3 	bl	8000600 <send_gpio_pulses>
    HAL_GPIO_WritePin(LED1_PORT, LED1_PIN, GPIO_PIN_RESET);//BSP_LED_Off(LED1);
 800085a:	2200      	movs	r2, #0
 800085c:	2120      	movs	r1, #32
 800085e:	480e      	ldr	r0, [pc, #56]	@ (8000898 <process_gestures+0x6c>)
 8000860:	f004 fb22 	bl	8004ea8 <HAL_GPIO_WritePin>
	printf("Downward gesture: 1 GPIO pulse for left blinker\n\r");
	HAL_GPIO_WritePin(LED1_PORT, LED1_PIN, GPIO_PIN_SET);//BSP_LED_On(LED1);
    send_gpio_pulses(1); // Left blinker
    HAL_GPIO_WritePin(LED1_PORT, LED1_PIN, GPIO_PIN_RESET);//BSP_LED_Off(LED1);
  }
}
 8000864:	e012      	b.n	800088c <process_gestures+0x60>
  } else if (g == GESTURE_DOWN) {
 8000866:	7bfb      	ldrb	r3, [r7, #15]
 8000868:	2b02      	cmp	r3, #2
 800086a:	d10f      	bne.n	800088c <process_gestures+0x60>
	printf("Downward gesture: 1 GPIO pulse for left blinker\n\r");
 800086c:	480b      	ldr	r0, [pc, #44]	@ (800089c <process_gestures+0x70>)
 800086e:	f006 fd3f 	bl	80072f0 <iprintf>
	HAL_GPIO_WritePin(LED1_PORT, LED1_PIN, GPIO_PIN_SET);//BSP_LED_On(LED1);
 8000872:	2201      	movs	r2, #1
 8000874:	2120      	movs	r1, #32
 8000876:	4808      	ldr	r0, [pc, #32]	@ (8000898 <process_gestures+0x6c>)
 8000878:	f004 fb16 	bl	8004ea8 <HAL_GPIO_WritePin>
    send_gpio_pulses(1); // Left blinker
 800087c:	2001      	movs	r0, #1
 800087e:	f7ff febf 	bl	8000600 <send_gpio_pulses>
    HAL_GPIO_WritePin(LED1_PORT, LED1_PIN, GPIO_PIN_RESET);//BSP_LED_Off(LED1);
 8000882:	2200      	movs	r2, #0
 8000884:	2120      	movs	r1, #32
 8000886:	4804      	ldr	r0, [pc, #16]	@ (8000898 <process_gestures+0x6c>)
 8000888:	f004 fb0e 	bl	8004ea8 <HAL_GPIO_WritePin>
}
 800088c:	bf00      	nop
 800088e:	3710      	adds	r7, #16
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	080081a8 	.word	0x080081a8
 8000898:	40020000 	.word	0x40020000
 800089c:	080081dc 	.word	0x080081dc

080008a0 <MX_TOF_Init>:
static void MX_53L7A1_ThresholdDetection_Init(void);
static void MX_53L7A1_ThresholdDetection_Process(void);
//static void print_result(RANGING_SENSOR_Result_t *Result);

void MX_TOF_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  MX_53L7A1_ThresholdDetection_Init();
 80008a4:	f000 f808 	bl	80008b8 <MX_53L7A1_ThresholdDetection_Init>
}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}

080008ac <MX_TOF_Process>:

/*
 * LM background task
 */
void MX_TOF_Process(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  MX_53L7A1_ThresholdDetection_Process();
 80008b0:	f000 f83e 	bl	8000930 <MX_53L7A1_ThresholdDetection_Process>
}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <MX_53L7A1_ThresholdDetection_Init>:

static void MX_53L7A1_ThresholdDetection_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 80008bc:	2000      	movs	r0, #0
 80008be:	f000 fa3d 	bl	8000d3c <BSP_COM_Init>
  /* Sensor reset */
  /*HAL_GPIO_WritePin(VL53L7A1_PWR_EN_C_PORT, VL53L7A1_PWR_EN_C_PIN, GPIO_PIN_RESET);
  HAL_Delay(2);
  HAL_GPIO_WritePin(VL53L7A1_PWR_EN_C_PORT, VL53L7A1_PWR_EN_C_PIN, GPIO_PIN_SET);
  HAL_Delay(2);*/
  HAL_GPIO_WritePin(VL53L7A1_LPn_C_PORT, VL53L7A1_LPn_C_PIN, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2110      	movs	r1, #16
 80008c6:	4814      	ldr	r0, [pc, #80]	@ (8000918 <MX_53L7A1_ThresholdDetection_Init+0x60>)
 80008c8:	f004 faee 	bl	8004ea8 <HAL_GPIO_WritePin>
  HAL_Delay(4);
 80008cc:	2004      	movs	r0, #4
 80008ce:	f003 ff4d 	bl	800476c <HAL_Delay>
  HAL_GPIO_WritePin(VL53L7A1_LPn_C_PORT, VL53L7A1_LPn_C_PIN, GPIO_PIN_SET);
 80008d2:	2201      	movs	r2, #1
 80008d4:	2110      	movs	r1, #16
 80008d6:	4810      	ldr	r0, [pc, #64]	@ (8000918 <MX_53L7A1_ThresholdDetection_Init+0x60>)
 80008d8:	f004 fae6 	bl	8004ea8 <HAL_GPIO_WritePin>
  HAL_Delay(4);
 80008dc:	2004      	movs	r0, #4
 80008de:	f003 ff45 	bl	800476c <HAL_Delay>

  printf("\033[2H\033[2J");
 80008e2:	480e      	ldr	r0, [pc, #56]	@ (800091c <MX_53L7A1_ThresholdDetection_Init+0x64>)
 80008e4:	f006 fd04 	bl	80072f0 <iprintf>
  printf("Control Tesla Blinker\n\r");
 80008e8:	480d      	ldr	r0, [pc, #52]	@ (8000920 <MX_53L7A1_ThresholdDetection_Init+0x68>)
 80008ea:	f006 fd01 	bl	80072f0 <iprintf>
  printf("Sensor initialization...\n\r");
 80008ee:	480d      	ldr	r0, [pc, #52]	@ (8000924 <MX_53L7A1_ThresholdDetection_Init+0x6c>)
 80008f0:	f006 fcfe 	bl	80072f0 <iprintf>

  status = VL53L7A1_RANGING_SENSOR_Init(VL53L7A1_DEV_CENTER);
 80008f4:	2001      	movs	r0, #1
 80008f6:	f000 fcf5 	bl	80012e4 <VL53L7A1_RANGING_SENSOR_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	4a0a      	ldr	r2, [pc, #40]	@ (8000928 <MX_53L7A1_ThresholdDetection_Init+0x70>)
 80008fe:	6013      	str	r3, [r2, #0]

  if (status != BSP_ERROR_NONE)
 8000900:	4b09      	ldr	r3, [pc, #36]	@ (8000928 <MX_53L7A1_ThresholdDetection_Init+0x70>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d004      	beq.n	8000912 <MX_53L7A1_ThresholdDetection_Init+0x5a>
  {
    printf("VL53L7A1_RANGING_SENSOR_Init failed\n\r");
 8000908:	4808      	ldr	r0, [pc, #32]	@ (800092c <MX_53L7A1_ThresholdDetection_Init+0x74>)
 800090a:	f006 fcf1 	bl	80072f0 <iprintf>
    while (1);
 800090e:	bf00      	nop
 8000910:	e7fd      	b.n	800090e <MX_53L7A1_ThresholdDetection_Init+0x56>
  }
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40020400 	.word	0x40020400
 800091c:	08008210 	.word	0x08008210
 8000920:	0800821c 	.word	0x0800821c
 8000924:	08008234 	.word	0x08008234
 8000928:	200005ec 	.word	0x200005ec
 800092c:	08008250 	.word	0x08008250

08000930 <MX_53L7A1_ThresholdDetection_Process>:

static void MX_53L7A1_ThresholdDetection_Process(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
  uint32_t Id;

  RANGING_SENSOR_ITConfig_t ITConfig;

  VL53L7A1_RANGING_SENSOR_ReadID(VL53L7A1_DEV_CENTER, &Id);
 8000936:	f107 030c 	add.w	r3, r7, #12
 800093a:	4619      	mov	r1, r3
 800093c:	2001      	movs	r0, #1
 800093e:	f000 fce5 	bl	800130c <VL53L7A1_RANGING_SENSOR_ReadID>
  VL53L7A1_RANGING_SENSOR_GetCapabilities(VL53L7A1_DEV_CENTER, &Cap);
 8000942:	492c      	ldr	r1, [pc, #176]	@ (80009f4 <MX_53L7A1_ThresholdDetection_Process+0xc4>)
 8000944:	2001      	movs	r0, #1
 8000946:	f000 fd09 	bl	800135c <VL53L7A1_RANGING_SENSOR_GetCapabilities>

  Profile.RangingProfile = RS_PROFILE_8x8_CONTINUOUS;
 800094a:	4b2b      	ldr	r3, [pc, #172]	@ (80009f8 <MX_53L7A1_ThresholdDetection_Process+0xc8>)
 800094c:	2203      	movs	r2, #3
 800094e:	601a      	str	r2, [r3, #0]
  Profile.TimingBudget = TIMING_BUDGET;
 8000950:	4b29      	ldr	r3, [pc, #164]	@ (80009f8 <MX_53L7A1_ThresholdDetection_Process+0xc8>)
 8000952:	221e      	movs	r2, #30
 8000954:	605a      	str	r2, [r3, #4]
  Profile.Frequency = RANGING_FREQUENCY; /* Ranging frequency Hz (shall be consistent with TimingBudget value) */
 8000956:	4b28      	ldr	r3, [pc, #160]	@ (80009f8 <MX_53L7A1_ThresholdDetection_Process+0xc8>)
 8000958:	220a      	movs	r2, #10
 800095a:	609a      	str	r2, [r3, #8]
  Profile.EnableAmbient = 0; /* Enable: 1, Disable: 0 */
 800095c:	4b26      	ldr	r3, [pc, #152]	@ (80009f8 <MX_53L7A1_ThresholdDetection_Process+0xc8>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  Profile.EnableSignal = 0; /* Enable: 1, Disable: 0 */
 8000962:	4b25      	ldr	r3, [pc, #148]	@ (80009f8 <MX_53L7A1_ThresholdDetection_Process+0xc8>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]

  /* set the profile if different from default one */
  VL53L7A1_RANGING_SENSOR_ConfigProfile(VL53L7A1_DEV_CENTER, &Profile);
 8000968:	4923      	ldr	r1, [pc, #140]	@ (80009f8 <MX_53L7A1_ThresholdDetection_Process+0xc8>)
 800096a:	2001      	movs	r0, #1
 800096c:	f000 fd1e 	bl	80013ac <VL53L7A1_RANGING_SENSOR_ConfigProfile>

  /* threshold parameters */
  ITConfig.Criteria = RS_IT_IN_WINDOW;
 8000970:	2300      	movs	r3, #0
 8000972:	603b      	str	r3, [r7, #0]
  ITConfig.LowThreshold = LOW_THRESHOLD; /* mm */
 8000974:	2364      	movs	r3, #100	@ 0x64
 8000976:	607b      	str	r3, [r7, #4]
  ITConfig.HighThreshold = HIGH_THRESHOLD; /* mm */
 8000978:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 800097c:	60bb      	str	r3, [r7, #8]

  VL53L7A1_RANGING_SENSOR_ConfigIT(VL53L7A1_DEV_CENTER, &ITConfig);
 800097e:	463b      	mov	r3, r7
 8000980:	4619      	mov	r1, r3
 8000982:	2001      	movs	r0, #1
 8000984:	f000 fd3a 	bl	80013fc <VL53L7A1_RANGING_SENSOR_ConfigIT>

  status = VL53L7A1_RANGING_SENSOR_Start(VL53L7A1_DEV_CENTER, RS_MODE_ASYNC_CONTINUOUS);
 8000988:	2103      	movs	r1, #3
 800098a:	2001      	movs	r0, #1
 800098c:	f000 fd86 	bl	800149c <VL53L7A1_RANGING_SENSOR_Start>
 8000990:	4603      	mov	r3, r0
 8000992:	4a1a      	ldr	r2, [pc, #104]	@ (80009fc <MX_53L7A1_ThresholdDetection_Process+0xcc>)
 8000994:	6013      	str	r3, [r2, #0]

  if (status != BSP_ERROR_NONE)
 8000996:	4b19      	ldr	r3, [pc, #100]	@ (80009fc <MX_53L7A1_ThresholdDetection_Process+0xcc>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d004      	beq.n	80009a8 <MX_53L7A1_ThresholdDetection_Process+0x78>
  {
    printf("VL53L7A1_RANGING_SENSOR_Start failed\n\r");
 800099e:	4818      	ldr	r0, [pc, #96]	@ (8000a00 <MX_53L7A1_ThresholdDetection_Process+0xd0>)
 80009a0:	f006 fca6 	bl	80072f0 <iprintf>
    while (1);
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <MX_53L7A1_ThresholdDetection_Process+0x74>
  }

  printf("\033[2H\033[2J");
 80009a8:	4816      	ldr	r0, [pc, #88]	@ (8000a04 <MX_53L7A1_ThresholdDetection_Process+0xd4>)
 80009aa:	f006 fca1 	bl	80072f0 <iprintf>
  printf("53L7A1 Threshold Detection demo application\n\r");
 80009ae:	4816      	ldr	r0, [pc, #88]	@ (8000a08 <MX_53L7A1_ThresholdDetection_Process+0xd8>)
 80009b0:	f006 fc9e 	bl	80072f0 <iprintf>
  printf("-------------------------------------------\n\n\r");
 80009b4:	4815      	ldr	r0, [pc, #84]	@ (8000a0c <MX_53L7A1_ThresholdDetection_Process+0xdc>)
 80009b6:	f006 fc9b 	bl	80072f0 <iprintf>
  printf("please put a target between %d and %d millimeters from the sensor\n\r",
 80009ba:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80009be:	2164      	movs	r1, #100	@ 0x64
 80009c0:	4813      	ldr	r0, [pc, #76]	@ (8000a10 <MX_53L7A1_ThresholdDetection_Process+0xe0>)
 80009c2:	f006 fc95 	bl	80072f0 <iprintf>
		  LOW_THRESHOLD, HIGH_THRESHOLD);

  while (1)
  {
    /* interrupt mode */
    if (ToF_EventDetected != 0)
 80009c6:	4b13      	ldr	r3, [pc, #76]	@ (8000a14 <MX_53L7A1_ThresholdDetection_Process+0xe4>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d0fa      	beq.n	80009c6 <MX_53L7A1_ThresholdDetection_Process+0x96>
    {
      ToF_EventDetected = 0;
 80009d0:	4b10      	ldr	r3, [pc, #64]	@ (8000a14 <MX_53L7A1_ThresholdDetection_Process+0xe4>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	701a      	strb	r2, [r3, #0]

      status = VL53L7A1_RANGING_SENSOR_GetDistance(VL53L7A1_DEV_CENTER, &Result);
 80009d6:	4910      	ldr	r1, [pc, #64]	@ (8000a18 <MX_53L7A1_ThresholdDetection_Process+0xe8>)
 80009d8:	2001      	movs	r0, #1
 80009da:	f000 fd37 	bl	800144c <VL53L7A1_RANGING_SENSOR_GetDistance>
 80009de:	4603      	mov	r3, r0
 80009e0:	4a06      	ldr	r2, [pc, #24]	@ (80009fc <MX_53L7A1_ThresholdDetection_Process+0xcc>)
 80009e2:	6013      	str	r3, [r2, #0]
      if (status == BSP_ERROR_NONE)
 80009e4:	4b05      	ldr	r3, [pc, #20]	@ (80009fc <MX_53L7A1_ThresholdDetection_Process+0xcc>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d1ec      	bne.n	80009c6 <MX_53L7A1_ThresholdDetection_Process+0x96>
      {
        process_gestures(&Result);
 80009ec:	480a      	ldr	r0, [pc, #40]	@ (8000a18 <MX_53L7A1_ThresholdDetection_Process+0xe8>)
 80009ee:	f7ff ff1d 	bl	800082c <process_gestures>
    if (ToF_EventDetected != 0)
 80009f2:	e7e8      	b.n	80009c6 <MX_53L7A1_ThresholdDetection_Process+0x96>
 80009f4:	200000c4 	.word	0x200000c4
 80009f8:	200000d4 	.word	0x200000d4
 80009fc:	200005ec 	.word	0x200005ec
 8000a00:	08008278 	.word	0x08008278
 8000a04:	08008210 	.word	0x08008210
 8000a08:	080082a0 	.word	0x080082a0
 8000a0c:	080082d0 	.word	0x080082d0
 8000a10:	08008300 	.word	0x08008300
 8000a14:	200005f0 	.word	0x200005f0
 8000a18:	200000e8 	.word	0x200000e8

08000a1c <HAL_GPIO_EXTI_Callback>:
    ToF_EventDetected = 1;
  }
}
#else
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == TOF_INT_EXTI_PIN)
 8000a26:	88fb      	ldrh	r3, [r7, #6]
 8000a28:	2b10      	cmp	r3, #16
 8000a2a:	d102      	bne.n	8000a32 <HAL_GPIO_EXTI_Callback+0x16>
  {
    ToF_EventDetected = 1;
 8000a2c:	4b04      	ldr	r3, [pc, #16]	@ (8000a40 <HAL_GPIO_EXTI_Callback+0x24>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	701a      	strb	r2, [r3, #0]
  }
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	200005f0 	.word	0x200005f0

08000a44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a48:	f003 fe1e 	bl	8004688 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a4c:	f000 f808 	bl	8000a60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a50:	f000 f872 	bl	8000b38 <MX_GPIO_Init>
  MX_TOF_Init();
 8000a54:	f7ff ff24 	bl	80008a0 <MX_TOF_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_TOF_Process();
 8000a58:	f7ff ff28 	bl	80008ac <MX_TOF_Process>
 8000a5c:	e7fc      	b.n	8000a58 <main+0x14>
	...

08000a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b094      	sub	sp, #80	@ 0x50
 8000a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a66:	f107 0320 	add.w	r3, r7, #32
 8000a6a:	2230      	movs	r2, #48	@ 0x30
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f006 fc93 	bl	800739a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a84:	2300      	movs	r3, #0
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	4b29      	ldr	r3, [pc, #164]	@ (8000b30 <SystemClock_Config+0xd0>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8c:	4a28      	ldr	r2, [pc, #160]	@ (8000b30 <SystemClock_Config+0xd0>)
 8000a8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a94:	4b26      	ldr	r3, [pc, #152]	@ (8000b30 <SystemClock_Config+0xd0>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	4b23      	ldr	r3, [pc, #140]	@ (8000b34 <SystemClock_Config+0xd4>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000aac:	4a21      	ldr	r2, [pc, #132]	@ (8000b34 <SystemClock_Config+0xd4>)
 8000aae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ab2:	6013      	str	r3, [r2, #0]
 8000ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b34 <SystemClock_Config+0xd4>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ac8:	2310      	movs	r3, #16
 8000aca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000acc:	2302      	movs	r3, #2
 8000ace:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ad4:	2310      	movs	r3, #16
 8000ad6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ad8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000adc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ade:	2304      	movs	r3, #4
 8000ae0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ae2:	2307      	movs	r3, #7
 8000ae4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae6:	f107 0320 	add.w	r3, r7, #32
 8000aea:	4618      	mov	r0, r3
 8000aec:	f005 fa90 	bl	8006010 <HAL_RCC_OscConfig>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000af6:	f000 f8bd 	bl	8000c74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000afa:	230f      	movs	r3, #15
 8000afc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000afe:	2302      	movs	r3, #2
 8000b00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b0a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b10:	f107 030c 	add.w	r3, r7, #12
 8000b14:	2102      	movs	r1, #2
 8000b16:	4618      	mov	r0, r3
 8000b18:	f005 fcf2 	bl	8006500 <HAL_RCC_ClockConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b22:	f000 f8a7 	bl	8000c74 <Error_Handler>
  }
}
 8000b26:	bf00      	nop
 8000b28:	3750      	adds	r7, #80	@ 0x50
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40007000 	.word	0x40007000

08000b38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	@ 0x28
 8000b3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
 8000b4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	4b44      	ldr	r3, [pc, #272]	@ (8000c64 <MX_GPIO_Init+0x12c>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	4a43      	ldr	r2, [pc, #268]	@ (8000c64 <MX_GPIO_Init+0x12c>)
 8000b58:	f043 0304 	orr.w	r3, r3, #4
 8000b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5e:	4b41      	ldr	r3, [pc, #260]	@ (8000c64 <MX_GPIO_Init+0x12c>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	f003 0304 	and.w	r3, r3, #4
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	4b3d      	ldr	r3, [pc, #244]	@ (8000c64 <MX_GPIO_Init+0x12c>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	4a3c      	ldr	r2, [pc, #240]	@ (8000c64 <MX_GPIO_Init+0x12c>)
 8000b74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7a:	4b3a      	ldr	r3, [pc, #232]	@ (8000c64 <MX_GPIO_Init+0x12c>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	4b36      	ldr	r3, [pc, #216]	@ (8000c64 <MX_GPIO_Init+0x12c>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	4a35      	ldr	r2, [pc, #212]	@ (8000c64 <MX_GPIO_Init+0x12c>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b96:	4b33      	ldr	r3, [pc, #204]	@ (8000c64 <MX_GPIO_Init+0x12c>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	4b2f      	ldr	r3, [pc, #188]	@ (8000c64 <MX_GPIO_Init+0x12c>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	4a2e      	ldr	r2, [pc, #184]	@ (8000c64 <MX_GPIO_Init+0x12c>)
 8000bac:	f043 0302 	orr.w	r3, r3, #2
 8000bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb2:	4b2c      	ldr	r3, [pc, #176]	@ (8000c64 <MX_GPIO_Init+0x12c>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	f003 0302 	and.w	r3, r3, #2
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2120      	movs	r1, #32
 8000bc2:	4829      	ldr	r0, [pc, #164]	@ (8000c68 <MX_GPIO_Init+0x130>)
 8000bc4:	f004 f970 	bl	8004ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_4, GPIO_PIN_SET);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	2111      	movs	r1, #17
 8000bcc:	4827      	ldr	r0, [pc, #156]	@ (8000c6c <MX_GPIO_Init+0x134>)
 8000bce:	f004 f96b 	bl	8004ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2108      	movs	r1, #8
 8000bd6:	4825      	ldr	r0, [pc, #148]	@ (8000c6c <MX_GPIO_Init+0x134>)
 8000bd8:	f004 f966 	bl	8004ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bdc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000be2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	481f      	ldr	r0, [pc, #124]	@ (8000c70 <MX_GPIO_Init+0x138>)
 8000bf4:	f003 fef0 	bl	80049d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000bf8:	2310      	movs	r3, #16
 8000bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bfc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4816      	ldr	r0, [pc, #88]	@ (8000c68 <MX_GPIO_Init+0x130>)
 8000c0e:	f003 fee3 	bl	80049d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c12:	2320      	movs	r3, #32
 8000c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	480f      	ldr	r0, [pc, #60]	@ (8000c68 <MX_GPIO_Init+0x130>)
 8000c2a:	f003 fed5 	bl	80049d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8000c2e:	2319      	movs	r3, #25
 8000c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	4809      	ldr	r0, [pc, #36]	@ (8000c6c <MX_GPIO_Init+0x134>)
 8000c46:	f003 fec7 	bl	80049d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	200a      	movs	r0, #10
 8000c50:	f003 fe8b 	bl	800496a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000c54:	200a      	movs	r0, #10
 8000c56:	f003 fea4 	bl	80049a2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c5a:	bf00      	nop
 8000c5c:	3728      	adds	r7, #40	@ 0x28
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40020000 	.word	0x40020000
 8000c6c:	40020400 	.word	0x40020400
 8000c70:	40020800 	.word	0x40020800

08000c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c78:	b672      	cpsid	i
}
 8000c7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <Error_Handler+0x8>

08000c80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ccc <HAL_MspInit+0x4c>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c8e:	4a0f      	ldr	r2, [pc, #60]	@ (8000ccc <HAL_MspInit+0x4c>)
 8000c90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c96:	4b0d      	ldr	r3, [pc, #52]	@ (8000ccc <HAL_MspInit+0x4c>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	603b      	str	r3, [r7, #0]
 8000ca6:	4b09      	ldr	r3, [pc, #36]	@ (8000ccc <HAL_MspInit+0x4c>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000caa:	4a08      	ldr	r2, [pc, #32]	@ (8000ccc <HAL_MspInit+0x4c>)
 8000cac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cb2:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <HAL_MspInit+0x4c>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cba:	603b      	str	r3, [r7, #0]
 8000cbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	40023800 	.word	0x40023800

08000cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <NMI_Handler+0x4>

08000cd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <HardFault_Handler+0x4>

08000ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <MemManage_Handler+0x4>

08000ce8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <BusFault_Handler+0x4>

08000cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <UsageFault_Handler+0x4>

08000cf8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d26:	f003 fd01 	bl	800472c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000d32:	2010      	movs	r0, #16
 8000d34:	f004 f8d2 	bl	8004edc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d903      	bls.n	8000d58 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000d50:	f06f 0301 	mvn.w	r3, #1
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	e025      	b.n	8000da4 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	79fa      	ldrb	r2, [r7, #7]
 8000d5c:	4914      	ldr	r1, [pc, #80]	@ (8000db0 <BSP_COM_Init+0x74>)
 8000d5e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8000d62:	4814      	ldr	r0, [pc, #80]	@ (8000db4 <BSP_COM_Init+0x78>)
 8000d64:	4613      	mov	r3, r2
 8000d66:	00db      	lsls	r3, r3, #3
 8000d68:	4413      	add	r3, r2
 8000d6a:	00db      	lsls	r3, r3, #3
 8000d6c:	4403      	add	r3, r0
 8000d6e:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8000d70:	79fa      	ldrb	r2, [r7, #7]
 8000d72:	4613      	mov	r3, r2
 8000d74:	00db      	lsls	r3, r3, #3
 8000d76:	4413      	add	r3, r2
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	4a0e      	ldr	r2, [pc, #56]	@ (8000db4 <BSP_COM_Init+0x78>)
 8000d7c:	4413      	add	r3, r2
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 f864 	bl	8000e4c <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8000d84:	79fa      	ldrb	r2, [r7, #7]
 8000d86:	4613      	mov	r3, r2
 8000d88:	00db      	lsls	r3, r3, #3
 8000d8a:	4413      	add	r3, r2
 8000d8c:	00db      	lsls	r3, r3, #3
 8000d8e:	4a09      	ldr	r2, [pc, #36]	@ (8000db4 <BSP_COM_Init+0x78>)
 8000d90:	4413      	add	r3, r2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 f810 	bl	8000db8 <MX_USART2_UART_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d002      	beq.n	8000da4 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000d9e:	f06f 0303 	mvn.w	r3, #3
 8000da2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000da4:	68fb      	ldr	r3, [r7, #12]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000004 	.word	0x20000004
 8000db4:	200005f4 	.word	0x200005f4

08000db8 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4a12      	ldr	r2, [pc, #72]	@ (8000e10 <MX_USART2_UART_Init+0x58>)
 8000dc8:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 460800;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 8000dd0:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2200      	movs	r2, #0
 8000de2:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	220c      	movs	r2, #12
 8000de8:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2200      	movs	r2, #0
 8000df4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f005 fda2 	bl	8006940 <HAL_UART_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40004400 	.word	0x40004400

08000e14 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8000e1c:	4b09      	ldr	r3, [pc, #36]	@ (8000e44 <__io_putchar+0x30>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	461a      	mov	r2, r3
 8000e22:	4613      	mov	r3, r2
 8000e24:	00db      	lsls	r3, r3, #3
 8000e26:	4413      	add	r3, r2
 8000e28:	00db      	lsls	r3, r3, #3
 8000e2a:	4a07      	ldr	r2, [pc, #28]	@ (8000e48 <__io_putchar+0x34>)
 8000e2c:	1898      	adds	r0, r3, r2
 8000e2e:	1d39      	adds	r1, r7, #4
 8000e30:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e34:	2201      	movs	r2, #1
 8000e36:	f005 fddd 	bl	80069f4 <HAL_UART_Transmit>
  return ch;
 8000e3a:	687b      	ldr	r3, [r7, #4]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	2000063c 	.word	0x2000063c
 8000e48:	200005f4 	.word	0x200005f4

08000e4c <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	@ 0x28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e54:	2300      	movs	r3, #0
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed4 <USART2_MspInit+0x88>)
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ed4 <USART2_MspInit+0x88>)
 8000e5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e62:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e64:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed4 <USART2_MspInit+0x88>)
 8000e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	4b17      	ldr	r3, [pc, #92]	@ (8000ed4 <USART2_MspInit+0x88>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e78:	4a16      	ldr	r2, [pc, #88]	@ (8000ed4 <USART2_MspInit+0x88>)
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e80:	4b14      	ldr	r3, [pc, #80]	@ (8000ed4 <USART2_MspInit+0x88>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8000e8c:	2304      	movs	r3, #4
 8000e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8000e9c:	2307      	movs	r3, #7
 8000e9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	480c      	ldr	r0, [pc, #48]	@ (8000ed8 <USART2_MspInit+0x8c>)
 8000ea8:	f003 fd96 	bl	80049d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8000eac:	2308      	movs	r3, #8
 8000eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8000ebc:	2307      	movs	r3, #7
 8000ebe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4804      	ldr	r0, [pc, #16]	@ (8000ed8 <USART2_MspInit+0x8c>)
 8000ec8:	f003 fd86 	bl	80049d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	3728      	adds	r7, #40	@ 0x28
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40020000 	.word	0x40020000

08000edc <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000ee6:	4b13      	ldr	r3, [pc, #76]	@ (8000f34 <BSP_I2C1_Init+0x58>)
 8000ee8:	4a13      	ldr	r2, [pc, #76]	@ (8000f38 <BSP_I2C1_Init+0x5c>)
 8000eea:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000eec:	4b13      	ldr	r3, [pc, #76]	@ (8000f3c <BSP_I2C1_Init+0x60>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	1c5a      	adds	r2, r3, #1
 8000ef2:	4912      	ldr	r1, [pc, #72]	@ (8000f3c <BSP_I2C1_Init+0x60>)
 8000ef4:	600a      	str	r2, [r1, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d117      	bne.n	8000f2a <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000efa:	480e      	ldr	r0, [pc, #56]	@ (8000f34 <BSP_I2C1_Init+0x58>)
 8000efc:	f004 fcba 	bl	8005874 <HAL_I2C_GetState>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d111      	bne.n	8000f2a <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000f06:	480b      	ldr	r0, [pc, #44]	@ (8000f34 <BSP_I2C1_Init+0x58>)
 8000f08:	f000 f8e2 	bl	80010d0 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d10b      	bne.n	8000f2a <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000f12:	4808      	ldr	r0, [pc, #32]	@ (8000f34 <BSP_I2C1_Init+0x58>)
 8000f14:	f000 f8a8 	bl	8001068 <MX_I2C1_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000f1e:	f06f 0307 	mvn.w	r3, #7
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	e001      	b.n	8000f2a <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000f26:	2300      	movs	r3, #0
 8000f28:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000f2a:	687b      	ldr	r3, [r7, #4]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000640 	.word	0x20000640
 8000f38:	40005400 	.word	0x40005400
 8000f3c:	20000694 	.word	0x20000694

08000f40 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8000f4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f88 <BSP_I2C1_DeInit+0x48>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d014      	beq.n	8000f7c <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8000f52:	4b0d      	ldr	r3, [pc, #52]	@ (8000f88 <BSP_I2C1_DeInit+0x48>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	4a0b      	ldr	r2, [pc, #44]	@ (8000f88 <BSP_I2C1_DeInit+0x48>)
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f88 <BSP_I2C1_DeInit+0x48>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d10b      	bne.n	8000f7c <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8000f64:	4809      	ldr	r0, [pc, #36]	@ (8000f8c <BSP_I2C1_DeInit+0x4c>)
 8000f66:	f000 f8fd 	bl	8001164 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8000f6a:	4808      	ldr	r0, [pc, #32]	@ (8000f8c <BSP_I2C1_DeInit+0x4c>)
 8000f6c:	f004 f912 	bl	8005194 <HAL_I2C_DeInit>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d002      	beq.n	8000f7c <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000f76:	f06f 0307 	mvn.w	r3, #7
 8000f7a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000f7c:	687b      	ldr	r3, [r7, #4]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000694 	.word	0x20000694
 8000f8c:	20000640 	.word	0x20000640

08000f90 <BSP_I2C1_WriteReg16>:
  * @param  pData  Pointer to data buffer to write
  * @param  Length Data Length
  * @retval BSP statu
  */
int32_t BSP_I2C1_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	@ 0x28
 8000f94:	af04      	add	r7, sp, #16
 8000f96:	60ba      	str	r2, [r7, #8]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	81fb      	strh	r3, [r7, #14]
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	81bb      	strh	r3, [r7, #12]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000faa:	89ba      	ldrh	r2, [r7, #12]
 8000fac:	89f9      	ldrh	r1, [r7, #14]
 8000fae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fb2:	9302      	str	r3, [sp, #8]
 8000fb4:	88fb      	ldrh	r3, [r7, #6]
 8000fb6:	9301      	str	r3, [sp, #4]
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	2310      	movs	r3, #16
 8000fbe:	480c      	ldr	r0, [pc, #48]	@ (8000ff0 <BSP_I2C1_WriteReg16+0x60>)
 8000fc0:	f004 f92c 	bl	800521c <HAL_I2C_Mem_Write>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d00c      	beq.n	8000fe4 <BSP_I2C1_WriteReg16+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000fca:	4809      	ldr	r0, [pc, #36]	@ (8000ff0 <BSP_I2C1_WriteReg16+0x60>)
 8000fcc:	f004 fc60 	bl	8005890 <HAL_I2C_GetError>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b04      	cmp	r3, #4
 8000fd4:	d103      	bne.n	8000fde <BSP_I2C1_WriteReg16+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000fd6:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	e002      	b.n	8000fe4 <BSP_I2C1_WriteReg16+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000fde:	f06f 0303 	mvn.w	r3, #3
 8000fe2:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000fe4:	697b      	ldr	r3, [r7, #20]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000640 	.word	0x20000640

08000ff4 <BSP_I2C1_ReadReg16>:
  * @param  Reg: The target register address to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	@ 0x28
 8000ff8:	af04      	add	r7, sp, #16
 8000ffa:	60ba      	str	r2, [r7, #8]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4603      	mov	r3, r0
 8001000:	81fb      	strh	r3, [r7, #14]
 8001002:	460b      	mov	r3, r1
 8001004:	81bb      	strh	r3, [r7, #12]
 8001006:	4613      	mov	r3, r2
 8001008:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800100e:	89ba      	ldrh	r2, [r7, #12]
 8001010:	89f9      	ldrh	r1, [r7, #14]
 8001012:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001016:	9302      	str	r3, [sp, #8]
 8001018:	88fb      	ldrh	r3, [r7, #6]
 800101a:	9301      	str	r3, [sp, #4]
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2310      	movs	r3, #16
 8001022:	480c      	ldr	r0, [pc, #48]	@ (8001054 <BSP_I2C1_ReadReg16+0x60>)
 8001024:	f004 f9f4 	bl	8005410 <HAL_I2C_Mem_Read>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d00c      	beq.n	8001048 <BSP_I2C1_ReadReg16+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 800102e:	4809      	ldr	r0, [pc, #36]	@ (8001054 <BSP_I2C1_ReadReg16+0x60>)
 8001030:	f004 fc2e 	bl	8005890 <HAL_I2C_GetError>
 8001034:	4603      	mov	r3, r0
 8001036:	2b04      	cmp	r3, #4
 8001038:	d003      	beq.n	8001042 <BSP_I2C1_ReadReg16+0x4e>
    {
      ret =  BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800103a:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	e002      	b.n	8001048 <BSP_I2C1_ReadReg16+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001042:	f06f 0303 	mvn.w	r3, #3
 8001046:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001048:	697b      	ldr	r3, [r7, #20]
}
 800104a:	4618      	mov	r0, r3
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000640 	.word	0x20000640

08001058 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800105c:	f003 fb7a 	bl	8004754 <HAL_GetTick>
 8001060:	4603      	mov	r3, r0
}
 8001062:	4618      	mov	r0, r3
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001070:	2300      	movs	r3, #0
 8001072:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a14      	ldr	r2, [pc, #80]	@ (80010c8 <MX_I2C1_Init+0x60>)
 8001078:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a13      	ldr	r2, [pc, #76]	@ (80010cc <MX_I2C1_Init+0x64>)
 800107e:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001092:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f003 ff2d 	bl	8004f0c <HAL_I2C_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40005400 	.word	0x40005400
 80010cc:	00061a80 	.word	0x00061a80

080010d0 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	@ 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d8:	2300      	movs	r3, #0
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	4b1f      	ldr	r3, [pc, #124]	@ (800115c <I2C1_MspInit+0x8c>)
 80010de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e0:	4a1e      	ldr	r2, [pc, #120]	@ (800115c <I2C1_MspInit+0x8c>)
 80010e2:	f043 0302 	orr.w	r3, r3, #2
 80010e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e8:	4b1c      	ldr	r3, [pc, #112]	@ (800115c <I2C1_MspInit+0x8c>)
 80010ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ec:	f003 0302 	and.w	r3, r3, #2
 80010f0:	613b      	str	r3, [r7, #16]
 80010f2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80010f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010fa:	2312      	movs	r3, #18
 80010fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010fe:	2301      	movs	r3, #1
 8001100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001102:	2303      	movs	r3, #3
 8001104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001106:	2304      	movs	r3, #4
 8001108:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	4619      	mov	r1, r3
 8001110:	4813      	ldr	r0, [pc, #76]	@ (8001160 <I2C1_MspInit+0x90>)
 8001112:	f003 fc61 	bl	80049d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001116:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800111a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800111c:	2312      	movs	r3, #18
 800111e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001120:	2301      	movs	r3, #1
 8001122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001124:	2303      	movs	r3, #3
 8001126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001128:	2304      	movs	r3, #4
 800112a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	480b      	ldr	r0, [pc, #44]	@ (8001160 <I2C1_MspInit+0x90>)
 8001134:	f003 fc50 	bl	80049d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	4b07      	ldr	r3, [pc, #28]	@ (800115c <I2C1_MspInit+0x8c>)
 800113e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001140:	4a06      	ldr	r2, [pc, #24]	@ (800115c <I2C1_MspInit+0x8c>)
 8001142:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001146:	6413      	str	r3, [r2, #64]	@ 0x40
 8001148:	4b04      	ldr	r3, [pc, #16]	@ (800115c <I2C1_MspInit+0x8c>)
 800114a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001154:	bf00      	nop
 8001156:	3728      	adds	r7, #40	@ 0x28
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40023800 	.word	0x40023800
 8001160:	40020400 	.word	0x40020400

08001164 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800116c:	4b09      	ldr	r3, [pc, #36]	@ (8001194 <I2C1_MspDeInit+0x30>)
 800116e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001170:	4a08      	ldr	r2, [pc, #32]	@ (8001194 <I2C1_MspDeInit+0x30>)
 8001172:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001176:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001178:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800117c:	4806      	ldr	r0, [pc, #24]	@ (8001198 <I2C1_MspDeInit+0x34>)
 800117e:	f003 fdaf 	bl	8004ce0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8001182:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001186:	4804      	ldr	r0, [pc, #16]	@ (8001198 <I2C1_MspDeInit+0x34>)
 8001188:	f003 fdaa 	bl	8004ce0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40023800 	.word	0x40023800
 8001198:	40020400 	.word	0x40020400

0800119c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	e00a      	b.n	80011c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011ae:	f3af 8000 	nop.w
 80011b2:	4601      	mov	r1, r0
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	1c5a      	adds	r2, r3, #1
 80011b8:	60ba      	str	r2, [r7, #8]
 80011ba:	b2ca      	uxtb	r2, r1
 80011bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	3301      	adds	r3, #1
 80011c2:	617b      	str	r3, [r7, #20]
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	dbf0      	blt.n	80011ae <_read+0x12>
  }

  return len;
 80011cc:	687b      	ldr	r3, [r7, #4]
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b086      	sub	sp, #24
 80011da:	af00      	add	r7, sp, #0
 80011dc:	60f8      	str	r0, [r7, #12]
 80011de:	60b9      	str	r1, [r7, #8]
 80011e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
 80011e6:	e009      	b.n	80011fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	1c5a      	adds	r2, r3, #1
 80011ec:	60ba      	str	r2, [r7, #8]
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fe0f 	bl	8000e14 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	3301      	adds	r3, #1
 80011fa:	617b      	str	r3, [r7, #20]
 80011fc:	697a      	ldr	r2, [r7, #20]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	429a      	cmp	r2, r3
 8001202:	dbf1      	blt.n	80011e8 <_write+0x12>
  }
  return len;
 8001204:	687b      	ldr	r3, [r7, #4]
}
 8001206:	4618      	mov	r0, r3
 8001208:	3718      	adds	r7, #24
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <_close>:

int _close(int file)
{
 800120e:	b480      	push	{r7}
 8001210:	b083      	sub	sp, #12
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001216:	f04f 33ff 	mov.w	r3, #4294967295
}
 800121a:	4618      	mov	r0, r3
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001226:	b480      	push	{r7}
 8001228:	b083      	sub	sp, #12
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
 800122e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001236:	605a      	str	r2, [r3, #4]
  return 0;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <_isatty>:

int _isatty(int file)
{
 8001246:	b480      	push	{r7}
 8001248:	b083      	sub	sp, #12
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800124e:	2301      	movs	r3, #1
}
 8001250:	4618      	mov	r0, r3
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
	...

08001278 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001280:	4a14      	ldr	r2, [pc, #80]	@ (80012d4 <_sbrk+0x5c>)
 8001282:	4b15      	ldr	r3, [pc, #84]	@ (80012d8 <_sbrk+0x60>)
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800128c:	4b13      	ldr	r3, [pc, #76]	@ (80012dc <_sbrk+0x64>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d102      	bne.n	800129a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001294:	4b11      	ldr	r3, [pc, #68]	@ (80012dc <_sbrk+0x64>)
 8001296:	4a12      	ldr	r2, [pc, #72]	@ (80012e0 <_sbrk+0x68>)
 8001298:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800129a:	4b10      	ldr	r3, [pc, #64]	@ (80012dc <_sbrk+0x64>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d207      	bcs.n	80012b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012a8:	f006 f8c6 	bl	8007438 <__errno>
 80012ac:	4603      	mov	r3, r0
 80012ae:	220c      	movs	r2, #12
 80012b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295
 80012b6:	e009      	b.n	80012cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012b8:	4b08      	ldr	r3, [pc, #32]	@ (80012dc <_sbrk+0x64>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012be:	4b07      	ldr	r3, [pc, #28]	@ (80012dc <_sbrk+0x64>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	4a05      	ldr	r2, [pc, #20]	@ (80012dc <_sbrk+0x64>)
 80012c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ca:	68fb      	ldr	r3, [r7, #12]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20018000 	.word	0x20018000
 80012d8:	00000800 	.word	0x00000800
 80012dc:	20000698 	.word	0x20000698
 80012e0:	20003100 	.word	0x20003100

080012e4 <VL53L7A1_RANGING_SENSOR_Init>:
  * @brief Initializes the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L7A1_RANGING_SENSOR_Init(uint32_t Instance)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d903      	bls.n	80012fa <VL53L7A1_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80012f2:	f06f 0301 	mvn.w	r3, #1
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	e003      	b.n	8001302 <VL53L7A1_RANGING_SENSOR_Init+0x1e>
  }
  else
  {
    ret = VL53L7CX_Probe(Instance);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f000 f8f6 	bl	80014ec <VL53L7CX_Probe>
 8001300:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001302:	68fb      	ldr	r3, [r7, #12]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <VL53L7A1_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t VL53L7A1_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b02      	cmp	r3, #2
 800131a:	d903      	bls.n	8001324 <VL53L7A1_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800131c:	f06f 0301 	mvn.w	r3, #1
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	e012      	b.n	800134a <VL53L7A1_RANGING_SENSOR_ReadID+0x3e>
  }
  else if (VL53L7A1_RANGING_SENSOR_Drv->ReadID(VL53L7A1_RANGING_SENSOR_CompObj[Instance], pId) < 0)
 8001324:	4b0b      	ldr	r3, [pc, #44]	@ (8001354 <VL53L7A1_RANGING_SENSOR_ReadID+0x48>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	490b      	ldr	r1, [pc, #44]	@ (8001358 <VL53L7A1_RANGING_SENSOR_ReadID+0x4c>)
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001332:	6839      	ldr	r1, [r7, #0]
 8001334:	4610      	mov	r0, r2
 8001336:	4798      	blx	r3
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	da03      	bge.n	8001346 <VL53L7A1_RANGING_SENSOR_ReadID+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800133e:	f06f 0304 	mvn.w	r3, #4
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	e001      	b.n	800134a <VL53L7A1_RANGING_SENSOR_ReadID+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800134a:	68fb      	ldr	r3, [r7, #12]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	200006a8 	.word	0x200006a8
 8001358:	2000069c 	.word	0x2000069c

0800135c <VL53L7A1_RANGING_SENSOR_GetCapabilities>:
  * @param Instance    Ranging sensor instance.
  * @param pCapabilities    Pointer to the ranging sensor capabilities.
  * @retval BSP status
  */
int32_t VL53L7A1_RANGING_SENSOR_GetCapabilities(uint32_t Instance, RANGING_SENSOR_Capabilities_t *pCapabilities)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b02      	cmp	r3, #2
 800136a:	d903      	bls.n	8001374 <VL53L7A1_RANGING_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800136c:	f06f 0301 	mvn.w	r3, #1
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	e012      	b.n	800139a <VL53L7A1_RANGING_SENSOR_GetCapabilities+0x3e>
  }
  else if (VL53L7A1_RANGING_SENSOR_Drv->GetCapabilities(VL53L7A1_RANGING_SENSOR_CompObj[Instance], pCapabilities) < 0)
 8001374:	4b0b      	ldr	r3, [pc, #44]	@ (80013a4 <VL53L7A1_RANGING_SENSOR_GetCapabilities+0x48>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	490b      	ldr	r1, [pc, #44]	@ (80013a8 <VL53L7A1_RANGING_SENSOR_GetCapabilities+0x4c>)
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001382:	6839      	ldr	r1, [r7, #0]
 8001384:	4610      	mov	r0, r2
 8001386:	4798      	blx	r3
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	da03      	bge.n	8001396 <VL53L7A1_RANGING_SENSOR_GetCapabilities+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800138e:	f06f 0304 	mvn.w	r3, #4
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	e001      	b.n	800139a <VL53L7A1_RANGING_SENSOR_GetCapabilities+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800139a:	68fb      	ldr	r3, [r7, #12]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	200006a8 	.word	0x200006a8
 80013a8:	2000069c 	.word	0x2000069c

080013ac <VL53L7A1_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t VL53L7A1_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d903      	bls.n	80013c4 <VL53L7A1_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80013bc:	f06f 0301 	mvn.w	r3, #1
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	e012      	b.n	80013ea <VL53L7A1_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else if (VL53L7A1_RANGING_SENSOR_Drv->ConfigProfile(VL53L7A1_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 80013c4:	4b0b      	ldr	r3, [pc, #44]	@ (80013f4 <VL53L7A1_RANGING_SENSOR_ConfigProfile+0x48>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	490b      	ldr	r1, [pc, #44]	@ (80013f8 <VL53L7A1_RANGING_SENSOR_ConfigProfile+0x4c>)
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80013d2:	6839      	ldr	r1, [r7, #0]
 80013d4:	4610      	mov	r0, r2
 80013d6:	4798      	blx	r3
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	da03      	bge.n	80013e6 <VL53L7A1_RANGING_SENSOR_ConfigProfile+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80013de:	f06f 0304 	mvn.w	r3, #4
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	e001      	b.n	80013ea <VL53L7A1_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80013ea:	68fb      	ldr	r3, [r7, #12]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	200006a8 	.word	0x200006a8
 80013f8:	2000069c 	.word	0x2000069c

080013fc <VL53L7A1_RANGING_SENSOR_ConfigIT>:
  * @retval BSP status
  */
int32_t VL53L7A1_RANGING_SENSOR_ConfigIT(
  uint32_t Instance,
  RANGING_SENSOR_ITConfig_t *pConfig)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b02      	cmp	r3, #2
 800140a:	d903      	bls.n	8001414 <VL53L7A1_RANGING_SENSOR_ConfigIT+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800140c:	f06f 0301 	mvn.w	r3, #1
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	e012      	b.n	800143a <VL53L7A1_RANGING_SENSOR_ConfigIT+0x3e>
  }
  else if (VL53L7A1_RANGING_SENSOR_Drv->ConfigIT(
 8001414:	4b0b      	ldr	r3, [pc, #44]	@ (8001444 <VL53L7A1_RANGING_SENSOR_ConfigIT+0x48>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	490b      	ldr	r1, [pc, #44]	@ (8001448 <VL53L7A1_RANGING_SENSOR_ConfigIT+0x4c>)
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001422:	6839      	ldr	r1, [r7, #0]
 8001424:	4610      	mov	r0, r2
 8001426:	4798      	blx	r3
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	da03      	bge.n	8001436 <VL53L7A1_RANGING_SENSOR_ConfigIT+0x3a>
             VL53L7A1_RANGING_SENSOR_CompObj[Instance],
             pConfig) < 0)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800142e:	f06f 0304 	mvn.w	r3, #4
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	e001      	b.n	800143a <VL53L7A1_RANGING_SENSOR_ConfigIT+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800143a:	68fb      	ldr	r3, [r7, #12]
}
 800143c:	4618      	mov	r0, r3
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200006a8 	.word	0x200006a8
 8001448:	2000069c 	.word	0x2000069c

0800144c <VL53L7A1_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t VL53L7A1_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2b02      	cmp	r3, #2
 800145a:	d903      	bls.n	8001464 <VL53L7A1_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800145c:	f06f 0301 	mvn.w	r3, #1
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	e012      	b.n	800148a <VL53L7A1_RANGING_SENSOR_GetDistance+0x3e>
  }
  else if (VL53L7A1_RANGING_SENSOR_Drv->GetDistance(VL53L7A1_RANGING_SENSOR_CompObj[Instance], pResult) < 0)
 8001464:	4b0b      	ldr	r3, [pc, #44]	@ (8001494 <VL53L7A1_RANGING_SENSOR_GetDistance+0x48>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	490b      	ldr	r1, [pc, #44]	@ (8001498 <VL53L7A1_RANGING_SENSOR_GetDistance+0x4c>)
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001472:	6839      	ldr	r1, [r7, #0]
 8001474:	4610      	mov	r0, r2
 8001476:	4798      	blx	r3
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	da03      	bge.n	8001486 <VL53L7A1_RANGING_SENSOR_GetDistance+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800147e:	f06f 0304 	mvn.w	r3, #4
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	e001      	b.n	800148a <VL53L7A1_RANGING_SENSOR_GetDistance+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800148a:	68fb      	ldr	r3, [r7, #12]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	200006a8 	.word	0x200006a8
 8001498:	2000069c 	.word	0x2000069c

0800149c <VL53L7A1_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired ranging mode
  * @retval BSP status
  */
int32_t VL53L7A1_RANGING_SENSOR_Start(uint32_t Instance, uint32_t Mode)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d903      	bls.n	80014b4 <VL53L7A1_RANGING_SENSOR_Start+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80014ac:	f06f 0301 	mvn.w	r3, #1
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	e012      	b.n	80014da <VL53L7A1_RANGING_SENSOR_Start+0x3e>
  }
  else if (VL53L7A1_RANGING_SENSOR_Drv->Start(VL53L7A1_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 80014b4:	4b0b      	ldr	r3, [pc, #44]	@ (80014e4 <VL53L7A1_RANGING_SENSOR_Start+0x48>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6a1b      	ldr	r3, [r3, #32]
 80014ba:	490b      	ldr	r1, [pc, #44]	@ (80014e8 <VL53L7A1_RANGING_SENSOR_Start+0x4c>)
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80014c2:	6839      	ldr	r1, [r7, #0]
 80014c4:	4610      	mov	r0, r2
 80014c6:	4798      	blx	r3
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	da03      	bge.n	80014d6 <VL53L7A1_RANGING_SENSOR_Start+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80014ce:	f06f 0304 	mvn.w	r3, #4
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	e001      	b.n	80014da <VL53L7A1_RANGING_SENSOR_Start+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80014da:	68fb      	ldr	r3, [r7, #12]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	200006a8 	.word	0x200006a8
 80014e8:	2000069c 	.word	0x2000069c

080014ec <VL53L7CX_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L7CX_Probe(uint32_t Instance)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	@ 0x28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  VL53L7CX_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L7CX_Object_t   VL53L7CXObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L7CX_ADDRESS;
 80014f4:	2352      	movs	r3, #82	@ 0x52
 80014f6:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = VL53L7A1_I2C_INIT;
 80014f8:	4b38      	ldr	r3, [pc, #224]	@ (80015dc <VL53L7CX_Probe+0xf0>)
 80014fa:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = VL53L7A1_I2C_DEINIT;
 80014fc:	4b38      	ldr	r3, [pc, #224]	@ (80015e0 <VL53L7CX_Probe+0xf4>)
 80014fe:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = VL53L7A1_I2C_WRITEREG;
 8001500:	4b38      	ldr	r3, [pc, #224]	@ (80015e4 <VL53L7CX_Probe+0xf8>)
 8001502:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = VL53L7A1_I2C_READREG;
 8001504:	4b38      	ldr	r3, [pc, #224]	@ (80015e8 <VL53L7CX_Probe+0xfc>)
 8001506:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = VL53L7A1_GETTICK;
 8001508:	4b38      	ldr	r3, [pc, #224]	@ (80015ec <VL53L7CX_Probe+0x100>)
 800150a:	623b      	str	r3, [r7, #32]

  if (VL53L7CX_RegisterBusIO(&(VL53L7CXObj[Instance]), &IOCtx) != VL53L7CX_OK)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f44f 622e 	mov.w	r2, #2784	@ 0xae0
 8001512:	fb02 f303 	mul.w	r3, r2, r3
 8001516:	4a36      	ldr	r2, [pc, #216]	@ (80015f0 <VL53L7CX_Probe+0x104>)
 8001518:	4413      	add	r3, r2
 800151a:	f107 020c 	add.w	r2, r7, #12
 800151e:	4611      	mov	r1, r2
 8001520:	4618      	mov	r0, r3
 8001522:	f000 f918 	bl	8001756 <VL53L7CX_RegisterBusIO>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <VL53L7CX_Probe+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800152c:	f06f 0304 	mvn.w	r3, #4
 8001530:	627b      	str	r3, [r7, #36]	@ 0x24
 8001532:	e04d      	b.n	80015d0 <VL53L7CX_Probe+0xe4>
  }
  else
  {
    VL53L7A1_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L7CX_RANGING_SENSOR_Driver;
 8001534:	4b2f      	ldr	r3, [pc, #188]	@ (80015f4 <VL53L7CX_Probe+0x108>)
 8001536:	4a30      	ldr	r2, [pc, #192]	@ (80015f8 <VL53L7CX_Probe+0x10c>)
 8001538:	601a      	str	r2, [r3, #0]
    VL53L7A1_RANGING_SENSOR_CompObj[Instance] = &(VL53L7CXObj[Instance]);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f44f 622e 	mov.w	r2, #2784	@ 0xae0
 8001540:	fb02 f303 	mul.w	r3, r2, r3
 8001544:	4a2a      	ldr	r2, [pc, #168]	@ (80015f0 <VL53L7CX_Probe+0x104>)
 8001546:	441a      	add	r2, r3
 8001548:	492c      	ldr	r1, [pc, #176]	@ (80015fc <VL53L7CX_Probe+0x110>)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if (VL53L7CX_ReadID(&(VL53L7CXObj[Instance]), &id) != VL53L7CX_OK)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f44f 622e 	mov.w	r2, #2784	@ 0xae0
 8001556:	fb02 f303 	mul.w	r3, r2, r3
 800155a:	4a25      	ldr	r2, [pc, #148]	@ (80015f0 <VL53L7CX_Probe+0x104>)
 800155c:	4413      	add	r3, r2
 800155e:	f107 0208 	add.w	r2, r7, #8
 8001562:	4611      	mov	r1, r2
 8001564:	4618      	mov	r0, r3
 8001566:	f000 f9a6 	bl	80018b6 <VL53L7CX_ReadID>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d003      	beq.n	8001578 <VL53L7CX_Probe+0x8c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8001570:	f06f 0304 	mvn.w	r3, #4
 8001574:	627b      	str	r3, [r7, #36]	@ 0x24
 8001576:	e02b      	b.n	80015d0 <VL53L7CX_Probe+0xe4>
    }
    else if (id != VL53L7CX_ID)
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	f24f 0202 	movw	r2, #61442	@ 0xf002
 800157e:	4293      	cmp	r3, r2
 8001580:	d003      	beq.n	800158a <VL53L7CX_Probe+0x9e>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8001582:	f06f 0306 	mvn.w	r3, #6
 8001586:	627b      	str	r3, [r7, #36]	@ 0x24
 8001588:	e022      	b.n	80015d0 <VL53L7CX_Probe+0xe4>
    }
    else if (VL53L7A1_RANGING_SENSOR_Drv->Init(VL53L7A1_RANGING_SENSOR_CompObj[Instance]) != VL53L7CX_OK)
 800158a:	4b1a      	ldr	r3, [pc, #104]	@ (80015f4 <VL53L7CX_Probe+0x108>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	491a      	ldr	r1, [pc, #104]	@ (80015fc <VL53L7CX_Probe+0x110>)
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001598:	4610      	mov	r0, r2
 800159a:	4798      	blx	r3
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <VL53L7CX_Probe+0xbe>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80015a2:	f06f 0304 	mvn.w	r3, #4
 80015a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80015a8:	e012      	b.n	80015d0 <VL53L7CX_Probe+0xe4>
    }
    else if (VL53L7A1_RANGING_SENSOR_Drv->GetCapabilities(VL53L7A1_RANGING_SENSOR_CompObj[Instance],
 80015aa:	4b12      	ldr	r3, [pc, #72]	@ (80015f4 <VL53L7CX_Probe+0x108>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	4912      	ldr	r1, [pc, #72]	@ (80015fc <VL53L7CX_Probe+0x110>)
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80015b8:	4911      	ldr	r1, [pc, #68]	@ (8001600 <VL53L7CX_Probe+0x114>)
 80015ba:	4610      	mov	r0, r2
 80015bc:	4798      	blx	r3
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <VL53L7CX_Probe+0xe0>
                                                          &VL53L7A1_RANGING_SENSOR_Cap) != VL53L7CX_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80015c4:	f06f 0304 	mvn.w	r3, #4
 80015c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80015ca:	e001      	b.n	80015d0 <VL53L7CX_Probe+0xe4>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }

  return ret;
 80015d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3728      	adds	r7, #40	@ 0x28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	08000edd 	.word	0x08000edd
 80015e0:	08000f41 	.word	0x08000f41
 80015e4:	08000f91 	.word	0x08000f91
 80015e8:	08000ff5 	.word	0x08000ff5
 80015ec:	08001059 	.word	0x08001059
 80015f0:	200006bc 	.word	0x200006bc
 80015f4:	200006a8 	.word	0x200006a8
 80015f8:	20000008 	.word	0x20000008
 80015fc:	2000069c 	.word	0x2000069c
 8001600:	200006ac 	.word	0x200006ac

08001604 <VL53L7CX_RdByte>:

uint8_t VL53L7CX_RdByte(
		VL53L7CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	460b      	mov	r3, r1
 800160e:	607a      	str	r2, [r7, #4]
 8001610:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_value, 1U);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	689c      	ldr	r4, [r3, #8]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	8818      	ldrh	r0, [r3, #0]
 800161a:	8979      	ldrh	r1, [r7, #10]
 800161c:	2301      	movs	r3, #1
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	47a0      	blx	r4
 8001622:	4603      	mov	r3, r0
 8001624:	b2db      	uxtb	r3, r3
}
 8001626:	4618      	mov	r0, r3
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	bd90      	pop	{r4, r7, pc}

0800162e <VL53L7CX_WrByte>:

uint8_t VL53L7CX_WrByte(
		VL53L7CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 800162e:	b590      	push	{r4, r7, lr}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	460b      	mov	r3, r1
 8001638:	807b      	strh	r3, [r7, #2]
 800163a:	4613      	mov	r3, r2
 800163c:	707b      	strb	r3, [r7, #1]
  return p_platform->Write(p_platform->address, RegisterAdress, &value, 1U);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685c      	ldr	r4, [r3, #4]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	8818      	ldrh	r0, [r3, #0]
 8001646:	1c7a      	adds	r2, r7, #1
 8001648:	8879      	ldrh	r1, [r7, #2]
 800164a:	2301      	movs	r3, #1
 800164c:	47a0      	blx	r4
 800164e:	4603      	mov	r3, r0
 8001650:	b2db      	uxtb	r3, r3
}
 8001652:	4618      	mov	r0, r3
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	bd90      	pop	{r4, r7, pc}

0800165a <VL53L7CX_WrMulti>:
uint8_t VL53L7CX_WrMulti(
		VL53L7CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 800165a:	b590      	push	{r4, r7, lr}
 800165c:	b085      	sub	sp, #20
 800165e:	af00      	add	r7, sp, #0
 8001660:	60f8      	str	r0, [r7, #12]
 8001662:	607a      	str	r2, [r7, #4]
 8001664:	603b      	str	r3, [r7, #0]
 8001666:	460b      	mov	r3, r1
 8001668:	817b      	strh	r3, [r7, #10]
  return p_platform->Write(p_platform->address, RegisterAdress, p_values, size);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	685c      	ldr	r4, [r3, #4]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	8818      	ldrh	r0, [r3, #0]
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	b29b      	uxth	r3, r3
 8001676:	8979      	ldrh	r1, [r7, #10]
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	47a0      	blx	r4
 800167c:	4603      	mov	r3, r0
 800167e:	b2db      	uxtb	r3, r3
}
 8001680:	4618      	mov	r0, r3
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	bd90      	pop	{r4, r7, pc}

08001688 <VL53L7CX_RdMulti>:
uint8_t VL53L7CX_RdMulti(
		VL53L7CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8001688:	b590      	push	{r4, r7, lr}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	607a      	str	r2, [r7, #4]
 8001692:	603b      	str	r3, [r7, #0]
 8001694:	460b      	mov	r3, r1
 8001696:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_values, size);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	689c      	ldr	r4, [r3, #8]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	8818      	ldrh	r0, [r3, #0]
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	8979      	ldrh	r1, [r7, #10]
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	47a0      	blx	r4
 80016aa:	4603      	mov	r3, r0
 80016ac:	b2db      	uxtb	r3, r3
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd90      	pop	{r4, r7, pc}

080016b6 <VL53L7CX_SwapBuffer>:

void VL53L7CX_SwapBuffer(
    uint8_t     *buffer,
    uint16_t     size)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b085      	sub	sp, #20
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
 80016be:	460b      	mov	r3, r1
 80016c0:	807b      	strh	r3, [r7, #2]
  uint32_t i, tmp;

  /* Example of possible implementation using <string.h> */
  for(i = 0; i < size; i = i + 4)
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	e021      	b.n	800170c <VL53L7CX_SwapBuffer+0x56>
  {
    tmp = (
      buffer[i]<<24)
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	4413      	add	r3, r2
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	061a      	lsls	r2, r3, #24
    |(buffer[i+1]<<16)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	3301      	adds	r3, #1
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	440b      	add	r3, r1
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	041b      	lsls	r3, r3, #16
 80016de:	431a      	orrs	r2, r3
    |(buffer[i+2]<<8)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	3302      	adds	r3, #2
 80016e4:	6879      	ldr	r1, [r7, #4]
 80016e6:	440b      	add	r3, r1
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	021b      	lsls	r3, r3, #8
 80016ec:	4313      	orrs	r3, r2
    |(buffer[i+3]);
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	3203      	adds	r2, #3
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	440a      	add	r2, r1
 80016f6:	7812      	ldrb	r2, [r2, #0]
 80016f8:	4313      	orrs	r3, r2
    tmp = (
 80016fa:	60bb      	str	r3, [r7, #8]

    memcpy(&(buffer[i]), &tmp, 4);
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4413      	add	r3, r2
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	601a      	str	r2, [r3, #0]
  for(i = 0; i < size; i = i + 4)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	3304      	adds	r3, #4
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	887b      	ldrh	r3, [r7, #2]
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	429a      	cmp	r2, r3
 8001712:	d3d9      	bcc.n	80016c8 <VL53L7CX_SwapBuffer+0x12>
  }
}
 8001714:	bf00      	nop
 8001716:	bf00      	nop
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <VL53L7CX_WaitMs>:

uint8_t VL53L7CX_WaitMs(
		VL53L7CX_Platform *p_platform,
		uint32_t TimeMs)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b084      	sub	sp, #16
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
 800172a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = p_platform->GetTick();
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	4798      	blx	r3
 8001732:	4603      	mov	r3, r0
 8001734:	60fb      	str	r3, [r7, #12]

  while ((p_platform->GetTick() - tickstart) < TimeMs);
 8001736:	bf00      	nop
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	4798      	blx	r3
 800173e:	4603      	mov	r3, r0
 8001740:	461a      	mov	r2, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	429a      	cmp	r2, r3
 800174a:	d8f5      	bhi.n	8001738 <VL53L7CX_WaitMs+0x16>

  return 0;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <VL53L7CX_RegisterBusIO>:
  * @param pObj    vl53l7cx context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_RegisterBusIO(VL53L7CX_Object_t *pObj, VL53L7CX_IO_t *pIO)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b084      	sub	sp, #16
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
 800175e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pIO == NULL))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d002      	beq.n	800176c <VL53L7CX_RegisterBusIO+0x16>
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d103      	bne.n	8001774 <VL53L7CX_RegisterBusIO+0x1e>
  {
    ret = VL53L7CX_INVALID_PARAM;
 800176c:	f06f 0301 	mvn.w	r3, #1
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	e033      	b.n	80017dc <VL53L7CX_RegisterBusIO+0x86>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	891a      	ldrh	r2, [r3, #8]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	68da      	ldr	r2, [r3, #12]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	691a      	ldr	r2, [r3, #16]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	695a      	ldr	r2, [r3, #20]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	615a      	str	r2, [r3, #20]

    /* fill vl53l7cx platform structure */
    pObj->Dev.platform.address = pIO->Address;
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	891a      	ldrh	r2, [r3, #8]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	831a      	strh	r2, [r3, #24]
    pObj->Dev.platform.Read = pIO->ReadReg;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	691a      	ldr	r2, [r3, #16]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	621a      	str	r2, [r3, #32]
    pObj->Dev.platform.Write = pIO->WriteReg;
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	68da      	ldr	r2, [r3, #12]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	61da      	str	r2, [r3, #28]
    pObj->Dev.platform.GetTick = pIO->GetTick;
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	695a      	ldr	r2, [r3, #20]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	625a      	str	r2, [r3, #36]	@ 0x24

    if (pObj->IO.Init != NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d004      	beq.n	80017d6 <VL53L7CX_RegisterBusIO+0x80>
    {
      ret = pObj->IO.Init();
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4798      	blx	r3
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	e002      	b.n	80017dc <VL53L7CX_RegisterBusIO+0x86>
    }
    else
    {
      ret = VL53L7CX_ERROR;
 80017d6:	f04f 33ff 	mov.w	r3, #4294967295
 80017da:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80017dc:	68fb      	ldr	r3, [r7, #12]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <VL53L7CX_Init>:
  * @brief Initializes the vl53l7cx.
  * @param pObj    vl53l7cx context object.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_Init(VL53L7CX_Object_t *pObj)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b084      	sub	sp, #16
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d103      	bne.n	80017fc <VL53L7CX_Init+0x16>
  {
    ret = VL53L7CX_INVALID_PARAM;
 80017f4:	f06f 0301 	mvn.w	r3, #1
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	e02e      	b.n	800185a <VL53L7CX_Init+0x74>
  }
  else if (pObj->IsInitialized != 0U)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f893 3ad8 	ldrb.w	r3, [r3, #2776]	@ 0xad8
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <VL53L7CX_Init+0x28>
  {
    ret =  VL53L7CX_ERROR;
 8001806:	f04f 33ff 	mov.w	r3, #4294967295
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	e025      	b.n	800185a <VL53L7CX_Init+0x74>
  }
  else if (vl53l7cx_init(&pObj->Dev) != VL53L7CX_STATUS_OK)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3318      	adds	r3, #24
 8001812:	4618      	mov	r0, r3
 8001814:	f001 f876 	bl	8002904 <vl53l7cx_init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <VL53L7CX_Init+0x40>
  {
    ret = VL53L7CX_ERROR;
 800181e:	f04f 33ff 	mov.w	r3, #4294967295
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	e019      	b.n	800185a <VL53L7CX_Init+0x74>
  }
  else
  {
    pObj->IsRanging = 0U;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2ad9 	strb.w	r2, [r3, #2777]	@ 0xad9
    pObj->IsBlocking = 0U;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2ada 	strb.w	r2, [r3, #2778]	@ 0xada
    pObj->IsContinuous = 0U;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2adb 	strb.w	r2, [r3, #2779]	@ 0xadb
    pObj->IsAmbientEnabled = 0U;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 2adc 	strb.w	r2, [r3, #2780]	@ 0xadc
    pObj->IsSignalEnabled = 0U;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 2add 	strb.w	r2, [r3, #2781]	@ 0xadd
    pObj->IsInitialized = 1U;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 2ad8 	strb.w	r2, [r3, #2776]	@ 0xad8
    ret = VL53L7CX_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800185a:	68fb      	ldr	r3, [r7, #12]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <VL53L7CX_DeInit>:
  * @brief Deinitializes the vl53l7cx.
  * @param pObj    vl53l7cx context object.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_DeInit(VL53L7CX_Object_t *pObj)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d103      	bne.n	800187a <VL53L7CX_DeInit+0x16>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8001872:	f06f 0301 	mvn.w	r3, #1
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	e018      	b.n	80018ac <VL53L7CX_DeInit+0x48>
  }
  else if (pObj->IsInitialized == 1U)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 3ad8 	ldrb.w	r3, [r3, #2776]	@ 0xad8
 8001880:	2b01      	cmp	r3, #1
 8001882:	d110      	bne.n	80018a6 <VL53L7CX_DeInit+0x42>
  {
    /* De-initialize the vl53l7cx interface */
    if (pObj->IO.DeInit() != 0)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	4798      	blx	r3
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <VL53L7CX_DeInit+0x34>
    {
      ret = VL53L7CX_ERROR;
 8001890:	f04f 33ff 	mov.w	r3, #4294967295
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	e009      	b.n	80018ac <VL53L7CX_DeInit+0x48>
    }
    else
    {
      ret = VL53L7CX_OK;
 8001898:	2300      	movs	r3, #0
 800189a:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2ad8 	strb.w	r2, [r3, #2776]	@ 0xad8
 80018a4:	e002      	b.n	80018ac <VL53L7CX_DeInit+0x48>
    }
  }
  else
  {
    /* if device not initialized return error */
    ret = VL53L7CX_ERROR;
 80018a6:	f04f 33ff 	mov.w	r3, #4294967295
 80018aa:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80018ac:	68fb      	ldr	r3, [r7, #12]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <VL53L7CX_ReadID>:
  * @param pObj    vl53l7cx context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_ReadID(VL53L7CX_Object_t *pObj, uint32_t *pId)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b084      	sub	sp, #16
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
 80018be:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t device_id = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	72bb      	strb	r3, [r7, #10]
  uint8_t revision_id = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	727b      	strb	r3, [r7, #9]
  uint8_t status = VL53L7CX_STATUS_OK;
 80018c8:	2300      	movs	r3, #0
 80018ca:	72fb      	strb	r3, [r7, #11]

  if ((pObj == NULL) || (pId == NULL))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d002      	beq.n	80018d8 <VL53L7CX_ReadID+0x22>
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d103      	bne.n	80018e0 <VL53L7CX_ReadID+0x2a>
  {
    ret = VL53L7CX_INVALID_PARAM;
 80018d8:	f06f 0301 	mvn.w	r3, #1
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	e045      	b.n	800196c <VL53L7CX_ReadID+0xb6>
  }
  else
  {
    status |= VL53L7CX_WrByte(&pObj->Dev.platform, 0x7fff, 0x00);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3318      	adds	r3, #24
 80018e4:	2200      	movs	r2, #0
 80018e6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff fe9f 	bl	800162e <VL53L7CX_WrByte>
 80018f0:	4603      	mov	r3, r0
 80018f2:	461a      	mov	r2, r3
 80018f4:	7afb      	ldrb	r3, [r7, #11]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	72fb      	strb	r3, [r7, #11]
    status |= VL53L7CX_RdByte(&pObj->Dev.platform, 0, &device_id);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	3318      	adds	r3, #24
 80018fe:	f107 020a 	add.w	r2, r7, #10
 8001902:	2100      	movs	r1, #0
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fe7d 	bl	8001604 <VL53L7CX_RdByte>
 800190a:	4603      	mov	r3, r0
 800190c:	461a      	mov	r2, r3
 800190e:	7afb      	ldrb	r3, [r7, #11]
 8001910:	4313      	orrs	r3, r2
 8001912:	72fb      	strb	r3, [r7, #11]
    status |= VL53L7CX_RdByte(&pObj->Dev.platform, 1, &revision_id);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3318      	adds	r3, #24
 8001918:	f107 0209 	add.w	r2, r7, #9
 800191c:	2101      	movs	r1, #1
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff fe70 	bl	8001604 <VL53L7CX_RdByte>
 8001924:	4603      	mov	r3, r0
 8001926:	461a      	mov	r2, r3
 8001928:	7afb      	ldrb	r3, [r7, #11]
 800192a:	4313      	orrs	r3, r2
 800192c:	72fb      	strb	r3, [r7, #11]
    status |= VL53L7CX_WrByte(&pObj->Dev.platform, 0x7fff, 0x02);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	3318      	adds	r3, #24
 8001932:	2202      	movs	r2, #2
 8001934:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fe78 	bl	800162e <VL53L7CX_WrByte>
 800193e:	4603      	mov	r3, r0
 8001940:	461a      	mov	r2, r3
 8001942:	7afb      	ldrb	r3, [r7, #11]
 8001944:	4313      	orrs	r3, r2
 8001946:	72fb      	strb	r3, [r7, #11]

    if (status == 0U)
 8001948:	7afb      	ldrb	r3, [r7, #11]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d108      	bne.n	8001960 <VL53L7CX_ReadID+0xaa>
    {
      *pId = ((uint32_t)device_id << 8) + revision_id;
 800194e:	7abb      	ldrb	r3, [r7, #10]
 8001950:	021b      	lsls	r3, r3, #8
 8001952:	7a7a      	ldrb	r2, [r7, #9]
 8001954:	441a      	add	r2, r3
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	601a      	str	r2, [r3, #0]
      ret = VL53L7CX_OK;
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	e005      	b.n	800196c <VL53L7CX_ReadID+0xb6>
    }
    else
    {
      *pId = 0;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
      ret = VL53L7CX_ERROR;
 8001966:	f04f 33ff 	mov.w	r3, #4294967295
 800196a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800196c:	68fb      	ldr	r3, [r7, #12]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <VL53L7CX_GetCapabilities>:
  * @param pObj    vl53l7cx context object.
  * @param pCap    Pointer to the vl53l7cx capabilities.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_GetCapabilities(VL53L7CX_Object_t *pObj, VL53L7CX_Capabilities_t *pCap)
{
 8001976:	b480      	push	{r7}
 8001978:	b085      	sub	sp, #20
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d002      	beq.n	800198c <VL53L7CX_GetCapabilities+0x16>
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d103      	bne.n	8001994 <VL53L7CX_GetCapabilities+0x1e>
  {
    ret = VL53L7CX_INVALID_PARAM;
 800198c:	f06f 0301 	mvn.w	r3, #1
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	e00d      	b.n	80019b0 <VL53L7CX_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = VL53L7CX_RESOLUTION_8X8;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	2240      	movs	r2, #64	@ 0x40
 8001998:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L7CX_TARGET_PER_ZONE;
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	2201      	movs	r2, #1
 800199e:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 0;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 1;
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	2201      	movs	r2, #1
 80019aa:	60da      	str	r2, [r3, #12]

    ret = VL53L7CX_OK;
 80019ac:	2300      	movs	r3, #0
 80019ae:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80019b0:	68fb      	ldr	r3, [r7, #12]
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3714      	adds	r7, #20
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
	...

080019c0 <VL53L7CX_ConfigProfile>:
  * @param pObj    vl53l7cx context object.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_ConfigProfile(VL53L7CX_Object_t *pObj, VL53L7CX_ProfileConfig_t *pConfig)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  int32_t ret = VL53L7CX_OK;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
  uint8_t resolution;
  uint8_t ranging_mode;
  uint8_t ranging_frequency;
  uint32_t integration_time;

  if ((pObj != NULL) && (pConfig != NULL))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d01b      	beq.n	8001a0c <VL53L7CX_ConfigProfile+0x4c>
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d018      	beq.n	8001a0c <VL53L7CX_ConfigProfile+0x4c>
  {
    profile = pConfig->RangingProfile;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	747b      	strb	r3, [r7, #17]
    integration_time = pConfig->TimingBudget;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	60fb      	str	r3, [r7, #12]
    ranging_frequency = (uint8_t)pConfig->Frequency;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L7CX_INVALID_PARAM;
  }

  switch (profile)
 80019ec:	7c7b      	ldrb	r3, [r7, #17]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	2b03      	cmp	r3, #3
 80019f2:	d822      	bhi.n	8001a3a <VL53L7CX_ConfigProfile+0x7a>
 80019f4:	a201      	add	r2, pc, #4	@ (adr r2, 80019fc <VL53L7CX_ConfigProfile+0x3c>)
 80019f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019fa:	bf00      	nop
 80019fc:	08001a13 	.word	0x08001a13
 8001a00:	08001a1d 	.word	0x08001a1d
 8001a04:	08001a27 	.word	0x08001a27
 8001a08:	08001a31 	.word	0x08001a31
    return VL53L7CX_INVALID_PARAM;
 8001a0c:	f06f 0301 	mvn.w	r3, #1
 8001a10:	e070      	b.n	8001af4 <VL53L7CX_ConfigProfile+0x134>
  {
  case VL53L7CX_PROFILE_4x4_CONTINUOUS:
    resolution = VL53L7CX_RESOLUTION_4X4;
 8001a12:	2310      	movs	r3, #16
 8001a14:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L7CX_RANGING_MODE_CONTINUOUS;
 8001a16:	2301      	movs	r3, #1
 8001a18:	74bb      	strb	r3, [r7, #18]
    break;
 8001a1a:	e016      	b.n	8001a4a <VL53L7CX_ConfigProfile+0x8a>
  case VL53L7CX_PROFILE_4x4_AUTONOMOUS:
    resolution = VL53L7CX_RESOLUTION_4X4;
 8001a1c:	2310      	movs	r3, #16
 8001a1e:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L7CX_RANGING_MODE_AUTONOMOUS;
 8001a20:	2303      	movs	r3, #3
 8001a22:	74bb      	strb	r3, [r7, #18]
    break;
 8001a24:	e011      	b.n	8001a4a <VL53L7CX_ConfigProfile+0x8a>
  case VL53L7CX_PROFILE_8x8_CONTINUOUS:
    resolution = VL53L7CX_RESOLUTION_8X8;
 8001a26:	2340      	movs	r3, #64	@ 0x40
 8001a28:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L7CX_RANGING_MODE_CONTINUOUS;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	74bb      	strb	r3, [r7, #18]
    break;
 8001a2e:	e00c      	b.n	8001a4a <VL53L7CX_ConfigProfile+0x8a>
  case VL53L7CX_PROFILE_8x8_AUTONOMOUS:
    resolution = VL53L7CX_RESOLUTION_8X8;
 8001a30:	2340      	movs	r3, #64	@ 0x40
 8001a32:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L7CX_RANGING_MODE_AUTONOMOUS;
 8001a34:	2303      	movs	r3, #3
 8001a36:	74bb      	strb	r3, [r7, #18]
    break;
 8001a38:	e007      	b.n	8001a4a <VL53L7CX_ConfigProfile+0x8a>
  default:
    resolution = 0; /* silence MISRA rule 1.3 warning */
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	74fb      	strb	r3, [r7, #19]
    ranging_mode = 0; /* silence MISRA rule 1.3 warning */
 8001a3e:	2300      	movs	r3, #0
 8001a40:	74bb      	strb	r3, [r7, #18]
    ret = VL53L7CX_INVALID_PARAM;
 8001a42:	f06f 0301 	mvn.w	r3, #1
 8001a46:	617b      	str	r3, [r7, #20]
    break;
 8001a48:	bf00      	nop
  }

  if (ret != VL53L7CX_OK)
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <VL53L7CX_ConfigProfile+0x94>
  {
    return ret;
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	e04f      	b.n	8001af4 <VL53L7CX_ConfigProfile+0x134>
  }
  else if (vl53l7cx_set_resolution(&pObj->Dev, resolution) != VL53L7CX_STATUS_OK)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3318      	adds	r3, #24
 8001a58:	7cfa      	ldrb	r2, [r7, #19]
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f002 f98e 	bl	8003d7e <vl53l7cx_set_resolution>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <VL53L7CX_ConfigProfile+0xb0>
  {
    ret = VL53L7CX_ERROR;
 8001a68:	f04f 33ff 	mov.w	r3, #4294967295
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	e040      	b.n	8001af2 <VL53L7CX_ConfigProfile+0x132>
  }
  else if (vl53l7cx_set_ranging_mode(&pObj->Dev, ranging_mode) != VL53L7CX_STATUS_OK)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3318      	adds	r3, #24
 8001a74:	7cba      	ldrb	r2, [r7, #18]
 8001a76:	4611      	mov	r1, r2
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f002 faaa 	bl	8003fd2 <vl53l7cx_set_ranging_mode>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <VL53L7CX_ConfigProfile+0xcc>
  {
    ret = VL53L7CX_ERROR;
 8001a84:	f04f 33ff 	mov.w	r3, #4294967295
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	e032      	b.n	8001af2 <VL53L7CX_ConfigProfile+0x132>
  }
  else if (vl53l7cx_set_integration_time_ms(&pObj->Dev, integration_time) != VL53L7CX_STATUS_OK)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3318      	adds	r3, #24
 8001a90:	68f9      	ldr	r1, [r7, #12]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f002 fa68 	bl	8003f68 <vl53l7cx_set_integration_time_ms>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <VL53L7CX_ConfigProfile+0xe6>
  {
    ret = VL53L7CX_ERROR;
 8001a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	e025      	b.n	8001af2 <VL53L7CX_ConfigProfile+0x132>
  }
  else if (vl53l7cx_set_ranging_frequency_hz(&pObj->Dev, ranging_frequency) != VL53L7CX_STATUS_OK)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	3318      	adds	r3, #24
 8001aaa:	7afa      	ldrb	r2, [r7, #11]
 8001aac:	4611      	mov	r1, r2
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f002 fa39 	bl	8003f26 <vl53l7cx_set_ranging_frequency_hz>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <VL53L7CX_ConfigProfile+0x102>
  {
    ret = VL53L7CX_ERROR;
 8001aba:	f04f 33ff 	mov.w	r3, #4294967295
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	e017      	b.n	8001af2 <VL53L7CX_ConfigProfile+0x132>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	bf14      	ite	ne
 8001aca:	2301      	movne	r3, #1
 8001acc:	2300      	moveq	r3, #0
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f883 2adc 	strb.w	r2, [r3, #2780]	@ 0xadc
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	bf14      	ite	ne
 8001ae0:	2301      	movne	r3, #1
 8001ae2:	2300      	moveq	r3, #0
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f883 2add 	strb.w	r2, [r3, #2781]	@ 0xadd

    ret = VL53L7CX_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8001af2:	697b      	ldr	r3, [r7, #20]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <VL53L7CX_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note This device does not support this function.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_ConfigROI(VL53L7CX_Object_t *pObj, VL53L7CX_ROIConfig_t *pROIConfig)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pROIConfig);
  return VL53L7CX_NOT_IMPLEMENTED;
 8001b06:	f06f 0303 	mvn.w	r3, #3
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
	...

08001b18 <VL53L7CX_ConfigIT>:
  * @param pObj    vl53l7cx context object.
  * @param pITConfig    Pointer to the IT configuration struct.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_ConfigIT(VL53L7CX_Object_t *pObj, VL53L7CX_ITConfig_t *pITConfig)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t i;
  uint8_t res; /* current resolution */
  uint8_t status = 0U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	72bb      	strb	r3, [r7, #10]
  static VL53L7CX_DetectionThresholds thresholds[VL53L7CX_NB_THRESHOLDS];

  if ((pObj == NULL) || (pITConfig == NULL))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d002      	beq.n	8001b32 <VL53L7CX_ConfigIT+0x1a>
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d103      	bne.n	8001b3a <VL53L7CX_ConfigIT+0x22>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8001b32:	f06f 0301 	mvn.w	r3, #1
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	e09f      	b.n	8001c7a <VL53L7CX_ConfigIT+0x162>
  }
  else if (pITConfig->Criteria == VL53L7CX_IT_DEFAULT)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2bff      	cmp	r3, #255	@ 0xff
 8001b40:	d113      	bne.n	8001b6a <VL53L7CX_ConfigIT+0x52>
  {
    /* disable thresholds detection */
    status |= vl53l7cx_set_detection_thresholds_enable(&pObj->Dev, 0U);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	3318      	adds	r3, #24
 8001b46:	2100      	movs	r1, #0
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f002 fbed 	bl	8004328 <vl53l7cx_set_detection_thresholds_enable>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	461a      	mov	r2, r3
 8001b52:	7abb      	ldrb	r3, [r7, #10]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	72bb      	strb	r3, [r7, #10]
    ret = (status != 0U) ? VL53L7CX_ERROR : VL53L7CX_OK;
 8001b58:	7abb      	ldrb	r3, [r7, #10]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d002      	beq.n	8001b64 <VL53L7CX_ConfigIT+0x4c>
 8001b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b62:	e000      	b.n	8001b66 <VL53L7CX_ConfigIT+0x4e>
 8001b64:	2300      	movs	r3, #0
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	e087      	b.n	8001c7a <VL53L7CX_ConfigIT+0x162>
  }
  else
  {
    (void)vl53l7cx_get_resolution(&pObj->Dev, &res);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3318      	adds	r3, #24
 8001b6e:	f107 0209 	add.w	r2, r7, #9
 8001b72:	4611      	mov	r1, r2
 8001b74:	4618      	mov	r0, r3
 8001b76:	f002 f8dd 	bl	8003d34 <vl53l7cx_get_resolution>

    /* configure thresholds on each active zone */
    for (i = 0; i < res; i++)
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	72fb      	strb	r3, [r7, #11]
 8001b7e:	e044      	b.n	8001c0a <VL53L7CX_ConfigIT+0xf2>
    {
      thresholds[i].zone_num = i;
 8001b80:	7afa      	ldrb	r2, [r7, #11]
 8001b82:	4940      	ldr	r1, [pc, #256]	@ (8001c84 <VL53L7CX_ConfigIT+0x16c>)
 8001b84:	4613      	mov	r3, r2
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	4413      	add	r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	440b      	add	r3, r1
 8001b8e:	330a      	adds	r3, #10
 8001b90:	7afa      	ldrb	r2, [r7, #11]
 8001b92:	701a      	strb	r2, [r3, #0]
      thresholds[i].measurement = VL53L7CX_DISTANCE_MM;
 8001b94:	7afa      	ldrb	r2, [r7, #11]
 8001b96:	493b      	ldr	r1, [pc, #236]	@ (8001c84 <VL53L7CX_ConfigIT+0x16c>)
 8001b98:	4613      	mov	r3, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	4413      	add	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	3308      	adds	r3, #8
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	701a      	strb	r2, [r3, #0]
      thresholds[i].type = (uint8_t)pITConfig->Criteria;
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	7afa      	ldrb	r2, [r7, #11]
 8001bae:	b2d8      	uxtb	r0, r3
 8001bb0:	4934      	ldr	r1, [pc, #208]	@ (8001c84 <VL53L7CX_ConfigIT+0x16c>)
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	4413      	add	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	440b      	add	r3, r1
 8001bbc:	3309      	adds	r3, #9
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	701a      	strb	r2, [r3, #0]
      thresholds[i].mathematic_operation = VL53L7CX_OPERATION_NONE;
 8001bc2:	7afa      	ldrb	r2, [r7, #11]
 8001bc4:	492f      	ldr	r1, [pc, #188]	@ (8001c84 <VL53L7CX_ConfigIT+0x16c>)
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	4413      	add	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	440b      	add	r3, r1
 8001bd0:	330b      	adds	r3, #11
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	701a      	strb	r2, [r3, #0]
      thresholds[i].param_low_thresh = (int32_t)pITConfig->LowThreshold;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	7afa      	ldrb	r2, [r7, #11]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	4929      	ldr	r1, [pc, #164]	@ (8001c84 <VL53L7CX_ConfigIT+0x16c>)
 8001be0:	4613      	mov	r3, r2
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	4413      	add	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	440b      	add	r3, r1
 8001bea:	6018      	str	r0, [r3, #0]
      thresholds[i].param_high_thresh = (int32_t)pITConfig->HighThreshold;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	7afa      	ldrb	r2, [r7, #11]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	4923      	ldr	r1, [pc, #140]	@ (8001c84 <VL53L7CX_ConfigIT+0x16c>)
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	4413      	add	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	440b      	add	r3, r1
 8001c00:	3304      	adds	r3, #4
 8001c02:	6018      	str	r0, [r3, #0]
    for (i = 0; i < res; i++)
 8001c04:	7afb      	ldrb	r3, [r7, #11]
 8001c06:	3301      	adds	r3, #1
 8001c08:	72fb      	strb	r3, [r7, #11]
 8001c0a:	7a7b      	ldrb	r3, [r7, #9]
 8001c0c:	7afa      	ldrb	r2, [r7, #11]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d3b6      	bcc.n	8001b80 <VL53L7CX_ConfigIT+0x68>
    }

    /* the last threshold must be clearly indicated */
    thresholds[i].zone_num |= VL53L7CX_LAST_THRESHOLD;
 8001c12:	7afa      	ldrb	r2, [r7, #11]
 8001c14:	491b      	ldr	r1, [pc, #108]	@ (8001c84 <VL53L7CX_ConfigIT+0x16c>)
 8001c16:	4613      	mov	r3, r2
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	4413      	add	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	440b      	add	r3, r1
 8001c20:	330a      	adds	r3, #10
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	7afa      	ldrb	r2, [r7, #11]
 8001c26:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001c2a:	b2d8      	uxtb	r0, r3
 8001c2c:	4915      	ldr	r1, [pc, #84]	@ (8001c84 <VL53L7CX_ConfigIT+0x16c>)
 8001c2e:	4613      	mov	r3, r2
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	4413      	add	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	440b      	add	r3, r1
 8001c38:	330a      	adds	r3, #10
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	701a      	strb	r2, [r3, #0]

    /* send array of thresholds to the sensor */
    status |= vl53l7cx_set_detection_thresholds(&pObj->Dev, thresholds);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	3318      	adds	r3, #24
 8001c42:	4910      	ldr	r1, [pc, #64]	@ (8001c84 <VL53L7CX_ConfigIT+0x16c>)
 8001c44:	4618      	mov	r0, r3
 8001c46:	f002 fbb5 	bl	80043b4 <vl53l7cx_set_detection_thresholds>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	7abb      	ldrb	r3, [r7, #10]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	72bb      	strb	r3, [r7, #10]

    /* enable thresholds detection */
    status |= vl53l7cx_set_detection_thresholds_enable(&pObj->Dev, 1U);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3318      	adds	r3, #24
 8001c58:	2101      	movs	r1, #1
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f002 fb64 	bl	8004328 <vl53l7cx_set_detection_thresholds_enable>
 8001c60:	4603      	mov	r3, r0
 8001c62:	461a      	mov	r2, r3
 8001c64:	7abb      	ldrb	r3, [r7, #10]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	72bb      	strb	r3, [r7, #10]

    ret = (status != 0U) ? VL53L7CX_ERROR : VL53L7CX_OK;
 8001c6a:	7abb      	ldrb	r3, [r7, #10]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d002      	beq.n	8001c76 <VL53L7CX_ConfigIT+0x15e>
 8001c70:	f04f 33ff 	mov.w	r3, #4294967295
 8001c74:	e000      	b.n	8001c78 <VL53L7CX_ConfigIT+0x160>
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	2000275c 	.word	0x2000275c

08001c88 <VL53L7CX_GetDistance>:
  * @param pObj    vl53l7cx context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_GetDistance(VL53L7CX_Object_t *pObj, VL53L7CX_Result_t *pResult)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = VL53L7CX_OK;
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
  if ((pObj == NULL) || (pResult == NULL))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d002      	beq.n	8001ca2 <VL53L7CX_GetDistance+0x1a>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d103      	bne.n	8001caa <VL53L7CX_GetDistance+0x22>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8001ca2:	f06f 0301 	mvn.w	r3, #1
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	e007      	b.n	8001cba <VL53L7CX_GetDistance+0x32>
  }
  else if (pObj->IsRanging == 0U)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 3ad9 	ldrb.w	r3, [r3, #2777]	@ 0xad9
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d102      	bne.n	8001cba <VL53L7CX_GetDistance+0x32>
  {
    ret = VL53L7CX_ERROR;
 8001cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb8:	60fb      	str	r3, [r7, #12]
  }
  if (ret == VL53L7CX_OK)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d110      	bne.n	8001ce2 <VL53L7CX_GetDistance+0x5a>
  {
    if (pObj->IsBlocking == 1U)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 3ada 	ldrb.w	r3, [r3, #2778]	@ 0xada
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d106      	bne.n	8001cd8 <VL53L7CX_GetDistance+0x50>
    {
      ret = vl53l7cx_poll_for_measurement(pObj, V53L7CX_POLL_TIMEOUT);
 8001cca:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f939 	bl	8001f46 <vl53l7cx_poll_for_measurement>
 8001cd4:	60f8      	str	r0, [r7, #12]
 8001cd6:	e004      	b.n	8001ce2 <VL53L7CX_GetDistance+0x5a>
    }
    else
    {
      ret = vl53l7cx_poll_for_measurement(pObj, 0U);
 8001cd8:	2100      	movs	r1, #0
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f933 	bl	8001f46 <vl53l7cx_poll_for_measurement>
 8001ce0:	60f8      	str	r0, [r7, #12]
    }
  }

  /* a new measure is available if no error is returned by the poll function */
  if (ret == VL53L7CX_OK)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d104      	bne.n	8001cf2 <VL53L7CX_GetDistance+0x6a>
  {
    ret = vl53l7cx_get_result(pObj, pResult);
 8001ce8:	6839      	ldr	r1, [r7, #0]
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f95e 	bl	8001fac <vl53l7cx_get_result>
 8001cf0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <VL53L7CX_Start>:
  * @param pObj    vl53l7cx context object.
  * @param Mode        The desired @ref RANGING_SENSOR_Mode_t
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_Start(VL53L7CX_Object_t *pObj, uint32_t Mode)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d103      	bne.n	8001d14 <VL53L7CX_Start+0x18>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8001d0c:	f06f 0301 	mvn.w	r3, #1
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	e04c      	b.n	8001dae <VL53L7CX_Start+0xb2>
  }
  else if (vl53l7cx_start_ranging(&pObj->Dev) == VL53L7CX_STATUS_OK)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3318      	adds	r3, #24
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f001 fb57 	bl	80033cc <vl53l7cx_start_ranging>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d141      	bne.n	8001da8 <VL53L7CX_Start+0xac>
  {
    pObj->IsRanging = 1U;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2ad9 	strb.w	r2, [r3, #2777]	@ 0xad9
    ret = VL53L7CX_OK;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]

    switch (Mode)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	2b03      	cmp	r3, #3
 8001d36:	d82f      	bhi.n	8001d98 <VL53L7CX_Start+0x9c>
 8001d38:	a201      	add	r2, pc, #4	@ (adr r2, 8001d40 <VL53L7CX_Start+0x44>)
 8001d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d3e:	bf00      	nop
 8001d40:	08001d51 	.word	0x08001d51
 8001d44:	08001d63 	.word	0x08001d63
 8001d48:	08001d75 	.word	0x08001d75
 8001d4c:	08001d87 	.word	0x08001d87
    {
      case VL53L7CX_MODE_BLOCKING_CONTINUOUS:
        pObj->IsContinuous = 1U;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2adb 	strb.w	r2, [r3, #2779]	@ 0xadb
        pObj->IsBlocking = 1U;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2ada 	strb.w	r2, [r3, #2778]	@ 0xada
        break;
 8001d60:	e025      	b.n	8001dae <VL53L7CX_Start+0xb2>

      case VL53L7CX_MODE_BLOCKING_ONESHOT:
        pObj->IsContinuous = 0U;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2adb 	strb.w	r2, [r3, #2779]	@ 0xadb
        pObj->IsBlocking = 1U;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 2ada 	strb.w	r2, [r3, #2778]	@ 0xada
        break;
 8001d72:	e01c      	b.n	8001dae <VL53L7CX_Start+0xb2>

      case VL53L7CX_MODE_ASYNC_CONTINUOUS:
        pObj->IsContinuous = 1U;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2adb 	strb.w	r2, [r3, #2779]	@ 0xadb
        pObj->IsBlocking = 0U;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2ada 	strb.w	r2, [r3, #2778]	@ 0xada
        break;
 8001d84:	e013      	b.n	8001dae <VL53L7CX_Start+0xb2>

      case VL53L7CX_MODE_ASYNC_ONESHOT:
        pObj->IsContinuous = 0U;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2adb 	strb.w	r2, [r3, #2779]	@ 0xadb
        pObj->IsBlocking = 0U;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2ada 	strb.w	r2, [r3, #2778]	@ 0xada
        break;
 8001d96:	e00a      	b.n	8001dae <VL53L7CX_Start+0xb2>

      default:
        pObj->IsRanging = 0U;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2ad9 	strb.w	r2, [r3, #2777]	@ 0xad9
        ret = VL53L7CX_INVALID_PARAM;
 8001da0:	f06f 0301 	mvn.w	r3, #1
 8001da4:	60fb      	str	r3, [r7, #12]
        break;
 8001da6:	e002      	b.n	8001dae <VL53L7CX_Start+0xb2>
    }
  }
  else
  {
    ret = VL53L7CX_ERROR;
 8001da8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dac:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001dae:	68fb      	ldr	r3, [r7, #12]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <VL53L7CX_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l7cx context object.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_Stop(VL53L7CX_Object_t *pObj)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d103      	bne.n	8001dce <VL53L7CX_Stop+0x16>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8001dc6:	f06f 0301 	mvn.w	r3, #1
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	e01a      	b.n	8001e04 <VL53L7CX_Stop+0x4c>
  }
  else if (pObj->IsRanging == 0U)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 3ad9 	ldrb.w	r3, [r3, #2777]	@ 0xad9
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d103      	bne.n	8001de0 <VL53L7CX_Stop+0x28>
  {
    /* ranging not started */
    ret = VL53L7CX_ERROR;
 8001dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	e011      	b.n	8001e04 <VL53L7CX_Stop+0x4c>
  }
  else if (vl53l7cx_stop_ranging(&pObj->Dev) == VL53L7CX_STATUS_OK)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3318      	adds	r3, #24
 8001de4:	4618      	mov	r0, r3
 8001de6:	f001 fc6b 	bl	80036c0 <vl53l7cx_stop_ranging>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d106      	bne.n	8001dfe <VL53L7CX_Stop+0x46>
  {
    pObj->IsRanging = 0U;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 2ad9 	strb.w	r2, [r3, #2777]	@ 0xad9
    ret = VL53L7CX_OK;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	e002      	b.n	8001e04 <VL53L7CX_Stop+0x4c>
  }
  else
  {
    ret = VL53L7CX_ERROR;
 8001dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001e02:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001e04:	68fb      	ldr	r3, [r7, #12]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <VL53L7CX_SetAddress>:
  * @param pObj    vl53l7cx context object.
  * @param Address     New I2C address.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_SetAddress(VL53L7CX_Object_t *pObj, uint32_t Address)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b084      	sub	sp, #16
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
 8001e16:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d103      	bne.n	8001e26 <VL53L7CX_SetAddress+0x18>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8001e1e:	f06f 0301 	mvn.w	r3, #1
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	e015      	b.n	8001e52 <VL53L7CX_SetAddress+0x44>
  }
  else if (vl53l7cx_set_i2c_address(&pObj->Dev, (uint8_t)Address) != VL53L7CX_STATUS_OK)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	3318      	adds	r3, #24
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	4611      	mov	r1, r2
 8001e30:	4618      	mov	r0, r3
 8001e32:	f001 f9d3 	bl	80031dc <vl53l7cx_set_i2c_address>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <VL53L7CX_SetAddress+0x36>
  {
    ret = VL53L7CX_ERROR;
 8001e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	e006      	b.n	8001e52 <VL53L7CX_SetAddress+0x44>
  }
  else
  {
    pObj->IO.Address = (uint8_t)(Address & 0xFFU);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	461a      	mov	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	811a      	strh	r2, [r3, #8]
    ret = VL53L7CX_OK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001e52:	68fb      	ldr	r3, [r7, #12]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <VL53L7CX_GetAddress>:
  * @param pObj    vl53l7cx context object.
  * @param *pAddress     New I2C address.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_GetAddress(VL53L7CX_Object_t *pObj, uint32_t *pAddress)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d002      	beq.n	8001e72 <VL53L7CX_GetAddress+0x16>
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d103      	bne.n	8001e7a <VL53L7CX_GetAddress+0x1e>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8001e72:	f06f 0301 	mvn.w	r3, #1
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	e006      	b.n	8001e88 <VL53L7CX_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	891b      	ldrh	r3, [r3, #8]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	601a      	str	r2, [r3, #0]
    ret = VL53L7CX_OK;
 8001e84:	2300      	movs	r3, #0
 8001e86:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001e88:	68fb      	ldr	r3, [r7, #12]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <VL53L7CX_SetPowerMode>:
  * @param pObj    vl53l7cx context object.
  * @param PowerMode    New power mode to be entered.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_SetPowerMode(VL53L7CX_Object_t *pObj, uint32_t PowerMode)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b084      	sub	sp, #16
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d103      	bne.n	8001eae <VL53L7CX_SetPowerMode+0x18>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8001ea6:	f06f 0301 	mvn.w	r3, #1
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	e01a      	b.n	8001ee4 <VL53L7CX_SetPowerMode+0x4e>
  }
  else if ((PowerMode != VL53L7CX_POWER_MODE_SLEEP) &&
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d006      	beq.n	8001ec2 <VL53L7CX_SetPowerMode+0x2c>
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d003      	beq.n	8001ec2 <VL53L7CX_SetPowerMode+0x2c>
           (PowerMode != VL53L7CX_POWER_MODE_WAKEUP))
  {
    ret = VL53L7CX_INVALID_PARAM;
 8001eba:	f06f 0301 	mvn.w	r3, #1
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	e010      	b.n	8001ee4 <VL53L7CX_SetPowerMode+0x4e>
  }
  else if (vl53l7cx_set_power_mode(&pObj->Dev, (uint8_t)PowerMode) != VL53L7CX_STATUS_OK)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	3318      	adds	r3, #24
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	4611      	mov	r1, r2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f001 f9fe 	bl	80032ce <vl53l7cx_set_power_mode>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <VL53L7CX_SetPowerMode+0x4a>
  {
    ret = VL53L7CX_ERROR;
 8001ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	e001      	b.n	8001ee4 <VL53L7CX_SetPowerMode+0x4e>
  }
  else
  {
    ret = VL53L7CX_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <VL53L7CX_GetPowerMode>:
  * @param pObj    vl53l7cx context object.
  * @param *pPowerMode    pointer to variable to be filled with power mode value.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_GetPowerMode(VL53L7CX_Object_t *pObj, uint32_t *pPowerMode)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b084      	sub	sp, #16
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
 8001ef6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t powermode;

  if ((pObj == NULL) || (pPowerMode == NULL))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d002      	beq.n	8001f04 <VL53L7CX_GetPowerMode+0x16>
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d103      	bne.n	8001f0c <VL53L7CX_GetPowerMode+0x1e>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8001f04:	f06f 0301 	mvn.w	r3, #1
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	e017      	b.n	8001f3c <VL53L7CX_GetPowerMode+0x4e>
  }
  else if (vl53l7cx_get_power_mode(&pObj->Dev, &powermode) != VL53L7CX_STATUS_OK)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3318      	adds	r3, #24
 8001f10:	f107 020b 	add.w	r2, r7, #11
 8001f14:	4611      	mov	r1, r2
 8001f16:	4618      	mov	r0, r3
 8001f18:	f001 f996 	bl	8003248 <vl53l7cx_get_power_mode>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d006      	beq.n	8001f30 <VL53L7CX_GetPowerMode+0x42>
  {
    *pPowerMode = 0;
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
    ret = VL53L7CX_ERROR;
 8001f28:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	e005      	b.n	8001f3c <VL53L7CX_GetPowerMode+0x4e>
  }
  else
  {
    *pPowerMode = (uint32_t)powermode;
 8001f30:	7afb      	ldrb	r3, [r7, #11]
 8001f32:	461a      	mov	r2, r3
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	601a      	str	r2, [r3, #0]
    ret = VL53L7CX_OK;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <vl53l7cx_poll_for_measurement>:

/** @defgroup VL53L7CX_Private_Functions Private Functions
  * @{
  */
static int32_t vl53l7cx_poll_for_measurement(VL53L7CX_Object_t *pObj, uint32_t Timeout)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b086      	sub	sp, #24
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
 8001f4e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 8001f50:	2300      	movs	r3, #0
 8001f52:	73fb      	strb	r3, [r7, #15]

  if (pObj == NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d103      	bne.n	8001f62 <vl53l7cx_poll_for_measurement+0x1c>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8001f5a:	f06f 0301 	mvn.w	r3, #1
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	e01f      	b.n	8001fa2 <vl53l7cx_poll_for_measurement+0x5c>
  }
  else
  {
    ret =  VL53L7CX_TIMEOUT;
 8001f62:	f06f 0302 	mvn.w	r3, #2
 8001f66:	617b      	str	r3, [r7, #20]
    TickStart = pObj->IO.GetTick();
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	695b      	ldr	r3, [r3, #20]
 8001f6c:	4798      	blx	r3
 8001f6e:	4603      	mov	r3, r0
 8001f70:	613b      	str	r3, [r7, #16]

    do
    {
      (void)vl53l7cx_check_data_ready(&pObj->Dev, &NewDataReady);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3318      	adds	r3, #24
 8001f76:	f107 020f 	add.w	r2, r7, #15
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f001 fc6f 	bl	8003860 <vl53l7cx_check_data_ready>

      if (NewDataReady == 1U)
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d102      	bne.n	8001f8e <vl53l7cx_poll_for_measurement+0x48>
      {
        ret = VL53L7CX_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
        break;
 8001f8c:	e009      	b.n	8001fa2 <vl53l7cx_poll_for_measurement+0x5c>
      }
    } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	4798      	blx	r3
 8001f94:	4603      	mov	r3, r0
 8001f96:	461a      	mov	r2, r3
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d8e7      	bhi.n	8001f72 <vl53l7cx_poll_for_measurement+0x2c>

  }

  return ret;
 8001fa2:	697b      	ldr	r3, [r7, #20]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <vl53l7cx_get_result>:

static int32_t vl53l7cx_get_result(VL53L7CX_Object_t *pObj, VL53L7CX_Result_t *pResult)
{
 8001fac:	b590      	push	{r4, r7, lr}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint8_t resolution;
  uint8_t target_status;
  static VL53L7CX_ResultsData data;

  if ((pObj == NULL) || (pResult == NULL))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d002      	beq.n	8001fc2 <vl53l7cx_get_result+0x16>
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d103      	bne.n	8001fca <vl53l7cx_get_result+0x1e>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8001fc2:	f06f 0301 	mvn.w	r3, #1
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	e0cf      	b.n	800216a <vl53l7cx_get_result+0x1be>
  }
  else if (vl53l7cx_get_resolution(&pObj->Dev, &resolution) != VL53L7CX_STATUS_OK)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	3318      	adds	r3, #24
 8001fce:	f107 0208 	add.w	r2, r7, #8
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f001 fead 	bl	8003d34 <vl53l7cx_get_resolution>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <vl53l7cx_get_result+0x3c>
  {
    ret = VL53L7CX_ERROR;
 8001fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	e0c0      	b.n	800216a <vl53l7cx_get_result+0x1be>
  }
  else if (vl53l7cx_get_ranging_data(&pObj->Dev, &data) != VL53L7CX_STATUS_OK)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3318      	adds	r3, #24
 8001fec:	4961      	ldr	r1, [pc, #388]	@ (8002174 <vl53l7cx_get_result+0x1c8>)
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f001 fc86 	bl	8003900 <vl53l7cx_get_ranging_data>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <vl53l7cx_get_result+0x56>
  {
    ret = VL53L7CX_ERROR;
 8001ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	e0b3      	b.n	800216a <vl53l7cx_get_result+0x1be>
  }
  else
  {
    pResult->NumberOfZones = resolution;
 8002002:	7a3b      	ldrb	r3, [r7, #8]
 8002004:	461a      	mov	r2, r3
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	601a      	str	r2, [r3, #0]

    for (i = 0; i < resolution; i++)
 800200a:	2300      	movs	r3, #0
 800200c:	72fb      	strb	r3, [r7, #11]
 800200e:	e0a5      	b.n	800215c <vl53l7cx_get_result+0x1b0>
    {
      pResult->ZoneResult[i].NumberOfTargets = data.nb_target_detected[i];
 8002010:	7afb      	ldrb	r3, [r7, #11]
 8002012:	7afa      	ldrb	r2, [r7, #11]
 8002014:	4957      	ldr	r1, [pc, #348]	@ (8002174 <vl53l7cx_get_result+0x1c8>)
 8002016:	440b      	add	r3, r1
 8002018:	f893 0104 	ldrb.w	r0, [r3, #260]	@ 0x104
 800201c:	6839      	ldr	r1, [r7, #0]
 800201e:	4613      	mov	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4413      	add	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	440b      	add	r3, r1
 8002028:	3304      	adds	r3, #4
 800202a:	4602      	mov	r2, r0
 800202c:	701a      	strb	r2, [r3, #0]

      for (j = 0; j < data.nb_target_detected[i]; j++)
 800202e:	2300      	movs	r3, #0
 8002030:	72bb      	strb	r3, [r7, #10]
 8002032:	e087      	b.n	8002144 <vl53l7cx_get_result+0x198>
      {
        pResult->ZoneResult[i].Distance[j] = (uint32_t)data.distance_mm[(VL53L7CX_NB_TARGET_PER_ZONE * i) + j];
 8002034:	7afa      	ldrb	r2, [r7, #11]
 8002036:	7abb      	ldrb	r3, [r7, #10]
 8002038:	4413      	add	r3, r2
 800203a:	4a4e      	ldr	r2, [pc, #312]	@ (8002174 <vl53l7cx_get_result+0x1c8>)
 800203c:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	4413      	add	r3, r2
 8002044:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002048:	7afa      	ldrb	r2, [r7, #11]
 800204a:	7ab8      	ldrb	r0, [r7, #10]
 800204c:	461c      	mov	r4, r3
 800204e:	6839      	ldr	r1, [r7, #0]
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	4403      	add	r3, r0
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	440b      	add	r3, r1
 800205c:	609c      	str	r4, [r3, #8]

        /* return Ambient value if ambient rate output is enabled */
        if (pObj->IsAmbientEnabled == 1U)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 3adc 	ldrb.w	r3, [r3, #2780]	@ 0xadc
 8002064:	2b01      	cmp	r3, #1
 8002066:	d116      	bne.n	8002096 <vl53l7cx_get_result+0xea>
        {
          /* apply ambient value to all targets in a given zone */
          pResult->ZoneResult[i].Ambient[j] = (float_t)data.ambient_per_spad[i];
 8002068:	7afb      	ldrb	r3, [r7, #11]
 800206a:	4a42      	ldr	r2, [pc, #264]	@ (8002174 <vl53l7cx_get_result+0x1c8>)
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	7afa      	ldrb	r2, [r7, #11]
 8002074:	7ab8      	ldrb	r0, [r7, #10]
 8002076:	ee07 3a90 	vmov	s15, r3
 800207a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800207e:	6839      	ldr	r1, [r7, #0]
 8002080:	4613      	mov	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	4403      	add	r3, r0
 8002088:	3302      	adds	r3, #2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	440b      	add	r3, r1
 800208e:	3308      	adds	r3, #8
 8002090:	edc3 7a00 	vstr	s15, [r3]
 8002094:	e00d      	b.n	80020b2 <vl53l7cx_get_result+0x106>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 8002096:	7afa      	ldrb	r2, [r7, #11]
 8002098:	7ab8      	ldrb	r0, [r7, #10]
 800209a:	6839      	ldr	r1, [r7, #0]
 800209c:	4613      	mov	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	4403      	add	r3, r0
 80020a4:	3302      	adds	r3, #2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	3308      	adds	r3, #8
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
        }

        /* return Signal value if signal rate output is enabled */
        if (pObj->IsSignalEnabled == 1U)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 3add 	ldrb.w	r3, [r3, #2781]	@ 0xadd
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d119      	bne.n	80020f0 <vl53l7cx_get_result+0x144>
        {
          pResult->ZoneResult[i].Signal[j] =
            (float_t)data.signal_per_spad[(VL53L7CX_NB_TARGET_PER_ZONE * i) + j];
 80020bc:	7afa      	ldrb	r2, [r7, #11]
 80020be:	7abb      	ldrb	r3, [r7, #10]
 80020c0:	4413      	add	r3, r2
 80020c2:	4a2c      	ldr	r2, [pc, #176]	@ (8002174 <vl53l7cx_get_result+0x1c8>)
 80020c4:	3390      	adds	r3, #144	@ 0x90
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	685b      	ldr	r3, [r3, #4]
          pResult->ZoneResult[i].Signal[j] =
 80020cc:	7afa      	ldrb	r2, [r7, #11]
 80020ce:	7ab8      	ldrb	r0, [r7, #10]
            (float_t)data.signal_per_spad[(VL53L7CX_NB_TARGET_PER_ZONE * i) + j];
 80020d0:	ee07 3a90 	vmov	s15, r3
 80020d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
          pResult->ZoneResult[i].Signal[j] =
 80020d8:	6839      	ldr	r1, [r7, #0]
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	4403      	add	r3, r0
 80020e2:	3304      	adds	r3, #4
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	440b      	add	r3, r1
 80020e8:	3304      	adds	r3, #4
 80020ea:	edc3 7a00 	vstr	s15, [r3]
 80020ee:	e00d      	b.n	800210c <vl53l7cx_get_result+0x160>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 80020f0:	7afa      	ldrb	r2, [r7, #11]
 80020f2:	7ab8      	ldrb	r0, [r7, #10]
 80020f4:	6839      	ldr	r1, [r7, #0]
 80020f6:	4613      	mov	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	4403      	add	r3, r0
 80020fe:	3304      	adds	r3, #4
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	440b      	add	r3, r1
 8002104:	3304      	adds	r3, #4
 8002106:	f04f 0200 	mov.w	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
        }

        target_status = data.target_status[(VL53L7CX_NB_TARGET_PER_ZONE * i) + j];
 800210c:	7afa      	ldrb	r2, [r7, #11]
 800210e:	7abb      	ldrb	r3, [r7, #10]
 8002110:	4413      	add	r3, r2
 8002112:	4a18      	ldr	r2, [pc, #96]	@ (8002174 <vl53l7cx_get_result+0x1c8>)
 8002114:	4413      	add	r3, r2
 8002116:	f893 3484 	ldrb.w	r3, [r3, #1156]	@ 0x484
 800211a:	727b      	strb	r3, [r7, #9]
        pResult->ZoneResult[i].Status[j] = vl53l7cx_map_target_status(target_status);
 800211c:	7a7b      	ldrb	r3, [r7, #9]
 800211e:	4618      	mov	r0, r3
 8002120:	f000 f82a 	bl	8002178 <vl53l7cx_map_target_status>
 8002124:	4603      	mov	r3, r0
 8002126:	7afa      	ldrb	r2, [r7, #11]
 8002128:	7ab8      	ldrb	r0, [r7, #10]
 800212a:	461c      	mov	r4, r3
 800212c:	6839      	ldr	r1, [r7, #0]
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	4403      	add	r3, r0
 8002136:	3302      	adds	r3, #2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	440b      	add	r3, r1
 800213c:	605c      	str	r4, [r3, #4]
      for (j = 0; j < data.nb_target_detected[i]; j++)
 800213e:	7abb      	ldrb	r3, [r7, #10]
 8002140:	3301      	adds	r3, #1
 8002142:	72bb      	strb	r3, [r7, #10]
 8002144:	7afb      	ldrb	r3, [r7, #11]
 8002146:	4a0b      	ldr	r2, [pc, #44]	@ (8002174 <vl53l7cx_get_result+0x1c8>)
 8002148:	4413      	add	r3, r2
 800214a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800214e:	7aba      	ldrb	r2, [r7, #10]
 8002150:	429a      	cmp	r2, r3
 8002152:	f4ff af6f 	bcc.w	8002034 <vl53l7cx_get_result+0x88>
    for (i = 0; i < resolution; i++)
 8002156:	7afb      	ldrb	r3, [r7, #11]
 8002158:	3301      	adds	r3, #1
 800215a:	72fb      	strb	r3, [r7, #11]
 800215c:	7a3b      	ldrb	r3, [r7, #8]
 800215e:	7afa      	ldrb	r2, [r7, #11]
 8002160:	429a      	cmp	r2, r3
 8002162:	f4ff af55 	bcc.w	8002010 <vl53l7cx_get_result+0x64>
      }
    }

    ret = VL53L7CX_OK;
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800216a:	68fb      	ldr	r3, [r7, #12]
}
 800216c:	4618      	mov	r0, r3
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	bd90      	pop	{r4, r7, pc}
 8002174:	20002a5c 	.word	0x20002a5c

08002178 <vl53l7cx_map_target_status>:

static uint8_t vl53l7cx_map_target_status(uint8_t status)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	71fb      	strb	r3, [r7, #7]
  uint8_t ret;

  if ((status == 5U) || (status == 9U))
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	2b05      	cmp	r3, #5
 8002186:	d002      	beq.n	800218e <vl53l7cx_map_target_status+0x16>
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	2b09      	cmp	r3, #9
 800218c:	d102      	bne.n	8002194 <vl53l7cx_map_target_status+0x1c>
  {
    ret = 0U; /* ranging is OK */
 800218e:	2300      	movs	r3, #0
 8002190:	73fb      	strb	r3, [r7, #15]
 8002192:	e007      	b.n	80021a4 <vl53l7cx_map_target_status+0x2c>
  }
  else if (status == 0U)
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d102      	bne.n	80021a0 <vl53l7cx_map_target_status+0x28>
  {
    ret = 255U; /* no update */
 800219a:	23ff      	movs	r3, #255	@ 0xff
 800219c:	73fb      	strb	r3, [r7, #15]
 800219e:	e001      	b.n	80021a4 <vl53l7cx_map_target_status+0x2c>
  }
  else
  {
    ret = status; /* return device status otherwise */
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <_vl53l7cx_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b084      	sub	sp, #16
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
 80021ba:	4608      	mov	r0, r1
 80021bc:	4611      	mov	r1, r2
 80021be:	461a      	mov	r2, r3
 80021c0:	4603      	mov	r3, r0
 80021c2:	70fb      	strb	r3, [r7, #3]
 80021c4:	460b      	mov	r3, r1
 80021c6:	70bb      	strb	r3, [r7, #2]
 80021c8:	4613      	mov	r3, r2
 80021ca:	803b      	strh	r3, [r7, #0]
	uint8_t status = VL53L7CX_STATUS_OK;
 80021cc:	2300      	movs	r3, #0
 80021ce:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	73bb      	strb	r3, [r7, #14]

	do {
		status |= VL53L7CX_RdMulti(&(p_dev->platform), address,
 80021d4:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
		status |= VL53L7CX_RdMulti(&(p_dev->platform), address,
 80021dc:	78fb      	ldrb	r3, [r7, #3]
 80021de:	8839      	ldrh	r1, [r7, #0]
 80021e0:	f7ff fa52 	bl	8001688 <VL53L7CX_RdMulti>
 80021e4:	4603      	mov	r3, r0
 80021e6:	461a      	mov	r2, r3
 80021e8:	7bfb      	ldrb	r3, [r7, #15]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	73fb      	strb	r3, [r7, #15]
		status |= VL53L7CX_WaitMs(&(p_dev->platform), 10);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	210a      	movs	r1, #10
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff fa95 	bl	8001722 <VL53L7CX_WaitMs>
 80021f8:	4603      	mov	r3, r0
 80021fa:	461a      	mov	r2, r3
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
 80021fe:	4313      	orrs	r3, r2
 8002200:	73fb      	strb	r3, [r7, #15]

		if(timeout >= (uint8_t)200)	/* 2s timeout */
 8002202:	7bbb      	ldrb	r3, [r7, #14]
 8002204:	2bc7      	cmp	r3, #199	@ 0xc7
 8002206:	d904      	bls.n	8002212 <_vl53l7cx_poll_for_answer+0x60>
		{
			status |= (uint8_t)VL53L7CX_STATUS_TIMEOUT_ERROR;
 8002208:	7bfb      	ldrb	r3, [r7, #15]
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	73fb      	strb	r3, [r7, #15]
			break;
 8002210:	e01a      	b.n	8002248 <_vl53l7cx_poll_for_answer+0x96>
		}else if((size >= (uint8_t)4) 
 8002212:	78fb      	ldrb	r3, [r7, #3]
 8002214:	2b03      	cmp	r3, #3
 8002216:	d909      	bls.n	800222c <_vl53l7cx_poll_for_answer+0x7a>
                         && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 3512 	ldrb.w	r3, [r3, #1298]	@ 0x512
 800221e:	2b7e      	cmp	r3, #126	@ 0x7e
 8002220:	d904      	bls.n	800222c <_vl53l7cx_poll_for_answer+0x7a>
		{
			status |= VL53L7CX_MCU_ERROR;
 8002222:	7bfb      	ldrb	r3, [r7, #15]
 8002224:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8002228:	73fb      	strb	r3, [r7, #15]
			break;
 800222a:	e00d      	b.n	8002248 <_vl53l7cx_poll_for_answer+0x96>
		}
		else
		{
			timeout++;
 800222c:	7bbb      	ldrb	r3, [r7, #14]
 800222e:	3301      	adds	r3, #1
 8002230:	73bb      	strb	r3, [r7, #14]
		}
	}while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 8002232:	78bb      	ldrb	r3, [r7, #2]
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	4413      	add	r3, r2
 8002238:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 800223c:	7e3b      	ldrb	r3, [r7, #24]
 800223e:	4013      	ands	r3, r2
 8002240:	b2db      	uxtb	r3, r3
 8002242:	7f3a      	ldrb	r2, [r7, #28]
 8002244:	429a      	cmp	r2, r3
 8002246:	d1c5      	bne.n	80021d4 <_vl53l7cx_poll_for_answer+0x22>

	return status;
 8002248:	7bfb      	ldrb	r3, [r7, #15]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <_vl53l7cx_poll_for_mcu_boot>:
 * Inner function, not available outside this file. This function is used to
 * wait for the MCU to boot.
 */
static uint8_t _vl53l7cx_poll_for_mcu_boot(
              VL53L7CX_Configuration      *p_dev)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b084      	sub	sp, #16
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
   uint8_t go2_status0, go2_status1, status = VL53L7CX_STATUS_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	73fb      	strb	r3, [r7, #15]
   uint16_t timeout = 0;
 800225e:	2300      	movs	r3, #0
 8002260:	81bb      	strh	r3, [r7, #12]

   do {
		status |= VL53L7CX_RdByte(&(p_dev->platform), 0x06, &go2_status0);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f107 020b 	add.w	r2, r7, #11
 8002268:	2106      	movs	r1, #6
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff f9ca 	bl	8001604 <VL53L7CX_RdByte>
 8002270:	4603      	mov	r3, r0
 8002272:	461a      	mov	r2, r3
 8002274:	7bfb      	ldrb	r3, [r7, #15]
 8002276:	4313      	orrs	r3, r2
 8002278:	73fb      	strb	r3, [r7, #15]
		if((go2_status0 & (uint8_t)0x80) != (uint8_t)0){
 800227a:	7afb      	ldrb	r3, [r7, #11]
 800227c:	b25b      	sxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	da10      	bge.n	80022a4 <_vl53l7cx_poll_for_mcu_boot+0x52>
			status |= VL53L7CX_RdByte(&(p_dev->platform), 0x07, &go2_status1);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f107 020a 	add.w	r2, r7, #10
 8002288:	2107      	movs	r1, #7
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff f9ba 	bl	8001604 <VL53L7CX_RdByte>
 8002290:	4603      	mov	r3, r0
 8002292:	461a      	mov	r2, r3
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	4313      	orrs	r3, r2
 8002298:	73fb      	strb	r3, [r7, #15]
			status |= go2_status1;
 800229a:	7aba      	ldrb	r2, [r7, #10]
 800229c:	7bfb      	ldrb	r3, [r7, #15]
 800229e:	4313      	orrs	r3, r2
 80022a0:	73fb      	strb	r3, [r7, #15]
			break;
 80022a2:	e012      	b.n	80022ca <_vl53l7cx_poll_for_mcu_boot+0x78>
		}
		(void)VL53L7CX_WaitMs(&(p_dev->platform), 1);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2101      	movs	r1, #1
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff fa3a 	bl	8001722 <VL53L7CX_WaitMs>
		timeout++;
 80022ae:	89bb      	ldrh	r3, [r7, #12]
 80022b0:	3301      	adds	r3, #1
 80022b2:	81bb      	strh	r3, [r7, #12]

		if((go2_status0 & (uint8_t)0x1) != (uint8_t)0){
 80022b4:	7afb      	ldrb	r3, [r7, #11]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d104      	bne.n	80022c8 <_vl53l7cx_poll_for_mcu_boot+0x76>
			break;
		}

	}while (timeout < (uint16_t)500);
 80022be:	89bb      	ldrh	r3, [r7, #12]
 80022c0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80022c4:	d3cd      	bcc.n	8002262 <_vl53l7cx_poll_for_mcu_boot+0x10>
 80022c6:	e000      	b.n	80022ca <_vl53l7cx_poll_for_mcu_boot+0x78>
			break;
 80022c8:	bf00      	nop

   return status;
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <_vl53l7cx_send_offset_data>:
 */

static uint8_t _vl53l7cx_send_offset_data(
		VL53L7CX_Configuration		*p_dev,
		uint8_t						resolution)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b0ea      	sub	sp, #424	@ 0x1a8
 80022d8:	af02      	add	r7, sp, #8
 80022da:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80022de:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80022e2:	6018      	str	r0, [r3, #0]
 80022e4:	460a      	mov	r2, r1
 80022e6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80022ea:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 80022ee:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L7CX_STATUS_OK;
 80022f0:	2300      	movs	r3, #0
 80022f2:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 80022f6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80022fa:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80022fe:	4ad9      	ldr	r2, [pc, #868]	@ (8002664 <_vl53l7cx_send_offset_data+0x390>)
 8002300:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002304:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 8002308:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800230c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002310:	4ad5      	ldr	r2, [pc, #852]	@ (8002668 <_vl53l7cx_send_offset_data+0x394>)
 8002312:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002316:	e883 0003 	stmia.w	r3, {r0, r1}
	int8_t i, j;
	uint16_t k;

	(void)memcpy(p_dev->temp_buffer,
 800231a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800231e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f503 60a2 	add.w	r0, r3, #1296	@ 0x510
               p_dev->offset_data, VL53L7CX_OFFSET_BUFFER_SIZE);
 8002328:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800232c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	3320      	adds	r3, #32
	(void)memcpy(p_dev->temp_buffer,
 8002334:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8002338:	4619      	mov	r1, r3
 800233a:	f005 f8aa 	bl	8007492 <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53L7CX_RESOLUTION_4X4){
 800233e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002342:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b10      	cmp	r3, #16
 800234a:	f040 8122 	bne.w	8002592 <_vl53l7cx_send_offset_data+0x2be>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 800234e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002352:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f503 62a4 	add.w	r2, r3, #1312	@ 0x520
 800235c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002360:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002364:	cb03      	ldmia	r3!, {r0, r1}
 8002366:	6010      	str	r0, [r2, #0]
 8002368:	6051      	str	r1, [r2, #4]
		VL53L7CX_SwapBuffer(p_dev->temp_buffer, VL53L7CX_OFFSET_BUFFER_SIZE);
 800236a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800236e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8002378:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff f99a 	bl	80016b6 <VL53L7CX_SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 8002382:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002386:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f203 514c 	addw	r1, r3, #1356	@ 0x54c
 8002390:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8002394:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002398:	4618      	mov	r0, r3
 800239a:	f005 f87a 	bl	8007492 <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 800239e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80023a2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f503 61ca 	add.w	r1, r3, #1616	@ 0x650
 80023ac:	f107 0318 	add.w	r3, r7, #24
 80023b0:	2280      	movs	r2, #128	@ 0x80
 80023b2:	4618      	mov	r0, r3
 80023b4:	f005 f86d 	bl	8007492 <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 80023b8:	2300      	movs	r3, #0
 80023ba:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 80023be:	e0ac      	b.n	800251a <_vl53l7cx_send_offset_data+0x246>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 80023c0:	2300      	movs	r3, #0
 80023c2:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 80023c6:	e09c      	b.n	8002502 <_vl53l7cx_send_offset_data+0x22e>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 80023c8:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 80023cc:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	4413      	add	r3, r2
 80023d4:	005a      	lsls	r2, r3, #1
 80023d6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80023da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80023de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 80023e2:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 80023e6:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	440b      	add	r3, r1
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	1c59      	adds	r1, r3, #1
 80023f2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80023f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80023fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80023fe:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 8002400:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8002404:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	440b      	add	r3, r1
 800240c:	3304      	adds	r3, #4
 800240e:	0059      	lsls	r1, r3, #1
 8002410:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002414:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002418:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800241c:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 800241e:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8002422:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	440b      	add	r3, r1
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	f103 0109 	add.w	r1, r3, #9
 8002430:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002434:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002438:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800243c:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 800243e:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8002442:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 8002446:	0092      	lsls	r2, r2, #2
 8002448:	440a      	add	r2, r1
                                  /(uint32_t)4;
 800244a:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 800244c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002450:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 8002458:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 800245c:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	4413      	add	r3, r2
 8002464:	005a      	lsls	r2, r3, #1
 8002466:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800246a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800246e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002472:	4619      	mov	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 8002474:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8002478:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	4413      	add	r3, r2
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	1c5a      	adds	r2, r3, #1
 8002484:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002488:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800248c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002490:	440b      	add	r3, r1
				+ range_grid[(2*i)+(16*j)+8]
 8002492:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8002496:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 800249a:	00d2      	lsls	r2, r2, #3
 800249c:	440a      	add	r2, r1
 800249e:	3204      	adds	r2, #4
 80024a0:	0051      	lsls	r1, r2, #1
 80024a2:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 80024a6:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 80024aa:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80024ae:	4413      	add	r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 80024b0:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 80024b4:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 80024b8:	00d2      	lsls	r2, r2, #3
 80024ba:	440a      	add	r2, r1
 80024bc:	0052      	lsls	r2, r2, #1
 80024be:	f102 0109 	add.w	r1, r2, #9
 80024c2:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 80024c6:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 80024ca:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80024ce:	4413      	add	r3, r2
                                  /(int16_t)4;
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	da00      	bge.n	80024d6 <_vl53l7cx_send_offset_data+0x202>
 80024d4:	3303      	adds	r3, #3
 80024d6:	109b      	asrs	r3, r3, #2
 80024d8:	4619      	mov	r1, r3
				range_grid[i+(4*j)] =
 80024da:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 80024de:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	441a      	add	r2, r3
 80024e6:	b209      	sxth	r1, r1
 80024e8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80024ec:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80024f0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i = 0; i < (int8_t)4 ; i++)
 80024f4:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	3301      	adds	r3, #1
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 8002502:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 8002506:	2b03      	cmp	r3, #3
 8002508:	f77f af5e 	ble.w	80023c8 <_vl53l7cx_send_offset_data+0xf4>
		for (j = 0; j < (int8_t)4; j++)
 800250c:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8002510:	b2db      	uxtb	r3, r3
 8002512:	3301      	adds	r3, #1
 8002514:	b2db      	uxtb	r3, r3
 8002516:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 800251a:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 800251e:	2b03      	cmp	r3, #3
 8002520:	f77f af4e 	ble.w	80023c0 <_vl53l7cx_send_offset_data+0xec>
			}
		}
	    (void)memset(&range_grid[0x10], 0, (uint16_t)96);
 8002524:	f107 0318 	add.w	r3, r7, #24
 8002528:	3320      	adds	r3, #32
 800252a:	2260      	movs	r2, #96	@ 0x60
 800252c:	2100      	movs	r1, #0
 800252e:	4618      	mov	r0, r3
 8002530:	f004 ff33 	bl	800739a <memset>
	    (void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 8002534:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8002538:	3340      	adds	r3, #64	@ 0x40
 800253a:	22c0      	movs	r2, #192	@ 0xc0
 800253c:	2100      	movs	r1, #0
 800253e:	4618      	mov	r0, r3
 8002540:	f004 ff2b 	bl	800739a <memset>
            (void)memcpy(&(p_dev->temp_buffer[0x3C]),
 8002544:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002548:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f203 534c 	addw	r3, r3, #1356	@ 0x54c
 8002552:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8002556:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800255a:	4618      	mov	r0, r3
 800255c:	f004 ff99 	bl	8007492 <memcpy>
		signal_grid, sizeof(signal_grid));
            (void)memcpy(&(p_dev->temp_buffer[0x140]),
 8002560:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002564:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f503 63ca 	add.w	r3, r3, #1616	@ 0x650
 800256e:	f107 0118 	add.w	r1, r7, #24
 8002572:	2280      	movs	r2, #128	@ 0x80
 8002574:	4618      	mov	r0, r3
 8002576:	f004 ff8c 	bl	8007492 <memcpy>
		range_grid, sizeof(range_grid));
            VL53L7CX_SwapBuffer(p_dev->temp_buffer, VL53L7CX_OFFSET_BUFFER_SIZE);
 800257a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800257e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8002588:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff f892 	bl	80016b6 <VL53L7CX_SwapBuffer>
	}

	for(k = 0; k < (VL53L7CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8002592:	2300      	movs	r3, #0
 8002594:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 8002598:	e01b      	b.n	80025d2 <_vl53l7cx_send_offset_data+0x2fe>
	{
		p_dev->temp_buffer[k] = p_dev->temp_buffer[k + (uint16_t)8];
 800259a:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 800259e:	f103 0208 	add.w	r2, r3, #8
 80025a2:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 80025a6:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 80025aa:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 80025ae:	6809      	ldr	r1, [r1, #0]
 80025b0:	440a      	add	r2, r1
 80025b2:	f892 1510 	ldrb.w	r1, [r2, #1296]	@ 0x510
 80025b6:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 80025ba:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 80025be:	6812      	ldr	r2, [r2, #0]
 80025c0:	4413      	add	r3, r2
 80025c2:	460a      	mov	r2, r1
 80025c4:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
	for(k = 0; k < (VL53L7CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 80025c8:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 80025cc:	3301      	adds	r3, #1
 80025ce:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 80025d2:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 80025d6:	f5b3 7ff2 	cmp.w	r3, #484	@ 0x1e4
 80025da:	d3de      	bcc.n	800259a <_vl53l7cx_send_offset_data+0x2c6>
	}

	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 80025dc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80025e0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f503 62de 	add.w	r2, r3, #1776	@ 0x6f0
 80025ea:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80025ee:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80025f2:	cb03      	ldmia	r3!, {r0, r1}
 80025f4:	6010      	str	r0, [r2, #0]
 80025f6:	6051      	str	r1, [r2, #4]
	status |= VL53L7CX_WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 80025f8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80025fc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002600:	6818      	ldr	r0, [r3, #0]
 8002602:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002606:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 8002610:	f44f 73f4 	mov.w	r3, #488	@ 0x1e8
 8002614:	f642 6118 	movw	r1, #11800	@ 0x2e18
 8002618:	f7ff f81f 	bl	800165a <VL53L7CX_WrMulti>
 800261c:	4603      	mov	r3, r0
 800261e:	461a      	mov	r2, r3
 8002620:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 8002624:	4313      	orrs	r3, r2
 8002626:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53L7CX_OFFSET_BUFFER_SIZE);
	status |=_vl53l7cx_poll_for_answer(p_dev, 4, 1,
 800262a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800262e:	f5a3 70ce 	sub.w	r0, r3, #412	@ 0x19c
 8002632:	2303      	movs	r3, #3
 8002634:	9301      	str	r3, [sp, #4]
 8002636:	23ff      	movs	r3, #255	@ 0xff
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 800263e:	2201      	movs	r2, #1
 8002640:	2104      	movs	r1, #4
 8002642:	6800      	ldr	r0, [r0, #0]
 8002644:	f7ff fdb5 	bl	80021b2 <_vl53l7cx_poll_for_answer>
 8002648:	4603      	mov	r3, r0
 800264a:	461a      	mov	r2, r3
 800264c:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 8002650:	4313      	orrs	r3, r2
 8002652:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53L7CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8002656:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
}
 800265a:	4618      	mov	r0, r3
 800265c:	f507 77d0 	add.w	r7, r7, #416	@ 0x1a0
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	08008344 	.word	0x08008344
 8002668:	0800834c 	.word	0x0800834c

0800266c <_vl53l7cx_send_xtalk_data>:
 */

static uint8_t _vl53l7cx_send_xtalk_data(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				resolution)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b0ca      	sub	sp, #296	@ 0x128
 8002670:	af02      	add	r7, sp, #8
 8002672:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002676:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800267a:	6018      	str	r0, [r3, #0]
 800267c:	460a      	mov	r2, r1
 800267e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002682:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8002686:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L7CX_STATUS_OK;
 8002688:	2300      	movs	r3, #0
 800268a:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 800268e:	4a9a      	ldr	r2, [pc, #616]	@ (80028f8 <_vl53l7cx_send_xtalk_data+0x28c>)
 8002690:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002694:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002698:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 800269c:	4a97      	ldr	r2, [pc, #604]	@ (80028fc <_vl53l7cx_send_xtalk_data+0x290>)
 800269e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80026a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026a6:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 80026aa:	4b95      	ldr	r3, [pc, #596]	@ (8002900 <_vl53l7cx_send_xtalk_data+0x294>)
 80026ac:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 80026b0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80026b4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f503 60a2 	add.w	r0, r3, #1296	@ 0x510
 80026be:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80026c2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80026cc:	f44f 7242 	mov.w	r2, #776	@ 0x308
 80026d0:	4619      	mov	r1, r3
 80026d2:	f004 fede 	bl	8007492 <memcpy>
		VL53L7CX_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53L7CX_RESOLUTION_4X4)
 80026d6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80026da:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b10      	cmp	r3, #16
 80026e2:	f040 80d2 	bne.w	800288a <_vl53l7cx_send_xtalk_data+0x21e>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 80026e6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80026ea:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f503 63a3 	add.w	r3, r3, #1304	@ 0x518
 80026f4:	461a      	mov	r2, r3
 80026f6:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80026fa:	cb03      	ldmia	r3!, {r0, r1}
 80026fc:	6010      	str	r0, [r2, #0]
 80026fe:	6051      	str	r1, [r2, #4]
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 8002700:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002704:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f503 63a6 	add.w	r3, r3, #1328	@ 0x530
 800270e:	461a      	mov	r2, r3
 8002710:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002714:	cb03      	ldmia	r3!, {r0, r1}
 8002716:	6010      	str	r0, [r2, #0]
 8002718:	6051      	str	r1, [r2, #4]
			dss_4x4, sizeof(dss_4x4));

		VL53L7CX_SwapBuffer(p_dev->temp_buffer, VL53L7CX_XTALK_BUFFER_SIZE);
 800271a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800271e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8002728:	f44f 7142 	mov.w	r1, #776	@ 0x308
 800272c:	4618      	mov	r0, r3
 800272e:	f7fe ffc2 	bl	80016b6 <VL53L7CX_SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 8002732:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002736:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f203 5144 	addw	r1, r3, #1348	@ 0x544
 8002740:	f107 0308 	add.w	r3, r7, #8
 8002744:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002748:	4618      	mov	r0, r3
 800274a:	f004 fea2 	bl	8007492 <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 800274e:	2300      	movs	r3, #0
 8002750:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8002754:	e05d      	b.n	8002812 <_vl53l7cx_send_xtalk_data+0x1a6>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8002756:	2300      	movs	r3, #0
 8002758:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 800275c:	e04e      	b.n	80027fc <_vl53l7cx_send_xtalk_data+0x190>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 800275e:	f997 211f 	ldrsb.w	r2, [r7, #287]	@ 0x11f
 8002762:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	4413      	add	r3, r2
 800276a:	005a      	lsls	r2, r3, #1
 800276c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002770:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002774:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+1]
 8002778:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 800277c:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	440b      	add	r3, r1
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	1c59      	adds	r1, r3, #1
 8002788:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800278c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002790:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002794:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 8002796:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 800279a:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	440b      	add	r3, r1
 80027a2:	3304      	adds	r3, #4
 80027a4:	0059      	lsls	r1, r3, #1
 80027a6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80027aa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80027ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80027b2:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 80027b4:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 80027b8:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	440b      	add	r3, r1
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	f103 0109 	add.w	r1, r3, #9
 80027c6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80027ca:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80027ce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80027d2:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 80027d4:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 80027d8:	f997 211e 	ldrsb.w	r2, [r7, #286]	@ 0x11e
 80027dc:	0092      	lsls	r2, r2, #2
 80027de:	440a      	add	r2, r1
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 80027e0:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 80027e2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80027e6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80027ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0; i < (int8_t)4 ; i++)
 80027ee:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	3301      	adds	r3, #1
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 80027fc:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8002800:	2b03      	cmp	r3, #3
 8002802:	ddac      	ble.n	800275e <_vl53l7cx_send_xtalk_data+0xf2>
		for (j = 0; j < (int8_t)4; j++)
 8002804:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8002808:	b2db      	uxtb	r3, r3
 800280a:	3301      	adds	r3, #1
 800280c:	b2db      	uxtb	r3, r3
 800280e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8002812:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8002816:	2b03      	cmp	r3, #3
 8002818:	dd9d      	ble.n	8002756 <_vl53l7cx_send_xtalk_data+0xea>
			}
		}
	    (void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 800281a:	f107 0308 	add.w	r3, r7, #8
 800281e:	3340      	adds	r3, #64	@ 0x40
 8002820:	22c0      	movs	r2, #192	@ 0xc0
 8002822:	2100      	movs	r1, #0
 8002824:	4618      	mov	r0, r3
 8002826:	f004 fdb8 	bl	800739a <memset>
	    (void)memcpy(&(p_dev->temp_buffer[0x34]),
 800282a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800282e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f203 5344 	addw	r3, r3, #1348	@ 0x544
 8002838:	f107 0108 	add.w	r1, r7, #8
 800283c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002840:	4618      	mov	r0, r3
 8002842:	f004 fe26 	bl	8007492 <memcpy>
                  signal_grid, sizeof(signal_grid));
	    VL53L7CX_SwapBuffer(p_dev->temp_buffer, VL53L7CX_XTALK_BUFFER_SIZE);
 8002846:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800284a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8002854:	f44f 7142 	mov.w	r1, #776	@ 0x308
 8002858:	4618      	mov	r0, r3
 800285a:	f7fe ff2c 	bl	80016b6 <VL53L7CX_SwapBuffer>
	    (void)memcpy(&(p_dev->temp_buffer[0x134]),
 800285e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002862:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f203 6344 	addw	r3, r3, #1604	@ 0x644
 800286c:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8002870:	601a      	str	r2, [r3, #0]
	    profile_4x4, sizeof(profile_4x4));
	    (void)memset(&(p_dev->temp_buffer[0x078]),0 ,
 8002872:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002876:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f503 63b1 	add.w	r3, r3, #1416	@ 0x588
 8002880:	2204      	movs	r2, #4
 8002882:	2100      	movs	r1, #0
 8002884:	4618      	mov	r0, r3
 8002886:	f004 fd88 	bl	800739a <memset>
                         (uint32_t)4*sizeof(uint8_t));
	}

	status |= VL53L7CX_WrMulti(&(p_dev->platform), 0x2cf8,
 800288a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800288e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002892:	6818      	ldr	r0, [r3, #0]
			p_dev->temp_buffer, VL53L7CX_XTALK_BUFFER_SIZE);
 8002894:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002898:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
	status |= VL53L7CX_WrMulti(&(p_dev->platform), 0x2cf8,
 80028a2:	f44f 7342 	mov.w	r3, #776	@ 0x308
 80028a6:	f642 41f8 	movw	r1, #11512	@ 0x2cf8
 80028aa:	f7fe fed6 	bl	800165a <VL53L7CX_WrMulti>
 80028ae:	4603      	mov	r3, r0
 80028b0:	461a      	mov	r2, r3
 80028b2:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 80028b6:	4313      	orrs	r3, r2
 80028b8:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	status |=_vl53l7cx_poll_for_answer(p_dev, 4, 1,
 80028bc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80028c0:	f5a3 708e 	sub.w	r0, r3, #284	@ 0x11c
 80028c4:	2303      	movs	r3, #3
 80028c6:	9301      	str	r3, [sp, #4]
 80028c8:	23ff      	movs	r3, #255	@ 0xff
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80028d0:	2201      	movs	r2, #1
 80028d2:	2104      	movs	r1, #4
 80028d4:	6800      	ldr	r0, [r0, #0]
 80028d6:	f7ff fc6c 	bl	80021b2 <_vl53l7cx_poll_for_answer>
 80028da:	4603      	mov	r3, r0
 80028dc:	461a      	mov	r2, r3
 80028de:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 80028e2:	4313      	orrs	r3, r2
 80028e4:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
			VL53L7CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 80028e8:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	08008354 	.word	0x08008354
 80028fc:	0800835c 	.word	0x0800835c
 8002900:	0001fca0 	.word	0x0001fca0

08002904 <vl53l7cx_init>:
	return status;
}

uint8_t vl53l7cx_init(
		VL53L7CX_Configuration		*p_dev)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08a      	sub	sp, #40	@ 0x28
 8002908:	af04      	add	r7, sp, #16
 800290a:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53L7CX_STATUS_OK;
 800290c:	2300      	movs	r3, #0
 800290e:	75fb      	strb	r3, [r7, #23]
	uint8_t pipe_ctrl[] = {VL53L7CX_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 8002910:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8002914:	613b      	str	r3, [r7, #16]
	uint32_t single_range = 0x01;
 8002916:	2301      	movs	r3, #1
 8002918:	60fb      	str	r3, [r7, #12]

	p_dev->default_xtalk = (uint8_t*)VL53L7CX_DEFAULT_XTALK;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a80      	ldr	r2, [pc, #512]	@ (8002b20 <vl53l7cx_init+0x21c>)
 800291e:	61da      	str	r2, [r3, #28]
	p_dev->default_configuration = (uint8_t*)VL53L7CX_DEFAULT_CONFIGURATION;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a80      	ldr	r2, [pc, #512]	@ (8002b24 <vl53l7cx_init+0x220>)
 8002924:	619a      	str	r2, [r3, #24]
	p_dev->is_auto_stop_enabled = (uint8_t)0x0;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2abc 	strb.w	r2, [r3, #2748]	@ 0xabc

	/* SW reboot sequence */
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002936:	4618      	mov	r0, r3
 8002938:	f7fe fe79 	bl	800162e <VL53L7CX_WrByte>
 800293c:	4603      	mov	r3, r0
 800293e:	461a      	mov	r2, r3
 8002940:	7dfb      	ldrb	r3, [r7, #23]
 8002942:	4313      	orrs	r3, r2
 8002944:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x0009, 0x04);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2204      	movs	r2, #4
 800294a:	2109      	movs	r1, #9
 800294c:	4618      	mov	r0, r3
 800294e:	f7fe fe6e 	bl	800162e <VL53L7CX_WrByte>
 8002952:	4603      	mov	r3, r0
 8002954:	461a      	mov	r2, r3
 8002956:	7dfb      	ldrb	r3, [r7, #23]
 8002958:	4313      	orrs	r3, r2
 800295a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x000F, 0x40);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2240      	movs	r2, #64	@ 0x40
 8002960:	210f      	movs	r1, #15
 8002962:	4618      	mov	r0, r3
 8002964:	f7fe fe63 	bl	800162e <VL53L7CX_WrByte>
 8002968:	4603      	mov	r3, r0
 800296a:	461a      	mov	r2, r3
 800296c:	7dfb      	ldrb	r3, [r7, #23]
 800296e:	4313      	orrs	r3, r2
 8002970:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x000A, 0x03);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2203      	movs	r2, #3
 8002976:	210a      	movs	r1, #10
 8002978:	4618      	mov	r0, r3
 800297a:	f7fe fe58 	bl	800162e <VL53L7CX_WrByte>
 800297e:	4603      	mov	r3, r0
 8002980:	461a      	mov	r2, r3
 8002982:	7dfb      	ldrb	r3, [r7, #23]
 8002984:	4313      	orrs	r3, r2
 8002986:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f107 0216 	add.w	r2, r7, #22
 800298e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002992:	4618      	mov	r0, r3
 8002994:	f7fe fe36 	bl	8001604 <VL53L7CX_RdByte>
 8002998:	4603      	mov	r3, r0
 800299a:	461a      	mov	r2, r3
 800299c:	7dfb      	ldrb	r3, [r7, #23]
 800299e:	4313      	orrs	r3, r2
 80029a0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x000C, 0x01);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	210c      	movs	r1, #12
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7fe fe40 	bl	800162e <VL53L7CX_WrByte>
 80029ae:	4603      	mov	r3, r0
 80029b0:	461a      	mov	r2, r3
 80029b2:	7dfb      	ldrb	r3, [r7, #23]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	75fb      	strb	r3, [r7, #23]

	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x0101, 0x00);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f240 1101 	movw	r1, #257	@ 0x101
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fe fe34 	bl	800162e <VL53L7CX_WrByte>
 80029c6:	4603      	mov	r3, r0
 80029c8:	461a      	mov	r2, r3
 80029ca:	7dfb      	ldrb	r3, [r7, #23]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x0102, 0x00);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fe fe28 	bl	800162e <VL53L7CX_WrByte>
 80029de:	4603      	mov	r3, r0
 80029e0:	461a      	mov	r2, r3
 80029e2:	7dfb      	ldrb	r3, [r7, #23]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x010A, 0x01);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7fe fe1c 	bl	800162e <VL53L7CX_WrByte>
 80029f6:	4603      	mov	r3, r0
 80029f8:	461a      	mov	r2, r3
 80029fa:	7dfb      	ldrb	r3, [r7, #23]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x4002, 0x01);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f244 0102 	movw	r1, #16386	@ 0x4002
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7fe fe10 	bl	800162e <VL53L7CX_WrByte>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	461a      	mov	r2, r3
 8002a12:	7dfb      	ldrb	r3, [r7, #23]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x4002, 0x00);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f244 0102 	movw	r1, #16386	@ 0x4002
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fe fe04 	bl	800162e <VL53L7CX_WrByte>
 8002a26:	4603      	mov	r3, r0
 8002a28:	461a      	mov	r2, r3
 8002a2a:	7dfb      	ldrb	r3, [r7, #23]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x010A, 0x03);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2203      	movs	r2, #3
 8002a34:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7fe fdf8 	bl	800162e <VL53L7CX_WrByte>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	461a      	mov	r2, r3
 8002a42:	7dfb      	ldrb	r3, [r7, #23]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x0103, 0x01);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f240 1103 	movw	r1, #259	@ 0x103
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7fe fdec 	bl	800162e <VL53L7CX_WrByte>
 8002a56:	4603      	mov	r3, r0
 8002a58:	461a      	mov	r2, r3
 8002a5a:	7dfb      	ldrb	r3, [r7, #23]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x000C, 0x00);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	210c      	movs	r1, #12
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fe fde1 	bl	800162e <VL53L7CX_WrByte>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	461a      	mov	r2, r3
 8002a70:	7dfb      	ldrb	r3, [r7, #23]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x000F, 0x43);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2243      	movs	r2, #67	@ 0x43
 8002a7a:	210f      	movs	r1, #15
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7fe fdd6 	bl	800162e <VL53L7CX_WrByte>
 8002a82:	4603      	mov	r3, r0
 8002a84:	461a      	mov	r2, r3
 8002a86:	7dfb      	ldrb	r3, [r7, #23]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WaitMs(&(p_dev->platform), 1);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2101      	movs	r1, #1
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7fe fe46 	bl	8001722 <VL53L7CX_WaitMs>
 8002a96:	4603      	mov	r3, r0
 8002a98:	461a      	mov	r2, r3
 8002a9a:	7dfb      	ldrb	r3, [r7, #23]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	75fb      	strb	r3, [r7, #23]

	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x000F, 0x40);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2240      	movs	r2, #64	@ 0x40
 8002aa4:	210f      	movs	r1, #15
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7fe fdc1 	bl	800162e <VL53L7CX_WrByte>
 8002aac:	4603      	mov	r3, r0
 8002aae:	461a      	mov	r2, r3
 8002ab0:	7dfb      	ldrb	r3, [r7, #23]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x000A, 0x01);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	210a      	movs	r1, #10
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7fe fdb6 	bl	800162e <VL53L7CX_WrByte>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	7dfb      	ldrb	r3, [r7, #23]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WaitMs(&(p_dev->platform), 100);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2164      	movs	r1, #100	@ 0x64
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7fe fe26 	bl	8001722 <VL53L7CX_WaitMs>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	461a      	mov	r2, r3
 8002ada:	7dfb      	ldrb	r3, [r7, #23]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	75fb      	strb	r3, [r7, #23]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fe fda0 	bl	800162e <VL53L7CX_WrByte>
 8002aee:	4603      	mov	r3, r0
 8002af0:	461a      	mov	r2, r3
 8002af2:	7dfb      	ldrb	r3, [r7, #23]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l7cx_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 8002af8:	2301      	movs	r3, #1
 8002afa:	9301      	str	r3, [sp, #4]
 8002afc:	23ff      	movs	r3, #255	@ 0xff
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	2306      	movs	r3, #6
 8002b02:	2200      	movs	r2, #0
 8002b04:	2101      	movs	r1, #1
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7ff fb53 	bl	80021b2 <_vl53l7cx_poll_for_answer>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	461a      	mov	r2, r3
 8002b10:	7dfb      	ldrb	r3, [r7, #23]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8002b16:	7dfb      	ldrb	r3, [r7, #23]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f040 8354 	bne.w	80031c6 <vl53l7cx_init+0x8c2>
 8002b1e:	e003      	b.n	8002b28 <vl53l7cx_init+0x224>
 8002b20:	0801d784 	.word	0x0801d784
 8002b24:	0801d3b8 	.word	0x0801d3b8
		goto exit;
	}

	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x000E, 0x01);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	210e      	movs	r1, #14
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fe fd7d 	bl	800162e <VL53L7CX_WrByte>
 8002b34:	4603      	mov	r3, r0
 8002b36:	461a      	mov	r2, r3
 8002b38:	7dfb      	ldrb	r3, [r7, #23]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2202      	movs	r2, #2
 8002b42:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fe fd71 	bl	800162e <VL53L7CX_WrByte>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	461a      	mov	r2, r3
 8002b50:	7dfb      	ldrb	r3, [r7, #23]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	75fb      	strb	r3, [r7, #23]

	/* Enable FW access */
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x03, 0x0D);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	220d      	movs	r2, #13
 8002b5a:	2103      	movs	r1, #3
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7fe fd66 	bl	800162e <VL53L7CX_WrByte>
 8002b62:	4603      	mov	r3, r0
 8002b64:	461a      	mov	r2, r3
 8002b66:	7dfb      	ldrb	r3, [r7, #23]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7fe fd5a 	bl	800162e <VL53L7CX_WrByte>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	7dfb      	ldrb	r3, [r7, #23]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l7cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8002b84:	2310      	movs	r3, #16
 8002b86:	9301      	str	r3, [sp, #4]
 8002b88:	2310      	movs	r3, #16
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	2321      	movs	r3, #33	@ 0x21
 8002b8e:	2200      	movs	r2, #0
 8002b90:	2101      	movs	r1, #1
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff fb0d 	bl	80021b2 <_vl53l7cx_poll_for_answer>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	7dfb      	ldrb	r3, [r7, #23]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fe fd3f 	bl	800162e <VL53L7CX_WrByte>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	7dfb      	ldrb	r3, [r7, #23]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	75fb      	strb	r3, [r7, #23]

	/* Enable host access to GO1 */
	status |= VL53L7CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f107 0216 	add.w	r2, r7, #22
 8002bc0:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7fe fd1d 	bl	8001604 <VL53L7CX_RdByte>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	461a      	mov	r2, r3
 8002bce:	7dfb      	ldrb	r3, [r7, #23]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x0C, 0x01);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	210c      	movs	r1, #12
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fe fd27 	bl	800162e <VL53L7CX_WrByte>
 8002be0:	4603      	mov	r3, r0
 8002be2:	461a      	mov	r2, r3
 8002be4:	7dfb      	ldrb	r3, [r7, #23]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	75fb      	strb	r3, [r7, #23]

	/* Power ON status */
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fe fd1b 	bl	800162e <VL53L7CX_WrByte>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	7dfb      	ldrb	r3, [r7, #23]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x101, 0x00);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f240 1101 	movw	r1, #257	@ 0x101
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fe fd0f 	bl	800162e <VL53L7CX_WrByte>
 8002c10:	4603      	mov	r3, r0
 8002c12:	461a      	mov	r2, r3
 8002c14:	7dfb      	ldrb	r3, [r7, #23]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x102, 0x00);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7fe fd03 	bl	800162e <VL53L7CX_WrByte>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	7dfb      	ldrb	r3, [r7, #23]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x010A, 0x01);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7fe fcf7 	bl	800162e <VL53L7CX_WrByte>
 8002c40:	4603      	mov	r3, r0
 8002c42:	461a      	mov	r2, r3
 8002c44:	7dfb      	ldrb	r3, [r7, #23]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x4002, 0x01);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f244 0102 	movw	r1, #16386	@ 0x4002
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7fe fceb 	bl	800162e <VL53L7CX_WrByte>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	7dfb      	ldrb	r3, [r7, #23]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x4002, 0x00);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f244 0102 	movw	r1, #16386	@ 0x4002
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fe fcdf 	bl	800162e <VL53L7CX_WrByte>
 8002c70:	4603      	mov	r3, r0
 8002c72:	461a      	mov	r2, r3
 8002c74:	7dfb      	ldrb	r3, [r7, #23]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x010A, 0x03);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2203      	movs	r2, #3
 8002c7e:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7fe fcd3 	bl	800162e <VL53L7CX_WrByte>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	7dfb      	ldrb	r3, [r7, #23]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x103, 0x01);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f240 1103 	movw	r1, #259	@ 0x103
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fe fcc7 	bl	800162e <VL53L7CX_WrByte>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	7dfb      	ldrb	r3, [r7, #23]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x400F, 0x00);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f244 010f 	movw	r1, #16399	@ 0x400f
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fe fcbb 	bl	800162e <VL53L7CX_WrByte>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	461a      	mov	r2, r3
 8002cbc:	7dfb      	ldrb	r3, [r7, #23]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x21A, 0x43);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2243      	movs	r2, #67	@ 0x43
 8002cc6:	f240 211a 	movw	r1, #538	@ 0x21a
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fe fcaf 	bl	800162e <VL53L7CX_WrByte>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	7dfb      	ldrb	r3, [r7, #23]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x21A, 0x03);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2203      	movs	r2, #3
 8002cde:	f240 211a 	movw	r1, #538	@ 0x21a
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7fe fca3 	bl	800162e <VL53L7CX_WrByte>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	461a      	mov	r2, r3
 8002cec:	7dfb      	ldrb	r3, [r7, #23]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x21A, 0x01);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f240 211a 	movw	r1, #538	@ 0x21a
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fe fc97 	bl	800162e <VL53L7CX_WrByte>
 8002d00:	4603      	mov	r3, r0
 8002d02:	461a      	mov	r2, r3
 8002d04:	7dfb      	ldrb	r3, [r7, #23]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x21A, 0x00);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f240 211a 	movw	r1, #538	@ 0x21a
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fe fc8b 	bl	800162e <VL53L7CX_WrByte>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	7dfb      	ldrb	r3, [r7, #23]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x219, 0x00);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f240 2119 	movw	r1, #537	@ 0x219
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7fe fc7f 	bl	800162e <VL53L7CX_WrByte>
 8002d30:	4603      	mov	r3, r0
 8002d32:	461a      	mov	r2, r3
 8002d34:	7dfb      	ldrb	r3, [r7, #23]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x21B, 0x00);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f240 211b 	movw	r1, #539	@ 0x21b
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fe fc73 	bl	800162e <VL53L7CX_WrByte>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	7dfb      	ldrb	r3, [r7, #23]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	75fb      	strb	r3, [r7, #23]

	/* Wake up MCU */
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fe fc67 	bl	800162e <VL53L7CX_WrByte>
 8002d60:	4603      	mov	r3, r0
 8002d62:	461a      	mov	r2, r3
 8002d64:	7dfb      	ldrb	r3, [r7, #23]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f107 0216 	add.w	r2, r7, #22
 8002d70:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7fe fc45 	bl	8001604 <VL53L7CX_RdByte>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	7dfb      	ldrb	r3, [r7, #23]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x0C, 0x00);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	210c      	movs	r1, #12
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7fe fc4f 	bl	800162e <VL53L7CX_WrByte>
 8002d90:	4603      	mov	r3, r0
 8002d92:	461a      	mov	r2, r3
 8002d94:	7dfb      	ldrb	r3, [r7, #23]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fe fc43 	bl	800162e <VL53L7CX_WrByte>
 8002da8:	4603      	mov	r3, r0
 8002daa:	461a      	mov	r2, r3
 8002dac:	7dfb      	ldrb	r3, [r7, #23]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x20, 0x07);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2207      	movs	r2, #7
 8002db6:	2120      	movs	r1, #32
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7fe fc38 	bl	800162e <VL53L7CX_WrByte>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	7dfb      	ldrb	r3, [r7, #23]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x20, 0x06);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2206      	movs	r2, #6
 8002dcc:	2120      	movs	r1, #32
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fe fc2d 	bl	800162e <VL53L7CX_WrByte>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	7dfb      	ldrb	r3, [r7, #23]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	75fb      	strb	r3, [r7, #23]

	/* Download FW into VL53L7CX */
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x09);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2209      	movs	r2, #9
 8002de2:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fe fc21 	bl	800162e <VL53L7CX_WrByte>
 8002dec:	4603      	mov	r3, r0
 8002dee:	461a      	mov	r2, r3
 8002df0:	7dfb      	ldrb	r3, [r7, #23]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrMulti(&(p_dev->platform),0,
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002dfc:	4ae1      	ldr	r2, [pc, #900]	@ (8003184 <vl53l7cx_init+0x880>)
 8002dfe:	2100      	movs	r1, #0
 8002e00:	f7fe fc2b 	bl	800165a <VL53L7CX_WrMulti>
 8002e04:	4603      	mov	r3, r0
 8002e06:	461a      	mov	r2, r3
 8002e08:	7dfb      	ldrb	r3, [r7, #23]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L7CX_FIRMWARE[0],0x8000);
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	220a      	movs	r2, #10
 8002e12:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fe fc09 	bl	800162e <VL53L7CX_WrByte>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	461a      	mov	r2, r3
 8002e20:	7dfb      	ldrb	r3, [r7, #23]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrMulti(&(p_dev->platform),0,
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e2c:	4ad6      	ldr	r2, [pc, #856]	@ (8003188 <vl53l7cx_init+0x884>)
 8002e2e:	2100      	movs	r1, #0
 8002e30:	f7fe fc13 	bl	800165a <VL53L7CX_WrMulti>
 8002e34:	4603      	mov	r3, r0
 8002e36:	461a      	mov	r2, r3
 8002e38:	7dfb      	ldrb	r3, [r7, #23]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L7CX_FIRMWARE[0x8000],0x8000);
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	220b      	movs	r2, #11
 8002e42:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fe fbf1 	bl	800162e <VL53L7CX_WrByte>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	461a      	mov	r2, r3
 8002e50:	7dfb      	ldrb	r3, [r7, #23]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrMulti(&(p_dev->platform),0,
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8002e5c:	4acb      	ldr	r2, [pc, #812]	@ (800318c <vl53l7cx_init+0x888>)
 8002e5e:	2100      	movs	r1, #0
 8002e60:	f7fe fbfb 	bl	800165a <VL53L7CX_WrMulti>
 8002e64:	4603      	mov	r3, r0
 8002e66:	461a      	mov	r2, r3
 8002e68:	7dfb      	ldrb	r3, [r7, #23]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L7CX_FIRMWARE[0x10000],0x5000);
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7fe fbd9 	bl	800162e <VL53L7CX_WrByte>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	461a      	mov	r2, r3
 8002e80:	7dfb      	ldrb	r3, [r7, #23]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	75fb      	strb	r3, [r7, #23]

	/* Check if FW correctly downloaded */
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2202      	movs	r2, #2
 8002e8a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fe fbcd 	bl	800162e <VL53L7CX_WrByte>
 8002e94:	4603      	mov	r3, r0
 8002e96:	461a      	mov	r2, r3
 8002e98:	7dfb      	ldrb	r3, [r7, #23]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x03, 0x0D);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	220d      	movs	r2, #13
 8002ea2:	2103      	movs	r1, #3
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fe fbc2 	bl	800162e <VL53L7CX_WrByte>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	461a      	mov	r2, r3
 8002eae:	7dfb      	ldrb	r3, [r7, #23]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7fe fbb6 	bl	800162e <VL53L7CX_WrByte>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	7dfb      	ldrb	r3, [r7, #23]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l7cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8002ecc:	2310      	movs	r3, #16
 8002ece:	9301      	str	r3, [sp, #4]
 8002ed0:	2310      	movs	r3, #16
 8002ed2:	9300      	str	r3, [sp, #0]
 8002ed4:	2321      	movs	r3, #33	@ 0x21
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	2101      	movs	r1, #1
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7ff f969 	bl	80021b2 <_vl53l7cx_poll_for_answer>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	7dfb      	ldrb	r3, [r7, #23]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8002eea:	7dfb      	ldrb	r3, [r7, #23]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f040 816c 	bne.w	80031ca <vl53l7cx_init+0x8c6>
		goto exit;
	}

	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fe fb97 	bl	800162e <VL53L7CX_WrByte>
 8002f00:	4603      	mov	r3, r0
 8002f02:	461a      	mov	r2, r3
 8002f04:	7dfb      	ldrb	r3, [r7, #23]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f107 0216 	add.w	r2, r7, #22
 8002f10:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7fe fb75 	bl	8001604 <VL53L7CX_RdByte>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	7dfb      	ldrb	r3, [r7, #23]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x0C, 0x01);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	210c      	movs	r1, #12
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fe fb7f 	bl	800162e <VL53L7CX_WrByte>
 8002f30:	4603      	mov	r3, r0
 8002f32:	461a      	mov	r2, r3
 8002f34:	7dfb      	ldrb	r3, [r7, #23]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	75fb      	strb	r3, [r7, #23]

	/* Reset MCU and wait boot */
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7fe fb73 	bl	800162e <VL53L7CX_WrByte>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	7dfb      	ldrb	r3, [r7, #23]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x114, 0x00);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7fe fb67 	bl	800162e <VL53L7CX_WrByte>
 8002f60:	4603      	mov	r3, r0
 8002f62:	461a      	mov	r2, r3
 8002f64:	7dfb      	ldrb	r3, [r7, #23]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x115, 0x00);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f240 1115 	movw	r1, #277	@ 0x115
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fe fb5b 	bl	800162e <VL53L7CX_WrByte>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	7dfb      	ldrb	r3, [r7, #23]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x116, 0x42);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2242      	movs	r2, #66	@ 0x42
 8002f86:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fe fb4f 	bl	800162e <VL53L7CX_WrByte>
 8002f90:	4603      	mov	r3, r0
 8002f92:	461a      	mov	r2, r3
 8002f94:	7dfb      	ldrb	r3, [r7, #23]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x117, 0x00);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f240 1117 	movw	r1, #279	@ 0x117
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7fe fb43 	bl	800162e <VL53L7CX_WrByte>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	461a      	mov	r2, r3
 8002fac:	7dfb      	ldrb	r3, [r7, #23]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x0B, 0x00);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	210b      	movs	r1, #11
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7fe fb38 	bl	800162e <VL53L7CX_WrByte>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	7dfb      	ldrb	r3, [r7, #23]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f107 0216 	add.w	r2, r7, #22
 8002fce:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fe fb16 	bl	8001604 <VL53L7CX_RdByte>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	461a      	mov	r2, r3
 8002fdc:	7dfb      	ldrb	r3, [r7, #23]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x0C, 0x00);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	210c      	movs	r1, #12
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fe fb20 	bl	800162e <VL53L7CX_WrByte>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	7dfb      	ldrb	r3, [r7, #23]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x0B, 0x01);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	210b      	movs	r1, #11
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fe fb15 	bl	800162e <VL53L7CX_WrByte>
 8003004:	4603      	mov	r3, r0
 8003006:	461a      	mov	r2, r3
 8003008:	7dfb      	ldrb	r3, [r7, #23]
 800300a:	4313      	orrs	r3, r2
 800300c:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l7cx_poll_for_mcu_boot(p_dev);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7ff f91f 	bl	8002252 <_vl53l7cx_poll_for_mcu_boot>
 8003014:	4603      	mov	r3, r0
 8003016:	461a      	mov	r2, r3
 8003018:	7dfb      	ldrb	r3, [r7, #23]
 800301a:	4313      	orrs	r3, r2
 800301c:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 800301e:	7dfb      	ldrb	r3, [r7, #23]
 8003020:	2b00      	cmp	r3, #0
 8003022:	f040 80d4 	bne.w	80031ce <vl53l7cx_init+0x8ca>
		goto exit;
	}

	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2202      	movs	r2, #2
 800302a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800302e:	4618      	mov	r0, r3
 8003030:	f7fe fafd 	bl	800162e <VL53L7CX_WrByte>
 8003034:	4603      	mov	r3, r0
 8003036:	461a      	mov	r2, r3
 8003038:	7dfb      	ldrb	r3, [r7, #23]
 800303a:	4313      	orrs	r3, r2
 800303c:	75fb      	strb	r3, [r7, #23]

	/* Get offset NVM data and store them into the offset buffer */
	status |= VL53L7CX_WrMulti(&(p_dev->platform), 0x2fd8,
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	2328      	movs	r3, #40	@ 0x28
 8003042:	4a53      	ldr	r2, [pc, #332]	@ (8003190 <vl53l7cx_init+0x88c>)
 8003044:	f642 71d8 	movw	r1, #12248	@ 0x2fd8
 8003048:	f7fe fb07 	bl	800165a <VL53L7CX_WrMulti>
 800304c:	4603      	mov	r3, r0
 800304e:	461a      	mov	r2, r3
 8003050:	7dfb      	ldrb	r3, [r7, #23]
 8003052:	4313      	orrs	r3, r2
 8003054:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)VL53L7CX_GET_NVM_CMD, sizeof(VL53L7CX_GET_NVM_CMD));
	status |= _vl53l7cx_poll_for_answer(p_dev, 4, 0,
 8003056:	2302      	movs	r3, #2
 8003058:	9301      	str	r3, [sp, #4]
 800305a:	23ff      	movs	r3, #255	@ 0xff
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8003062:	2200      	movs	r2, #0
 8003064:	2104      	movs	r1, #4
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7ff f8a3 	bl	80021b2 <_vl53l7cx_poll_for_answer>
 800306c:	4603      	mov	r3, r0
 800306e:	461a      	mov	r2, r3
 8003070:	7dfb      	ldrb	r3, [r7, #23]
 8003072:	4313      	orrs	r3, r2
 8003074:	75fb      	strb	r3, [r7, #23]
		VL53L7CX_UI_CMD_STATUS, 0xff, 2);
	status |= VL53L7CX_RdMulti(&(p_dev->platform), VL53L7CX_UI_CMD_START,
 8003076:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53L7CX_NVM_DATA_SIZE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
	status |= VL53L7CX_RdMulti(&(p_dev->platform), VL53L7CX_UI_CMD_START,
 800307e:	f44f 73f6 	mov.w	r3, #492	@ 0x1ec
 8003082:	f642 4104 	movw	r1, #11268	@ 0x2c04
 8003086:	f7fe faff 	bl	8001688 <VL53L7CX_RdMulti>
 800308a:	4603      	mov	r3, r0
 800308c:	461a      	mov	r2, r3
 800308e:	7dfb      	ldrb	r3, [r7, #23]
 8003090:	4313      	orrs	r3, r2
 8003092:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f103 0020 	add.w	r0, r3, #32
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 80030a0:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80030a4:	4619      	mov	r1, r3
 80030a6:	f004 f9f4 	bl	8007492 <memcpy>
		VL53L7CX_OFFSET_BUFFER_SIZE);
	status |= _vl53l7cx_send_offset_data(p_dev, VL53L7CX_RESOLUTION_4X4);
 80030aa:	2110      	movs	r1, #16
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7ff f911 	bl	80022d4 <_vl53l7cx_send_offset_data>
 80030b2:	4603      	mov	r3, r0
 80030b4:	461a      	mov	r2, r3
 80030b6:	7dfb      	ldrb	r3, [r7, #23]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	75fb      	strb	r3, [r7, #23]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53L7CX_DEFAULT_XTALK,
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80030c2:	4a34      	ldr	r2, [pc, #208]	@ (8003194 <vl53l7cx_init+0x890>)
 80030c4:	4618      	mov	r0, r3
 80030c6:	4611      	mov	r1, r2
 80030c8:	f44f 7342 	mov.w	r3, #776	@ 0x308
 80030cc:	461a      	mov	r2, r3
 80030ce:	f004 f9e0 	bl	8007492 <memcpy>
		VL53L7CX_XTALK_BUFFER_SIZE);
	status |= _vl53l7cx_send_xtalk_data(p_dev, VL53L7CX_RESOLUTION_4X4);
 80030d2:	2110      	movs	r1, #16
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f7ff fac9 	bl	800266c <_vl53l7cx_send_xtalk_data>
 80030da:	4603      	mov	r3, r0
 80030dc:	461a      	mov	r2, r3
 80030de:	7dfb      	ldrb	r3, [r7, #23]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	75fb      	strb	r3, [r7, #23]

	/* Send default configuration to VL53L7CX firmware */
	status |= VL53L7CX_WrMulti(&(p_dev->platform), 0x2c34,
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	699a      	ldr	r2, [r3, #24]
 80030ea:	f44f 7373 	mov.w	r3, #972	@ 0x3cc
 80030ee:	f642 4134 	movw	r1, #11316	@ 0x2c34
 80030f2:	f7fe fab2 	bl	800165a <VL53L7CX_WrMulti>
 80030f6:	4603      	mov	r3, r0
 80030f8:	461a      	mov	r2, r3
 80030fa:	7dfb      	ldrb	r3, [r7, #23]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	75fb      	strb	r3, [r7, #23]
		p_dev->default_configuration,
		sizeof(VL53L7CX_DEFAULT_CONFIGURATION));
	status |= _vl53l7cx_poll_for_answer(p_dev, 4, 1,
 8003100:	2303      	movs	r3, #3
 8003102:	9301      	str	r3, [sp, #4]
 8003104:	23ff      	movs	r3, #255	@ 0xff
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 800310c:	2201      	movs	r2, #1
 800310e:	2104      	movs	r1, #4
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f7ff f84e 	bl	80021b2 <_vl53l7cx_poll_for_answer>
 8003116:	4603      	mov	r3, r0
 8003118:	461a      	mov	r2, r3
 800311a:	7dfb      	ldrb	r3, [r7, #23]
 800311c:	4313      	orrs	r3, r2
 800311e:	75fb      	strb	r3, [r7, #23]
		VL53L7CX_UI_CMD_STATUS, 0xff, 0x03);

	status |= vl53l7cx_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 8003120:	f107 0110 	add.w	r1, r7, #16
 8003124:	2304      	movs	r3, #4
 8003126:	f64d 3280 	movw	r2, #56192	@ 0xdb80
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f001 f832 	bl	8004194 <vl53l7cx_dci_write_data>
 8003130:	4603      	mov	r3, r0
 8003132:	461a      	mov	r2, r3
 8003134:	7dfb      	ldrb	r3, [r7, #23]
 8003136:	4313      	orrs	r3, r2
 8003138:	75fb      	strb	r3, [r7, #23]
	status |= vl53l7cx_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53L7CX_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53l7cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 800313a:	f107 010c 	add.w	r1, r7, #12
 800313e:	2304      	movs	r3, #4
 8003140:	f64d 1264 	movw	r2, #55652	@ 0xd964
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f001 f825 	bl	8004194 <vl53l7cx_dci_write_data>
 800314a:	4603      	mov	r3, r0
 800314c:	461a      	mov	r2, r3
 800314e:	7dfb      	ldrb	r3, [r7, #23]
 8003150:	4313      	orrs	r3, r2
 8003152:	75fb      	strb	r3, [r7, #23]
			VL53L7CX_DCI_SINGLE_RANGE,
			(uint16_t)sizeof(single_range));

	tmp = (uint8_t)1;
 8003154:	2301      	movs	r3, #1
 8003156:	75bb      	strb	r3, [r7, #22]
	status |= vl53l7cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 800315e:	2326      	movs	r3, #38	@ 0x26
 8003160:	9302      	str	r3, [sp, #8]
 8003162:	2301      	movs	r3, #1
 8003164:	9301      	str	r3, [sp, #4]
 8003166:	f107 0316 	add.w	r3, r7, #22
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	2328      	movs	r3, #40	@ 0x28
 800316e:	f24e 1208 	movw	r2, #57608	@ 0xe108
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f001 f8ac 	bl	80042d0 <vl53l7cx_dci_replace_data>
 8003178:	4603      	mov	r3, r0
 800317a:	461a      	mov	r2, r3
 800317c:	7dfb      	ldrb	r3, [r7, #23]
 800317e:	4313      	orrs	r3, r2
 8003180:	e00a      	b.n	8003198 <vl53l7cx_init+0x894>
 8003182:	bf00      	nop
 8003184:	080083b8 	.word	0x080083b8
 8003188:	080103b8 	.word	0x080103b8
 800318c:	080183b8 	.word	0x080183b8
 8003190:	0801da8c 	.word	0x0801da8c
 8003194:	0801d784 	.word	0x0801d784
 8003198:	75fb      	strb	r3, [r7, #23]
			VL53L7CX_GLARE_FILTER, 40, (uint8_t*)&tmp, 1, 0x26);
	status |= vl53l7cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 80031a0:	2325      	movs	r3, #37	@ 0x25
 80031a2:	9302      	str	r3, [sp, #8]
 80031a4:	2301      	movs	r3, #1
 80031a6:	9301      	str	r3, [sp, #4]
 80031a8:	f107 0316 	add.w	r3, r7, #22
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	2328      	movs	r3, #40	@ 0x28
 80031b0:	f24e 1208 	movw	r2, #57608	@ 0xe108
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f001 f88b 	bl	80042d0 <vl53l7cx_dci_replace_data>
 80031ba:	4603      	mov	r3, r0
 80031bc:	461a      	mov	r2, r3
 80031be:	7dfb      	ldrb	r3, [r7, #23]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	75fb      	strb	r3, [r7, #23]
 80031c4:	e004      	b.n	80031d0 <vl53l7cx_init+0x8cc>
		goto exit;
 80031c6:	bf00      	nop
 80031c8:	e002      	b.n	80031d0 <vl53l7cx_init+0x8cc>
		goto exit;
 80031ca:	bf00      	nop
 80031cc:	e000      	b.n	80031d0 <vl53l7cx_init+0x8cc>
		goto exit;
 80031ce:	bf00      	nop
			VL53L7CX_GLARE_FILTER, 40, (uint8_t*)&tmp, 1, 0x25);
exit:
	return status;
 80031d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3718      	adds	r7, #24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop

080031dc <vl53l7cx_set_i2c_address>:

uint8_t vl53l7cx_set_i2c_address(
		VL53L7CX_Configuration		*p_dev,
		uint16_t		        i2c_address)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	460b      	mov	r3, r1
 80031e6:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L7CX_STATUS_OK;
 80031e8:	2300      	movs	r3, #0
 80031ea:	73fb      	strb	r3, [r7, #15]

	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7fe fa1a 	bl	800162e <VL53L7CX_WrByte>
 80031fa:	4603      	mov	r3, r0
 80031fc:	461a      	mov	r2, r3
 80031fe:	7bfb      	ldrb	r3, [r7, #15]
 8003200:	4313      	orrs	r3, r2
 8003202:	73fb      	strb	r3, [r7, #15]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x4, (uint8_t)(i2c_address >> 1));
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	887b      	ldrh	r3, [r7, #2]
 8003208:	085b      	lsrs	r3, r3, #1
 800320a:	b29b      	uxth	r3, r3
 800320c:	b2db      	uxtb	r3, r3
 800320e:	461a      	mov	r2, r3
 8003210:	2104      	movs	r1, #4
 8003212:	f7fe fa0c 	bl	800162e <VL53L7CX_WrByte>
 8003216:	4603      	mov	r3, r0
 8003218:	461a      	mov	r2, r3
 800321a:	7bfb      	ldrb	r3, [r7, #15]
 800321c:	4313      	orrs	r3, r2
 800321e:	73fb      	strb	r3, [r7, #15]
	p_dev->platform.address = i2c_address;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	887a      	ldrh	r2, [r7, #2]
 8003224:	801a      	strh	r2, [r3, #0]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2202      	movs	r2, #2
 800322a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800322e:	4618      	mov	r0, r3
 8003230:	f7fe f9fd 	bl	800162e <VL53L7CX_WrByte>
 8003234:	4603      	mov	r3, r0
 8003236:	461a      	mov	r2, r3
 8003238:	7bfb      	ldrb	r3, [r7, #15]
 800323a:	4313      	orrs	r3, r2
 800323c:	73fb      	strb	r3, [r7, #15]

	return status;
 800323e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003240:	4618      	mov	r0, r3
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <vl53l7cx_get_power_mode>:

uint8_t vl53l7cx_get_power_mode(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				*p_power_mode)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
	uint8_t tmp, status = VL53L7CX_STATUS_OK;
 8003252:	2300      	movs	r3, #0
 8003254:	73fb      	strb	r3, [r7, #15]

	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800325e:	4618      	mov	r0, r3
 8003260:	f7fe f9e5 	bl	800162e <VL53L7CX_WrByte>
 8003264:	4603      	mov	r3, r0
 8003266:	461a      	mov	r2, r3
 8003268:	7bfb      	ldrb	r3, [r7, #15]
 800326a:	4313      	orrs	r3, r2
 800326c:	73fb      	strb	r3, [r7, #15]
	status |= VL53L7CX_RdByte(&(p_dev->platform), 0x009, &tmp);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f107 020e 	add.w	r2, r7, #14
 8003274:	2109      	movs	r1, #9
 8003276:	4618      	mov	r0, r3
 8003278:	f7fe f9c4 	bl	8001604 <VL53L7CX_RdByte>
 800327c:	4603      	mov	r3, r0
 800327e:	461a      	mov	r2, r3
 8003280:	7bfb      	ldrb	r3, [r7, #15]
 8003282:	4313      	orrs	r3, r2
 8003284:	73fb      	strb	r3, [r7, #15]

	switch(tmp)
 8003286:	7bbb      	ldrb	r3, [r7, #14]
 8003288:	2b02      	cmp	r3, #2
 800328a:	d005      	beq.n	8003298 <vl53l7cx_get_power_mode+0x50>
 800328c:	2b04      	cmp	r3, #4
 800328e:	d107      	bne.n	80032a0 <vl53l7cx_get_power_mode+0x58>
	{
		case 0x4:
			*p_power_mode = VL53L7CX_POWER_MODE_WAKEUP;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	2201      	movs	r2, #1
 8003294:	701a      	strb	r2, [r3, #0]
			break;
 8003296:	e009      	b.n	80032ac <vl53l7cx_get_power_mode+0x64>
		case 0x2:
			*p_power_mode = VL53L7CX_POWER_MODE_SLEEP;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	2200      	movs	r2, #0
 800329c:	701a      	strb	r2, [r3, #0]

			break;
 800329e:	e005      	b.n	80032ac <vl53l7cx_get_power_mode+0x64>
		default:
			*p_power_mode = 0;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	2200      	movs	r2, #0
 80032a4:	701a      	strb	r2, [r3, #0]
			status = VL53L7CX_STATUS_ERROR;
 80032a6:	23ff      	movs	r3, #255	@ 0xff
 80032a8:	73fb      	strb	r3, [r7, #15]
			break;
 80032aa:	bf00      	nop
	}

	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2202      	movs	r2, #2
 80032b0:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7fe f9ba 	bl	800162e <VL53L7CX_WrByte>
 80032ba:	4603      	mov	r3, r0
 80032bc:	461a      	mov	r2, r3
 80032be:	7bfb      	ldrb	r3, [r7, #15]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	73fb      	strb	r3, [r7, #15]

	return status;
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <vl53l7cx_set_power_mode>:

uint8_t vl53l7cx_set_power_mode(
		VL53L7CX_Configuration		*p_dev,
		uint8_t			        power_mode)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b086      	sub	sp, #24
 80032d2:	af02      	add	r7, sp, #8
 80032d4:	6078      	str	r0, [r7, #4]
 80032d6:	460b      	mov	r3, r1
 80032d8:	70fb      	strb	r3, [r7, #3]
	uint8_t current_power_mode, status = VL53L7CX_STATUS_OK;
 80032da:	2300      	movs	r3, #0
 80032dc:	73fb      	strb	r3, [r7, #15]

	status |= vl53l7cx_get_power_mode(p_dev, &current_power_mode);
 80032de:	f107 030e 	add.w	r3, r7, #14
 80032e2:	4619      	mov	r1, r3
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7ff ffaf 	bl	8003248 <vl53l7cx_get_power_mode>
 80032ea:	4603      	mov	r3, r0
 80032ec:	461a      	mov	r2, r3
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	73fb      	strb	r3, [r7, #15]
	if(power_mode != current_power_mode)
 80032f4:	7bbb      	ldrb	r3, [r7, #14]
 80032f6:	78fa      	ldrb	r2, [r7, #3]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d061      	beq.n	80033c0 <vl53l7cx_set_power_mode+0xf2>
	{
	switch(power_mode)
 80032fc:	78fb      	ldrb	r3, [r7, #3]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d028      	beq.n	8003354 <vl53l7cx_set_power_mode+0x86>
 8003302:	2b01      	cmp	r3, #1
 8003304:	d14d      	bne.n	80033a2 <vl53l7cx_set_power_mode+0xd4>
	{
		case VL53L7CX_POWER_MODE_WAKEUP:
			status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800330e:	4618      	mov	r0, r3
 8003310:	f7fe f98d 	bl	800162e <VL53L7CX_WrByte>
 8003314:	4603      	mov	r3, r0
 8003316:	461a      	mov	r2, r3
 8003318:	7bfb      	ldrb	r3, [r7, #15]
 800331a:	4313      	orrs	r3, r2
 800331c:	73fb      	strb	r3, [r7, #15]
			status |= VL53L7CX_WrByte(&(p_dev->platform), 0x09, 0x04);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2204      	movs	r2, #4
 8003322:	2109      	movs	r1, #9
 8003324:	4618      	mov	r0, r3
 8003326:	f7fe f982 	bl	800162e <VL53L7CX_WrByte>
 800332a:	4603      	mov	r3, r0
 800332c:	461a      	mov	r2, r3
 800332e:	7bfb      	ldrb	r3, [r7, #15]
 8003330:	4313      	orrs	r3, r2
 8003332:	73fb      	strb	r3, [r7, #15]
			status |= _vl53l7cx_poll_for_answer(
 8003334:	2301      	movs	r3, #1
 8003336:	9301      	str	r3, [sp, #4]
 8003338:	2301      	movs	r3, #1
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	2306      	movs	r3, #6
 800333e:	2200      	movs	r2, #0
 8003340:	2101      	movs	r1, #1
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7fe ff35 	bl	80021b2 <_vl53l7cx_poll_for_answer>
 8003348:	4603      	mov	r3, r0
 800334a:	461a      	mov	r2, r3
 800334c:	7bfb      	ldrb	r3, [r7, #15]
 800334e:	4313      	orrs	r3, r2
 8003350:	73fb      	strb	r3, [r7, #15]
						p_dev, 1, 0, 0x06, 0x01, 1);
			break;
 8003352:	e029      	b.n	80033a8 <vl53l7cx_set_power_mode+0xda>

		case VL53L7CX_POWER_MODE_SLEEP:
			status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800335c:	4618      	mov	r0, r3
 800335e:	f7fe f966 	bl	800162e <VL53L7CX_WrByte>
 8003362:	4603      	mov	r3, r0
 8003364:	461a      	mov	r2, r3
 8003366:	7bfb      	ldrb	r3, [r7, #15]
 8003368:	4313      	orrs	r3, r2
 800336a:	73fb      	strb	r3, [r7, #15]
			status |= VL53L7CX_WrByte(&(p_dev->platform), 0x09, 0x02);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2202      	movs	r2, #2
 8003370:	2109      	movs	r1, #9
 8003372:	4618      	mov	r0, r3
 8003374:	f7fe f95b 	bl	800162e <VL53L7CX_WrByte>
 8003378:	4603      	mov	r3, r0
 800337a:	461a      	mov	r2, r3
 800337c:	7bfb      	ldrb	r3, [r7, #15]
 800337e:	4313      	orrs	r3, r2
 8003380:	73fb      	strb	r3, [r7, #15]
			status |= _vl53l7cx_poll_for_answer(
 8003382:	2300      	movs	r3, #0
 8003384:	9301      	str	r3, [sp, #4]
 8003386:	2301      	movs	r3, #1
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	2306      	movs	r3, #6
 800338c:	2200      	movs	r2, #0
 800338e:	2101      	movs	r1, #1
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7fe ff0e 	bl	80021b2 <_vl53l7cx_poll_for_answer>
 8003396:	4603      	mov	r3, r0
 8003398:	461a      	mov	r2, r3
 800339a:	7bfb      	ldrb	r3, [r7, #15]
 800339c:	4313      	orrs	r3, r2
 800339e:	73fb      	strb	r3, [r7, #15]
						p_dev, 1, 0, 0x06, 0x01, 0);
			break;
 80033a0:	e002      	b.n	80033a8 <vl53l7cx_set_power_mode+0xda>

		default:
			status = VL53L7CX_STATUS_ERROR;
 80033a2:	23ff      	movs	r3, #255	@ 0xff
 80033a4:	73fb      	strb	r3, [r7, #15]
			break;
 80033a6:	bf00      	nop
		}
		status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2202      	movs	r2, #2
 80033ac:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7fe f93c 	bl	800162e <VL53L7CX_WrByte>
 80033b6:	4603      	mov	r3, r0
 80033b8:	461a      	mov	r2, r3
 80033ba:	7bfb      	ldrb	r3, [r7, #15]
 80033bc:	4313      	orrs	r3, r2
 80033be:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
	...

080033cc <vl53l7cx_start_ranging>:

uint8_t vl53l7cx_start_ranging(
		VL53L7CX_Configuration		*p_dev)
{
 80033cc:	b5b0      	push	{r4, r5, r7, lr}
 80033ce:	b09c      	sub	sp, #112	@ 0x70
 80033d0:	af02      	add	r7, sp, #8
 80033d2:	6078      	str	r0, [r7, #4]
	uint8_t resolution, status = VL53L7CX_STATUS_OK;
 80033d4:	2300      	movs	r3, #0
 80033d6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	uint16_t tmp;
	uint32_t i;
	uint32_t header_config[2] = {0, 0};
 80033da:	2300      	movs	r3, #0
 80033dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80033de:	2300      	movs	r3, #0
 80033e0:	657b      	str	r3, [r7, #84]	@ 0x54

	union Block_header *bh_ptr;
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 80033e2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80033e6:	64fb      	str	r3, [r7, #76]	@ 0x4c

	status |= vl53l7cx_get_resolution(p_dev, &resolution);
 80033e8:	f107 035b 	add.w	r3, r7, #91	@ 0x5b
 80033ec:	4619      	mov	r1, r3
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 fca0 	bl	8003d34 <vl53l7cx_get_resolution>
 80033f4:	4603      	mov	r3, r0
 80033f6:	461a      	mov	r2, r3
 80033f8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80033fc:	4313      	orrs	r3, r2
 80033fe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	p_dev->data_read_size = 0;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	615a      	str	r2, [r3, #20]
	p_dev->streamcount = 255;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	22ff      	movs	r2, #255	@ 0xff
 800340c:	741a      	strb	r2, [r3, #16]

	/* Enable mandatory output (meta and common data) */
	uint32_t output_bh_enable[] = {
 800340e:	4baa      	ldr	r3, [pc, #680]	@ (80036b8 <vl53l7cx_start_ranging+0x2ec>)
 8003410:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8003414:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003416:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00000000U,
		0x00000000U,
		0xC0000000U};

	/* Send addresses of possible output */
	uint32_t output[] ={VL53L7CX_START_BH,
 800341a:	4ba8      	ldr	r3, [pc, #672]	@ (80036bc <vl53l7cx_start_ranging+0x2f0>)
 800341c:	f107 040c 	add.w	r4, r7, #12
 8003420:	461d      	mov	r5, r3
 8003422:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003424:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003426:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003428:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800342a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800342e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		VL53L7CX_TARGET_STATUS_BH,
		VL53L7CX_MOTION_DETECT_BH};

	/* Enable selected outputs in the 'platform.h' file */
#ifndef VL53L7CX_DISABLE_AMBIENT_PER_SPAD
	output_bh_enable[0] += (uint32_t)8;
 8003432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003434:	3308      	adds	r3, #8
 8003436:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L7CX_DISABLE_NB_SPADS_ENABLED
	output_bh_enable[0] += (uint32_t)16;
 8003438:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800343a:	3310      	adds	r3, #16
 800343c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L7CX_DISABLE_NB_TARGET_DETECTED
	output_bh_enable[0] += (uint32_t)32;
 800343e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003440:	3320      	adds	r3, #32
 8003442:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L7CX_DISABLE_SIGNAL_PER_SPAD
	output_bh_enable[0] += (uint32_t)64;
 8003444:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003446:	3340      	adds	r3, #64	@ 0x40
 8003448:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L7CX_DISABLE_RANGE_SIGMA_MM
	output_bh_enable[0] += (uint32_t)128;
 800344a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800344c:	3380      	adds	r3, #128	@ 0x80
 800344e:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L7CX_DISABLE_DISTANCE_MM
	output_bh_enable[0] += (uint32_t)256;
 8003450:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003452:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003456:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L7CX_DISABLE_REFLECTANCE_PERCENT
	output_bh_enable[0] += (uint32_t)512;
 8003458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800345a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800345e:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L7CX_DISABLE_TARGET_STATUS
	output_bh_enable[0] += (uint32_t)1024;
 8003460:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003462:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003466:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L7CX_DISABLE_MOTION_INDICATOR
	output_bh_enable[0] += (uint32_t)2048;
 8003468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800346a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800346e:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8003470:	2300      	movs	r3, #0
 8003472:	663b      	str	r3, [r7, #96]	@ 0x60
 8003474:	e073      	b.n	800355e <vl53l7cx_start_ranging+0x192>
	{
		if ((output[i] == (uint8_t)0) 
 8003476:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	3368      	adds	r3, #104	@ 0x68
 800347c:	443b      	add	r3, r7
 800347e:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d067      	beq.n	8003556 <vl53l7cx_start_ranging+0x18a>
                    || ((output_bh_enable[i/(uint32_t)32]
 8003486:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003488:	095b      	lsrs	r3, r3, #5
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	3368      	adds	r3, #104	@ 0x68
 800348e:	443b      	add	r3, r7
 8003490:	f853 2c2c 	ldr.w	r2, [r3, #-44]
                         &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 8003494:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003496:	f003 031f 	and.w	r3, r3, #31
 800349a:	fa22 f303 	lsr.w	r3, r2, r3
 800349e:	f003 0301 	and.w	r3, r3, #1
                    || ((output_bh_enable[i/(uint32_t)32]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d057      	beq.n	8003556 <vl53l7cx_start_ranging+0x18a>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(output[i]);
 80034a6:	f107 020c 	add.w	r2, r7, #12
 80034aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
		if (((uint8_t)bh_ptr->type >= (uint8_t)0x1) 
 80034b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d03a      	beq.n	8003536 <vl53l7cx_start_ranging+0x16a>
                    && ((uint8_t)bh_ptr->type < (uint8_t)0x0d))
 80034c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b0c      	cmp	r3, #12
 80034cc:	d833      	bhi.n	8003536 <vl53l7cx_start_ranging+0x16a>
		{
			if ((bh_ptr->idx >= (uint16_t)0x54d0) 
 80034ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034d0:	885b      	ldrh	r3, [r3, #2]
 80034d2:	f245 42cf 	movw	r2, #21711	@ 0x54cf
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d910      	bls.n	80034fc <vl53l7cx_start_ranging+0x130>
                            && (bh_ptr->idx < (uint16_t)(0x54d0 + 960)))
 80034da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034dc:	885b      	ldrh	r3, [r3, #2]
 80034de:	f645 028f 	movw	r2, #22671	@ 0x588f
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d80a      	bhi.n	80034fc <vl53l7cx_start_ranging+0x130>
			{
				bh_ptr->size = resolution;
 80034e6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80034ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ee:	b299      	uxth	r1, r3
 80034f0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80034f2:	8813      	ldrh	r3, [r2, #0]
 80034f4:	f361 130f 	bfi	r3, r1, #4, #12
 80034f8:	8013      	strh	r3, [r2, #0]
 80034fa:	e009      	b.n	8003510 <vl53l7cx_start_ranging+0x144>
			}
			else
			{
				bh_ptr->size = (uint16_t)((uint16_t)resolution
 80034fc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003504:	b299      	uxth	r1, r3
 8003506:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003508:	8813      	ldrh	r3, [r2, #0]
 800350a:	f361 130f 	bfi	r3, r1, #4, #12
 800350e:	8013      	strh	r3, [r2, #0]
                                  * (uint16_t)VL53L7CX_NB_TARGET_PER_ZONE);
			}
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003516:	7812      	ldrb	r2, [r2, #0]
 8003518:	f3c2 0203 	ubfx	r2, r2, #0, #4
 800351c:	b2d2      	uxtb	r2, r2
 800351e:	4611      	mov	r1, r2
 8003520:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003522:	8812      	ldrh	r2, [r2, #0]
 8003524:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8003528:	b292      	uxth	r2, r2
 800352a:	fb01 f202 	mul.w	r2, r1, r2
 800352e:	441a      	add	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	615a      	str	r2, [r3, #20]
 8003534:	e009      	b.n	800354a <vl53l7cx_start_ranging+0x17e>
		}
		else
		{
			p_dev->data_read_size += bh_ptr->size;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800353c:	8812      	ldrh	r2, [r2, #0]
 800353e:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8003542:	b292      	uxth	r2, r2
 8003544:	441a      	add	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	615a      	str	r2, [r3, #20]
		}
		p_dev->data_read_size += (uint32_t)4;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	1d1a      	adds	r2, r3, #4
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	615a      	str	r2, [r3, #20]
 8003554:	e000      	b.n	8003558 <vl53l7cx_start_ranging+0x18c>
			continue;
 8003556:	bf00      	nop
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8003558:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800355a:	3301      	adds	r3, #1
 800355c:	663b      	str	r3, [r7, #96]	@ 0x60
 800355e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003560:	2b0b      	cmp	r3, #11
 8003562:	d988      	bls.n	8003476 <vl53l7cx_start_ranging+0xaa>
	}
	p_dev->data_read_size += (uint32_t)24;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	f103 0218 	add.w	r2, r3, #24
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	615a      	str	r2, [r3, #20]

	status |= vl53l7cx_dci_write_data(p_dev,
 8003570:	f107 010c 	add.w	r1, r7, #12
 8003574:	2330      	movs	r3, #48	@ 0x30
 8003576:	f64d 1280 	movw	r2, #55680	@ 0xd980
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 fe0a 	bl	8004194 <vl53l7cx_dci_write_data>
 8003580:	4603      	mov	r3, r0
 8003582:	461a      	mov	r2, r3
 8003584:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003588:	4313      	orrs	r3, r2
 800358a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(output), VL53L7CX_DCI_OUTPUT_LIST,
			(uint16_t)sizeof(output));

	header_config[0] = p_dev->data_read_size;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	653b      	str	r3, [r7, #80]	@ 0x50
	header_config[1] = i + (uint32_t)1;
 8003594:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003596:	3301      	adds	r3, #1
 8003598:	657b      	str	r3, [r7, #84]	@ 0x54

	status |= vl53l7cx_dci_write_data(p_dev,
 800359a:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800359e:	2308      	movs	r3, #8
 80035a0:	f64d 1268 	movw	r2, #55656	@ 0xd968
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 fdf5 	bl	8004194 <vl53l7cx_dci_write_data>
 80035aa:	4603      	mov	r3, r0
 80035ac:	461a      	mov	r2, r3
 80035ae:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80035b2:	4313      	orrs	r3, r2
 80035b4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(header_config), VL53L7CX_DCI_OUTPUT_CONFIG,
			(uint16_t)sizeof(header_config));

	status |= vl53l7cx_dci_write_data(p_dev,
 80035b8:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80035bc:	2310      	movs	r3, #16
 80035be:	f64d 1270 	movw	r2, #55664	@ 0xd970
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 fde6 	bl	8004194 <vl53l7cx_dci_write_data>
 80035c8:	4603      	mov	r3, r0
 80035ca:	461a      	mov	r2, r3
 80035cc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(output_bh_enable), VL53L7CX_DCI_OUTPUT_ENABLES,
			(uint16_t)sizeof(output_bh_enable));

	/* Start xshut bypass (interrupt mode) */
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80035de:	4618      	mov	r0, r3
 80035e0:	f7fe f825 	bl	800162e <VL53L7CX_WrByte>
 80035e4:	4603      	mov	r3, r0
 80035e6:	461a      	mov	r2, r3
 80035e8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80035ec:	4313      	orrs	r3, r2
 80035ee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x09, 0x05);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2205      	movs	r2, #5
 80035f6:	2109      	movs	r1, #9
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fe f818 	bl	800162e <VL53L7CX_WrByte>
 80035fe:	4603      	mov	r3, r0
 8003600:	461a      	mov	r2, r3
 8003602:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003606:	4313      	orrs	r3, r2
 8003608:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2202      	movs	r2, #2
 8003610:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003614:	4618      	mov	r0, r3
 8003616:	f7fe f80a 	bl	800162e <VL53L7CX_WrByte>
 800361a:	4603      	mov	r3, r0
 800361c:	461a      	mov	r2, r3
 800361e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003622:	4313      	orrs	r3, r2
 8003624:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

	/* Start ranging session */
	status |= VL53L7CX_WrMulti(&(p_dev->platform), VL53L7CX_UI_CMD_END -
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800362e:	2304      	movs	r3, #4
 8003630:	f642 71fc 	movw	r1, #12284	@ 0x2ffc
 8003634:	f7fe f811 	bl	800165a <VL53L7CX_WrMulti>
 8003638:	4603      	mov	r3, r0
 800363a:	461a      	mov	r2, r3
 800363c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003640:	4313      	orrs	r3, r2
 8003642:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint16_t)(4 - 1), (uint8_t*)cmd, sizeof(cmd));
	status |= _vl53l7cx_poll_for_answer(p_dev, 4, 1,
 8003646:	2303      	movs	r3, #3
 8003648:	9301      	str	r3, [sp, #4]
 800364a:	23ff      	movs	r3, #255	@ 0xff
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8003652:	2201      	movs	r2, #1
 8003654:	2104      	movs	r1, #4
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7fe fdab 	bl	80021b2 <_vl53l7cx_poll_for_answer>
 800365c:	4603      	mov	r3, r0
 800365e:	461a      	mov	r2, r3
 8003660:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003664:	4313      	orrs	r3, r2
 8003666:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			VL53L7CX_UI_CMD_STATUS, 0xff, 0x03);

	/* Read ui range data content and compare if data size is the correct one */
	status |= vl53l7cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0x5440, 12);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
	status |= vl53l7cx_dci_read_data(p_dev,
 8003670:	230c      	movs	r3, #12
 8003672:	f245 4240 	movw	r2, #21568	@ 0x5440
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 fd02 	bl	8004080 <vl53l7cx_dci_read_data>
 800367c:	4603      	mov	r3, r0
 800367e:	461a      	mov	r2, r3
 8003680:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003684:	4313      	orrs	r3, r2
 8003686:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	(void)memcpy(&tmp, &(p_dev->temp_buffer[0x8]), sizeof(tmp));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f503 63a3 	add.w	r3, r3, #1304	@ 0x518
 8003690:	881b      	ldrh	r3, [r3, #0]
 8003692:	b29b      	uxth	r3, r3
 8003694:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
	if(tmp != p_dev->data_read_size)
 8003698:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800369c:	461a      	mov	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d002      	beq.n	80036ac <vl53l7cx_start_ranging+0x2e0>
	{
		status |= VL53L7CX_STATUS_ERROR;
 80036a6:	23ff      	movs	r3, #255	@ 0xff
 80036a8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	}

	return status;
 80036ac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3768      	adds	r7, #104	@ 0x68
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bdb0      	pop	{r4, r5, r7, pc}
 80036b8:	08008364 	.word	0x08008364
 80036bc:	08008374 	.word	0x08008374

080036c0 <vl53l7cx_stop_ranging>:

uint8_t vl53l7cx_stop_ranging(
		VL53L7CX_Configuration		*p_dev)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0, status = VL53L7CX_STATUS_OK;
 80036c8:	2300      	movs	r3, #0
 80036ca:	74fb      	strb	r3, [r7, #19]
 80036cc:	2300      	movs	r3, #0
 80036ce:	75fb      	strb	r3, [r7, #23]
	uint16_t timeout = 0;
 80036d0:	2300      	movs	r3, #0
 80036d2:	82bb      	strh	r3, [r7, #20]
	uint32_t auto_stop_flag = 0;
 80036d4:	2300      	movs	r3, #0
 80036d6:	60fb      	str	r3, [r7, #12]

	status |= VL53L7CX_RdMulti(&(p_dev->platform),
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f107 020c 	add.w	r2, r7, #12
 80036de:	2304      	movs	r3, #4
 80036e0:	f642 71fc 	movw	r1, #12284	@ 0x2ffc
 80036e4:	f7fd ffd0 	bl	8001688 <VL53L7CX_RdMulti>
 80036e8:	4603      	mov	r3, r0
 80036ea:	461a      	mov	r2, r3
 80036ec:	7dfb      	ldrb	r3, [r7, #23]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	75fb      	strb	r3, [r7, #23]
                          0x2FFC, (uint8_t*)&auto_stop_flag, 4);
	if((auto_stop_flag != (uint32_t)0x4FF)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f240 42ff 	movw	r2, #1279	@ 0x4ff
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d04d      	beq.n	8003798 <vl53l7cx_stop_ranging+0xd8>
		&& (p_dev->is_auto_stop_enabled == (uint8_t)0))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 3abc 	ldrb.w	r3, [r3, #2748]	@ 0xabc
 8003702:	2b00      	cmp	r3, #0
 8003704:	d148      	bne.n	8003798 <vl53l7cx_stop_ranging+0xd8>
	{
	        status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800370e:	4618      	mov	r0, r3
 8003710:	f7fd ff8d 	bl	800162e <VL53L7CX_WrByte>
 8003714:	4603      	mov	r3, r0
 8003716:	461a      	mov	r2, r3
 8003718:	7dfb      	ldrb	r3, [r7, #23]
 800371a:	4313      	orrs	r3, r2
 800371c:	75fb      	strb	r3, [r7, #23]

	        /* Provoke MCU stop */
	        status |= VL53L7CX_WrByte(&(p_dev->platform), 0x15, 0x16);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2216      	movs	r2, #22
 8003722:	2115      	movs	r1, #21
 8003724:	4618      	mov	r0, r3
 8003726:	f7fd ff82 	bl	800162e <VL53L7CX_WrByte>
 800372a:	4603      	mov	r3, r0
 800372c:	461a      	mov	r2, r3
 800372e:	7dfb      	ldrb	r3, [r7, #23]
 8003730:	4313      	orrs	r3, r2
 8003732:	75fb      	strb	r3, [r7, #23]
	        status |= VL53L7CX_WrByte(&(p_dev->platform), 0x14, 0x01);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	2114      	movs	r1, #20
 800373a:	4618      	mov	r0, r3
 800373c:	f7fd ff77 	bl	800162e <VL53L7CX_WrByte>
 8003740:	4603      	mov	r3, r0
 8003742:	461a      	mov	r2, r3
 8003744:	7dfb      	ldrb	r3, [r7, #23]
 8003746:	4313      	orrs	r3, r2
 8003748:	75fb      	strb	r3, [r7, #23]

	        /* Poll for G02 status 0 MCU stop */
	        while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 800374a:	e021      	b.n	8003790 <vl53l7cx_stop_ranging+0xd0>
	        {
	        	status |= VL53L7CX_RdByte(&(p_dev->platform), 0x6, &tmp);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f107 0213 	add.w	r2, r7, #19
 8003752:	2106      	movs	r1, #6
 8003754:	4618      	mov	r0, r3
 8003756:	f7fd ff55 	bl	8001604 <VL53L7CX_RdByte>
 800375a:	4603      	mov	r3, r0
 800375c:	461a      	mov	r2, r3
 800375e:	7dfb      	ldrb	r3, [r7, #23]
 8003760:	4313      	orrs	r3, r2
 8003762:	75fb      	strb	r3, [r7, #23]
	        	status |= VL53L7CX_WaitMs(&(p_dev->platform), 10);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	210a      	movs	r1, #10
 8003768:	4618      	mov	r0, r3
 800376a:	f7fd ffda 	bl	8001722 <VL53L7CX_WaitMs>
 800376e:	4603      	mov	r3, r0
 8003770:	461a      	mov	r2, r3
 8003772:	7dfb      	ldrb	r3, [r7, #23]
 8003774:	4313      	orrs	r3, r2
 8003776:	75fb      	strb	r3, [r7, #23]
	        	timeout++;	/* Timeout reached after 5 seconds */
 8003778:	8abb      	ldrh	r3, [r7, #20]
 800377a:	3301      	adds	r3, #1
 800377c:	82bb      	strh	r3, [r7, #20]

	        	if(timeout > (uint16_t)500)
 800377e:	8abb      	ldrh	r3, [r7, #20]
 8003780:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003784:	d904      	bls.n	8003790 <vl53l7cx_stop_ranging+0xd0>
				{
					status |= tmp;
 8003786:	7cfa      	ldrb	r2, [r7, #19]
 8003788:	7dfb      	ldrb	r3, [r7, #23]
 800378a:	4313      	orrs	r3, r2
 800378c:	75fb      	strb	r3, [r7, #23]
					break;
 800378e:	e003      	b.n	8003798 <vl53l7cx_stop_ranging+0xd8>
	        while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 8003790:	7cfb      	ldrb	r3, [r7, #19]
 8003792:	b25b      	sxtb	r3, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	dad9      	bge.n	800374c <vl53l7cx_stop_ranging+0x8c>
				}
        	}
        }

	/* Check GO2 status 1 if status is still OK */
	status |= VL53L7CX_RdByte(&(p_dev->platform), 0x6, &tmp);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f107 0213 	add.w	r2, r7, #19
 800379e:	2106      	movs	r1, #6
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7fd ff2f 	bl	8001604 <VL53L7CX_RdByte>
 80037a6:	4603      	mov	r3, r0
 80037a8:	461a      	mov	r2, r3
 80037aa:	7dfb      	ldrb	r3, [r7, #23]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	75fb      	strb	r3, [r7, #23]
	if((tmp & (uint8_t)0x80) != (uint8_t)0){
 80037b0:	7cfb      	ldrb	r3, [r7, #19]
 80037b2:	b25b      	sxtb	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	da15      	bge.n	80037e4 <vl53l7cx_stop_ranging+0x124>
		status |= VL53L7CX_RdByte(&(p_dev->platform), 0x7, &tmp);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f107 0213 	add.w	r2, r7, #19
 80037be:	2107      	movs	r1, #7
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7fd ff1f 	bl	8001604 <VL53L7CX_RdByte>
 80037c6:	4603      	mov	r3, r0
 80037c8:	461a      	mov	r2, r3
 80037ca:	7dfb      	ldrb	r3, [r7, #23]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	75fb      	strb	r3, [r7, #23]
		if((tmp != (uint8_t)0x84) && (tmp != (uint8_t)0x85)){
 80037d0:	7cfb      	ldrb	r3, [r7, #19]
 80037d2:	2b84      	cmp	r3, #132	@ 0x84
 80037d4:	d006      	beq.n	80037e4 <vl53l7cx_stop_ranging+0x124>
 80037d6:	7cfb      	ldrb	r3, [r7, #19]
 80037d8:	2b85      	cmp	r3, #133	@ 0x85
 80037da:	d003      	beq.n	80037e4 <vl53l7cx_stop_ranging+0x124>
		   status |= tmp;
 80037dc:	7cfa      	ldrb	r2, [r7, #19]
 80037de:	7dfb      	ldrb	r3, [r7, #23]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	75fb      	strb	r3, [r7, #23]
		}
	}

	/* Undo MCU stop */
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7fd ff1e 	bl	800162e <VL53L7CX_WrByte>
 80037f2:	4603      	mov	r3, r0
 80037f4:	461a      	mov	r2, r3
 80037f6:	7dfb      	ldrb	r3, [r7, #23]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x14, 0x00);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	2114      	movs	r1, #20
 8003802:	4618      	mov	r0, r3
 8003804:	f7fd ff13 	bl	800162e <VL53L7CX_WrByte>
 8003808:	4603      	mov	r3, r0
 800380a:	461a      	mov	r2, r3
 800380c:	7dfb      	ldrb	r3, [r7, #23]
 800380e:	4313      	orrs	r3, r2
 8003810:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x15, 0x00);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	2115      	movs	r1, #21
 8003818:	4618      	mov	r0, r3
 800381a:	f7fd ff08 	bl	800162e <VL53L7CX_WrByte>
 800381e:	4603      	mov	r3, r0
 8003820:	461a      	mov	r2, r3
 8003822:	7dfb      	ldrb	r3, [r7, #23]
 8003824:	4313      	orrs	r3, r2
 8003826:	75fb      	strb	r3, [r7, #23]

	/* Stop xshut bypass */
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x09, 0x04);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2204      	movs	r2, #4
 800382c:	2109      	movs	r1, #9
 800382e:	4618      	mov	r0, r3
 8003830:	f7fd fefd 	bl	800162e <VL53L7CX_WrByte>
 8003834:	4603      	mov	r3, r0
 8003836:	461a      	mov	r2, r3
 8003838:	7dfb      	ldrb	r3, [r7, #23]
 800383a:	4313      	orrs	r3, r2
 800383c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2202      	movs	r2, #2
 8003842:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003846:	4618      	mov	r0, r3
 8003848:	f7fd fef1 	bl	800162e <VL53L7CX_WrByte>
 800384c:	4603      	mov	r3, r0
 800384e:	461a      	mov	r2, r3
 8003850:	7dfb      	ldrb	r3, [r7, #23]
 8003852:	4313      	orrs	r3, r2
 8003854:	75fb      	strb	r3, [r7, #23]

	return status;
 8003856:	7dfb      	ldrb	r3, [r7, #23]
}
 8003858:	4618      	mov	r0, r3
 800385a:	3718      	adds	r7, #24
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <vl53l7cx_check_data_ready>:

uint8_t vl53l7cx_check_data_ready(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				*p_isReady)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L7CX_STATUS_OK;
 800386a:	2300      	movs	r3, #0
 800386c:	73fb      	strb	r3, [r7, #15]

	status |= VL53L7CX_RdMulti(&(p_dev->platform), 0x0, p_dev->temp_buffer, 4);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 8003876:	2304      	movs	r3, #4
 8003878:	2100      	movs	r1, #0
 800387a:	f7fd ff05 	bl	8001688 <VL53L7CX_RdMulti>
 800387e:	4603      	mov	r3, r0
 8003880:	461a      	mov	r2, r3
 8003882:	7bfb      	ldrb	r3, [r7, #15]
 8003884:	4313      	orrs	r3, r2
 8003886:	73fb      	strb	r3, [r7, #15]

	if((p_dev->temp_buffer[0] != p_dev->streamcount)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	7c1b      	ldrb	r3, [r3, #16]
 8003892:	429a      	cmp	r2, r3
 8003894:	d020      	beq.n	80038d8 <vl53l7cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[0] != (uint8_t)255)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 3510 	ldrb.w	r3, [r3, #1296]	@ 0x510
 800389c:	2bff      	cmp	r3, #255	@ 0xff
 800389e:	d01b      	beq.n	80038d8 <vl53l7cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[1] == (uint8_t)0x5)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 3511 	ldrb.w	r3, [r3, #1297]	@ 0x511
 80038a6:	2b05      	cmp	r3, #5
 80038a8:	d116      	bne.n	80038d8 <vl53l7cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[2] & (uint8_t)0x5) == (uint8_t)0x5)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 3512 	ldrb.w	r3, [r3, #1298]	@ 0x512
 80038b0:	f003 0305 	and.w	r3, r3, #5
 80038b4:	2b05      	cmp	r3, #5
 80038b6:	d10f      	bne.n	80038d8 <vl53l7cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[3] & (uint8_t)0x10) ==(uint8_t)0x10)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 3513 	ldrb.w	r3, [r3, #1299]	@ 0x513
 80038be:	f003 0310 	and.w	r3, r3, #16
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d008      	beq.n	80038d8 <vl53l7cx_check_data_ready+0x78>
			)
	{
		*p_isReady = (uint8_t)1;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2201      	movs	r2, #1
 80038ca:	701a      	strb	r2, [r3, #0]
		 p_dev->streamcount = p_dev->temp_buffer[0];
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	741a      	strb	r2, [r3, #16]
 80038d6:	e00e      	b.n	80038f6 <vl53l7cx_check_data_ready+0x96>
	}
	else
	{
        if ((p_dev->temp_buffer[3] & (uint8_t)0x80) != (uint8_t)0)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 3513 	ldrb.w	r3, [r3, #1299]	@ 0x513
 80038de:	b25b      	sxtb	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	da05      	bge.n	80038f0 <vl53l7cx_check_data_ready+0x90>
        {
        	status |= p_dev->temp_buffer[2];	/* Return GO2 error status */
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 2512 	ldrb.w	r2, [r3, #1298]	@ 0x512
 80038ea:	7bfb      	ldrb	r3, [r7, #15]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	73fb      	strb	r3, [r7, #15]
        }

		*p_isReady = 0;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	2200      	movs	r2, #0
 80038f4:	701a      	strb	r2, [r3, #0]
	}

	return status;
 80038f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <vl53l7cx_get_ranging_data>:

uint8_t vl53l7cx_get_ranging_data(
		VL53L7CX_Configuration		*p_dev,
		VL53L7CX_ResultsData		*p_results)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L7CX_STATUS_OK;
 800390a:	2300      	movs	r3, #0
 800390c:	77fb      	strb	r3, [r7, #31]
	uint16_t header_id, footer_id;
	union Block_header *bh_ptr;
	uint32_t i, j, msize;
	status |= VL53L7CX_RdMulti(&(p_dev->platform), 0x0,
 800390e:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, p_dev->data_read_size);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
	status |= VL53L7CX_RdMulti(&(p_dev->platform), 0x0,
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	2100      	movs	r1, #0
 800391c:	f7fd feb4 	bl	8001688 <VL53L7CX_RdMulti>
 8003920:	4603      	mov	r3, r0
 8003922:	461a      	mov	r2, r3
 8003924:	7ffb      	ldrb	r3, [r7, #31]
 8003926:	4313      	orrs	r3, r2
 8003928:	77fb      	strb	r3, [r7, #31]
	p_dev->streamcount = p_dev->temp_buffer[0];
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	741a      	strb	r2, [r3, #16]
	VL53L7CX_SwapBuffer(p_dev->temp_buffer, (uint16_t)p_dev->data_read_size);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	b29b      	uxth	r3, r3
 8003940:	4619      	mov	r1, r3
 8003942:	4610      	mov	r0, r2
 8003944:	f7fd feb7 	bl	80016b6 <VL53L7CX_SwapBuffer>

	/* Start conversion at position 16 to avoid headers */
	for (i = (uint32_t)16; i 
 8003948:	2310      	movs	r3, #16
 800394a:	61bb      	str	r3, [r7, #24]
 800394c:	e10e      	b.n	8003b6c <vl53l7cx_get_ranging_data+0x26c>
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
	{
		bh_ptr = (union Block_header *)&(p_dev->temp_buffer[i]);
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	4413      	add	r3, r2
 8003958:	60bb      	str	r3, [r7, #8]
		if ((bh_ptr->type > (uint32_t)0x1) 
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b01      	cmp	r3, #1
 8003966:	d915      	bls.n	8003994 <vl53l7cx_get_ranging_data+0x94>
                    && (bh_ptr->type < (uint32_t)0xd))
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b0c      	cmp	r3, #12
 8003974:	d80e      	bhi.n	8003994 <vl53l7cx_get_ranging_data+0x94>
		{
			msize = bh_ptr->type * bh_ptr->size;
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800397e:	b2db      	uxtb	r3, r3
 8003980:	461a      	mov	r2, r3
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	881b      	ldrh	r3, [r3, #0]
 8003986:	f3c3 130b 	ubfx	r3, r3, #4, #12
 800398a:	b29b      	uxth	r3, r3
 800398c:	fb02 f303 	mul.w	r3, r2, r3
 8003990:	613b      	str	r3, [r7, #16]
 8003992:	e005      	b.n	80039a0 <vl53l7cx_get_ranging_data+0xa0>
		}
		else
		{
			msize = bh_ptr->size;
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	881b      	ldrh	r3, [r3, #0]
 8003998:	f3c3 130b 	ubfx	r3, r3, #4, #12
 800399c:	b29b      	uxth	r3, r3
 800399e:	613b      	str	r3, [r7, #16]
		}

		switch(bh_ptr->idx){
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	885b      	ldrh	r3, [r3, #2]
 80039a4:	f24e 0284 	movw	r2, #57476	@ 0xe084
 80039a8:	4293      	cmp	r3, r2
 80039aa:	f000 80bb 	beq.w	8003b24 <vl53l7cx_get_ranging_data+0x224>
 80039ae:	f24e 0284 	movw	r2, #57476	@ 0xe084
 80039b2:	4293      	cmp	r3, r2
 80039b4:	f300 80d2 	bgt.w	8003b5c <vl53l7cx_get_ranging_data+0x25c>
 80039b8:	f24e 0244 	movw	r2, #57412	@ 0xe044
 80039bc:	4293      	cmp	r3, r2
 80039be:	f000 80a3 	beq.w	8003b08 <vl53l7cx_get_ranging_data+0x208>
 80039c2:	f24e 0244 	movw	r2, #57412	@ 0xe044
 80039c6:	4293      	cmp	r3, r2
 80039c8:	f300 80c8 	bgt.w	8003b5c <vl53l7cx_get_ranging_data+0x25c>
 80039cc:	f64d 7244 	movw	r2, #57156	@ 0xdf44
 80039d0:	4293      	cmp	r3, r2
 80039d2:	f000 808b 	beq.w	8003aec <vl53l7cx_get_ranging_data+0x1ec>
 80039d6:	f64d 7244 	movw	r2, #57156	@ 0xdf44
 80039da:	4293      	cmp	r3, r2
 80039dc:	f300 80be 	bgt.w	8003b5c <vl53l7cx_get_ranging_data+0x25c>
 80039e0:	f64d 62c4 	movw	r2, #57028	@ 0xdec4
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d073      	beq.n	8003ad0 <vl53l7cx_get_ranging_data+0x1d0>
 80039e8:	f64d 62c4 	movw	r2, #57028	@ 0xdec4
 80039ec:	4293      	cmp	r3, r2
 80039ee:	f300 80b5 	bgt.w	8003b5c <vl53l7cx_get_ranging_data+0x25c>
 80039f2:	f64d 32c4 	movw	r2, #56260	@ 0xdbc4
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d05c      	beq.n	8003ab4 <vl53l7cx_get_ranging_data+0x1b4>
 80039fa:	f64d 32c4 	movw	r2, #56260	@ 0xdbc4
 80039fe:	4293      	cmp	r3, r2
 8003a00:	f300 80ac 	bgt.w	8003b5c <vl53l7cx_get_ranging_data+0x25c>
 8003a04:	f64d 3284 	movw	r2, #56196	@ 0xdb84
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d045      	beq.n	8003a98 <vl53l7cx_get_ranging_data+0x198>
 8003a0c:	f64d 3284 	movw	r2, #56196	@ 0xdb84
 8003a10:	4293      	cmp	r3, r2
 8003a12:	f300 80a3 	bgt.w	8003b5c <vl53l7cx_get_ranging_data+0x25c>
 8003a16:	f64d 0258 	movw	r2, #55384	@ 0xd858
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	f000 8090 	beq.w	8003b40 <vl53l7cx_get_ranging_data+0x240>
 8003a20:	f64d 0258 	movw	r2, #55384	@ 0xd858
 8003a24:	4293      	cmp	r3, r2
 8003a26:	f300 8099 	bgt.w	8003b5c <vl53l7cx_get_ranging_data+0x25c>
 8003a2a:	f245 52d0 	movw	r2, #21968	@ 0x55d0
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d024      	beq.n	8003a7c <vl53l7cx_get_ranging_data+0x17c>
 8003a32:	f245 52d0 	movw	r2, #21968	@ 0x55d0
 8003a36:	4293      	cmp	r3, r2
 8003a38:	f300 8090 	bgt.w	8003b5c <vl53l7cx_get_ranging_data+0x25c>
 8003a3c:	f245 42b4 	movw	r2, #21684	@ 0x54b4
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d004      	beq.n	8003a4e <vl53l7cx_get_ranging_data+0x14e>
 8003a44:	f245 42d0 	movw	r2, #21712	@ 0x54d0
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d00a      	beq.n	8003a62 <vl53l7cx_get_ranging_data+0x162>
				(void)memcpy(&p_results->motion_indicator,
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
				break;
#endif
			default:
				break;
 8003a4c:	e086      	b.n	8003b5c <vl53l7cx_get_ranging_data+0x25c>
						(int8_t)p_dev->temp_buffer[i + (uint32_t)12];
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	330c      	adds	r3, #12
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	4413      	add	r3, r2
 8003a56:	f893 3510 	ldrb.w	r3, [r3, #1296]	@ 0x510
 8003a5a:	b25a      	sxtb	r2, r3
				p_results->silicon_temp_degc =
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	701a      	strb	r2, [r3, #0]
				break;
 8003a60:	e07d      	b.n	8003b5e <vl53l7cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->ambient_per_spad,
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	1d18      	adds	r0, r3, #4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	3304      	adds	r3, #4
 8003a6a:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	4413      	add	r3, r2
				(void)memcpy(p_results->ambient_per_spad,
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	4619      	mov	r1, r3
 8003a76:	f003 fd0c 	bl	8007492 <memcpy>
				break;
 8003a7a:	e070      	b.n	8003b5e <vl53l7cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->nb_spads_enabled,
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	3304      	adds	r3, #4
 8003a86:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_spads_enabled,
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	4619      	mov	r1, r3
 8003a92:	f003 fcfe 	bl	8007492 <memcpy>
				break;
 8003a96:	e062      	b.n	8003b5e <vl53l7cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->nb_target_detected,
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	f503 7082 	add.w	r0, r3, #260	@ 0x104
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_target_detected,
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	4619      	mov	r1, r3
 8003aae:	f003 fcf0 	bl	8007492 <memcpy>
				break;
 8003ab2:	e054      	b.n	8003b5e <vl53l7cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->signal_per_spad,
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	f503 7011 	add.w	r0, r3, #580	@ 0x244
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	3304      	adds	r3, #4
 8003abe:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	4413      	add	r3, r2
				(void)memcpy(p_results->signal_per_spad,
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	4619      	mov	r1, r3
 8003aca:	f003 fce2 	bl	8007492 <memcpy>
				break;
 8003ace:	e046      	b.n	8003b5e <vl53l7cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->range_sigma_mm,
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	f503 7051 	add.w	r0, r3, #836	@ 0x344
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	3304      	adds	r3, #4
 8003ada:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	4413      	add	r3, r2
				(void)memcpy(p_results->range_sigma_mm,
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	f003 fcd4 	bl	8007492 <memcpy>
				break;
 8003aea:	e038      	b.n	8003b5e <vl53l7cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->distance_mm,
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	f503 7071 	add.w	r0, r3, #964	@ 0x3c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	3304      	adds	r3, #4
 8003af6:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	4413      	add	r3, r2
				(void)memcpy(p_results->distance_mm,
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	4619      	mov	r1, r3
 8003b02:	f003 fcc6 	bl	8007492 <memcpy>
				break;
 8003b06:	e02a      	b.n	8003b5e <vl53l7cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->reflectance,
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	f203 4044 	addw	r0, r3, #1092	@ 0x444
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	3304      	adds	r3, #4
 8003b12:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	4413      	add	r3, r2
				(void)memcpy(p_results->reflectance,
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	f003 fcb8 	bl	8007492 <memcpy>
				break;
 8003b22:	e01c      	b.n	8003b5e <vl53l7cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->target_status,
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	f203 4084 	addw	r0, r3, #1156	@ 0x484
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	4413      	add	r3, r2
				(void)memcpy(p_results->target_status,
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	4619      	mov	r1, r3
 8003b3a:	f003 fcaa 	bl	8007492 <memcpy>
				break;
 8003b3e:	e00e      	b.n	8003b5e <vl53l7cx_get_ranging_data+0x25e>
				(void)memcpy(&p_results->motion_indicator,
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	f203 40c4 	addw	r0, r3, #1220	@ 0x4c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	3304      	adds	r3, #4
 8003b4a:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	4413      	add	r3, r2
				(void)memcpy(&p_results->motion_indicator,
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	4619      	mov	r1, r3
 8003b56:	f003 fc9c 	bl	8007492 <memcpy>
				break;
 8003b5a:	e000      	b.n	8003b5e <vl53l7cx_get_ranging_data+0x25e>
				break;
 8003b5c:	bf00      	nop
		}
		i += msize;
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	4413      	add	r3, r2
 8003b64:	61bb      	str	r3, [r7, #24]
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	3304      	adds	r3, #4
 8003b6a:	61bb      	str	r3, [r7, #24]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	f4ff aeeb 	bcc.w	800394e <vl53l7cx_get_ranging_data+0x4e>

#ifndef VL53L7CX_USE_RAW_FORMAT

	/* Convert data into their real format */
#ifndef VL53L7CX_DISABLE_AMBIENT_PER_SPAD
	for(i = 0; i < (uint32_t)VL53L7CX_RESOLUTION_8X8; i++)
 8003b78:	2300      	movs	r3, #0
 8003b7a:	61bb      	str	r3, [r7, #24]
 8003b7c:	e00d      	b.n	8003b9a <vl53l7cx_get_ranging_data+0x29a>
	{
		p_results->ambient_per_spad[i] /= (uint32_t)2048;
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	0ada      	lsrs	r2, r3, #11
 8003b8a:	6839      	ldr	r1, [r7, #0]
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	440b      	add	r3, r1
 8003b92:	605a      	str	r2, [r3, #4]
	for(i = 0; i < (uint32_t)VL53L7CX_RESOLUTION_8X8; i++)
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	3301      	adds	r3, #1
 8003b98:	61bb      	str	r3, [r7, #24]
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	2b3f      	cmp	r3, #63	@ 0x3f
 8003b9e:	d9ee      	bls.n	8003b7e <vl53l7cx_get_ranging_data+0x27e>
	}
#endif

	for(i = 0; i < (uint32_t)(VL53L7CX_RESOLUTION_8X8
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	61bb      	str	r3, [r7, #24]
 8003ba4:	e056      	b.n	8003c54 <vl53l7cx_get_ranging_data+0x354>
			*VL53L7CX_NB_TARGET_PER_ZONE); i++)
	{
#ifndef VL53L7CX_DISABLE_DISTANCE_MM
		p_results->distance_mm[i] /= 4;
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	da00      	bge.n	8003bbc <vl53l7cx_get_ranging_data+0x2bc>
 8003bba:	3303      	adds	r3, #3
 8003bbc:	109b      	asrs	r3, r3, #2
 8003bbe:	b219      	sxth	r1, r3
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	4413      	add	r3, r2
 8003bcc:	460a      	mov	r2, r1
 8003bce:	809a      	strh	r2, [r3, #4]
		if(p_results->distance_mm[i] < 0)
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	4413      	add	r3, r2
 8003bdc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	da07      	bge.n	8003bf4 <vl53l7cx_get_ranging_data+0x2f4>
		{
			p_results->distance_mm[i] = 0;
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	4413      	add	r3, r2
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	809a      	strh	r2, [r3, #4]
		}
#endif
#ifndef VL53L7CX_DISABLE_REFLECTANCE_PERCENT
		p_results->reflectance[i] /= (uint8_t)2;
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	085b      	lsrs	r3, r3, #1
 8003c02:	b2d9      	uxtb	r1, r3
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	4413      	add	r3, r2
 8003c0a:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8003c0e:	460a      	mov	r2, r1
 8003c10:	701a      	strb	r2, [r3, #0]
#endif
#ifndef VL53L7CX_DISABLE_RANGE_SIGMA_MM
		p_results->range_sigma_mm[i] /= (uint16_t)128;
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	4413      	add	r3, r2
 8003c1e:	889b      	ldrh	r3, [r3, #4]
 8003c20:	09db      	lsrs	r3, r3, #7
 8003c22:	b299      	uxth	r1, r3
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	4413      	add	r3, r2
 8003c30:	460a      	mov	r2, r1
 8003c32:	809a      	strh	r2, [r3, #4]
#endif
#ifndef VL53L7CX_DISABLE_SIGNAL_PER_SPAD
		p_results->signal_per_spad[i] /= (uint32_t)2048;
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	3390      	adds	r3, #144	@ 0x90
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	0ada      	lsrs	r2, r3, #11
 8003c42:	6839      	ldr	r1, [r7, #0]
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	3390      	adds	r3, #144	@ 0x90
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	440b      	add	r3, r1
 8003c4c:	605a      	str	r2, [r3, #4]
			*VL53L7CX_NB_TARGET_PER_ZONE); i++)
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	3301      	adds	r3, #1
 8003c52:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < (uint32_t)(VL53L7CX_RESOLUTION_8X8
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	2b3f      	cmp	r3, #63	@ 0x3f
 8003c58:	d9a5      	bls.n	8003ba6 <vl53l7cx_get_ranging_data+0x2a6>
#endif
	}

	/* Set target status to 255 if no target is detected for this zone */
#ifndef VL53L7CX_DISABLE_NB_TARGET_DETECTED
	for(i = 0; i < (uint32_t)VL53L7CX_RESOLUTION_8X8; i++)
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	61bb      	str	r3, [r7, #24]
 8003c5e:	e01b      	b.n	8003c98 <vl53l7cx_get_ranging_data+0x398>
	{
		if(p_results->nb_target_detected[i] == (uint8_t)0){
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d110      	bne.n	8003c92 <vl53l7cx_get_ranging_data+0x392>
			for(j = 0; j < (uint32_t)
 8003c70:	2300      	movs	r3, #0
 8003c72:	617b      	str	r3, [r7, #20]
 8003c74:	e00a      	b.n	8003c8c <vl53l7cx_get_ranging_data+0x38c>
				VL53L7CX_NB_TARGET_PER_ZONE; j++)
			{
#ifndef VL53L7CX_DISABLE_TARGET_STATUS
				p_results->target_status
				[((uint32_t)VL53L7CX_NB_TARGET_PER_ZONE
					*(uint32_t)i) + j]=(uint8_t)255;
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	4413      	add	r3, r2
 8003c80:	22ff      	movs	r2, #255	@ 0xff
 8003c82:	f883 2484 	strb.w	r2, [r3, #1156]	@ 0x484
				VL53L7CX_NB_TARGET_PER_ZONE; j++)
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	617b      	str	r3, [r7, #20]
			for(j = 0; j < (uint32_t)
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0f1      	beq.n	8003c76 <vl53l7cx_get_ranging_data+0x376>
	for(i = 0; i < (uint32_t)VL53L7CX_RESOLUTION_8X8; i++)
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	3301      	adds	r3, #1
 8003c96:	61bb      	str	r3, [r7, #24]
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	2b3f      	cmp	r3, #63	@ 0x3f
 8003c9c:	d9e0      	bls.n	8003c60 <vl53l7cx_get_ranging_data+0x360>
		}
	}
#endif

#ifndef VL53L7CX_DISABLE_MOTION_INDICATOR
	for(i = 0; i < (uint32_t)32; i++)
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	61bb      	str	r3, [r7, #24]
 8003ca2:	e014      	b.n	8003cce <vl53l7cx_get_ranging_data+0x3ce>
	{
		p_results->motion_indicator.motion[i] /= (uint32_t)65535;
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4413      	add	r3, r2
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	4a1f      	ldr	r2, [pc, #124]	@ (8003d30 <vl53l7cx_get_ranging_data+0x430>)
 8003cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb8:	0bda      	lsrs	r2, r3, #15
 8003cba:	6839      	ldr	r1, [r7, #0]
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	609a      	str	r2, [r3, #8]
	for(i = 0; i < (uint32_t)32; i++)
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	61bb      	str	r3, [r7, #24]
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	2b1f      	cmp	r3, #31
 8003cd2:	d9e7      	bls.n	8003ca4 <vl53l7cx_get_ranging_data+0x3a4>

#endif

	/* Check if footer id and header id are matching. This allows to detect
	 * corrupted frames */
	header_id = ((uint16_t)(p_dev->temp_buffer[0x8])<<8) & 0xFF00U;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 3518 	ldrb.w	r3, [r3, #1304]	@ 0x518
 8003cda:	021b      	lsls	r3, r3, #8
 8003cdc:	81fb      	strh	r3, [r7, #14]
	header_id |= ((uint16_t)(p_dev->temp_buffer[0x9])) & 0x00FFU;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 3519 	ldrb.w	r3, [r3, #1305]	@ 0x519
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	89fb      	ldrh	r3, [r7, #14]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	81fb      	strh	r3, [r7, #14]

	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	695b      	ldr	r3, [r3, #20]
		- (uint32_t)4]) << 8) & 0xFF00U;
 8003cf0:	3b04      	subs	r3, #4
	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f893 3510 	ldrb.w	r3, [r3, #1296]	@ 0x510
 8003cfa:	021b      	lsls	r3, r3, #8
 8003cfc:	81bb      	strh	r3, [r7, #12]
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	695b      	ldr	r3, [r3, #20]
		- (uint32_t)3])) & 0xFFU;
 8003d02:	3b03      	subs	r3, #3
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	4413      	add	r3, r2
 8003d08:	f893 3510 	ldrb.w	r3, [r3, #1296]	@ 0x510
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	89bb      	ldrh	r3, [r7, #12]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	81bb      	strh	r3, [r7, #12]
	if(header_id != footer_id)
 8003d14:	89fa      	ldrh	r2, [r7, #14]
 8003d16:	89bb      	ldrh	r3, [r7, #12]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d003      	beq.n	8003d24 <vl53l7cx_get_ranging_data+0x424>
	{
		status |= VL53L7CX_STATUS_CORRUPTED_FRAME;
 8003d1c:	7ffb      	ldrb	r3, [r7, #31]
 8003d1e:	f043 0302 	orr.w	r3, r3, #2
 8003d22:	77fb      	strb	r3, [r7, #31]
	}

	return status;
 8003d24:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3720      	adds	r7, #32
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	80008001 	.word	0x80008001

08003d34 <vl53l7cx_get_resolution>:

uint8_t vl53l7cx_get_resolution(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				*p_resolution)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L7CX_STATUS_OK;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	73fb      	strb	r3, [r7, #15]

	status |= vl53l7cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8003d48:	2308      	movs	r3, #8
 8003d4a:	f245 4250 	movw	r2, #21584	@ 0x5450
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f996 	bl	8004080 <vl53l7cx_dci_read_data>
 8003d54:	4603      	mov	r3, r0
 8003d56:	461a      	mov	r2, r3
 8003d58:	7bfb      	ldrb	r3, [r7, #15]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	73fb      	strb	r3, [r7, #15]
			VL53L7CX_DCI_ZONE_CONFIG, 8);
	*p_resolution = p_dev->temp_buffer[0x00]*p_dev->temp_buffer[0x01];
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 3511 	ldrb.w	r3, [r3, #1297]	@ 0x511
 8003d6a:	fb12 f303 	smulbb	r3, r2, r3
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	701a      	strb	r2, [r3, #0]

	return status;
 8003d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <vl53l7cx_set_resolution>:


uint8_t vl53l7cx_set_resolution(
		VL53L7CX_Configuration 		 *p_dev,
		uint8_t				resolution)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b084      	sub	sp, #16
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
 8003d86:	460b      	mov	r3, r1
 8003d88:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L7CX_STATUS_OK;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	73fb      	strb	r3, [r7, #15]

	switch(resolution){
 8003d8e:	78fb      	ldrb	r3, [r7, #3]
 8003d90:	2b10      	cmp	r3, #16
 8003d92:	d002      	beq.n	8003d9a <vl53l7cx_set_resolution+0x1c>
 8003d94:	2b40      	cmp	r3, #64	@ 0x40
 8003d96:	d055      	beq.n	8003e44 <vl53l7cx_set_resolution+0xc6>
 8003d98:	e0a9      	b.n	8003eee <vl53l7cx_set_resolution+0x170>
		case VL53L7CX_RESOLUTION_4X4:
			status |= vl53l7cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l7cx_dci_read_data(p_dev,
 8003da0:	2310      	movs	r3, #16
 8003da2:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f96a 	bl	8004080 <vl53l7cx_dci_read_data>
 8003dac:	4603      	mov	r3, r0
 8003dae:	461a      	mov	r2, r3
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 64;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2240      	movs	r2, #64	@ 0x40
 8003dba:	f883 2514 	strb.w	r2, [r3, #1300]	@ 0x514
			p_dev->temp_buffer[0x06] = 64;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2240      	movs	r2, #64	@ 0x40
 8003dc2:	f883 2516 	strb.w	r2, [r3, #1302]	@ 0x516
			p_dev->temp_buffer[0x09] = 4;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2204      	movs	r2, #4
 8003dca:	f883 2519 	strb.w	r2, [r3, #1305]	@ 0x519
			status |= vl53l7cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l7cx_dci_write_data(p_dev,
 8003dd4:	2310      	movs	r3, #16
 8003dd6:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f9da 	bl	8004194 <vl53l7cx_dci_write_data>
 8003de0:	4603      	mov	r3, r0
 8003de2:	461a      	mov	r2, r3
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_DSS_CONFIG, 16);

			status |= vl53l7cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l7cx_dci_read_data(p_dev,
 8003df0:	2308      	movs	r3, #8
 8003df2:	f245 4250 	movw	r2, #21584	@ 0x5450
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f942 	bl	8004080 <vl53l7cx_dci_read_data>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	461a      	mov	r2, r3
 8003e00:	7bfb      	ldrb	r3, [r7, #15]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 4;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2204      	movs	r2, #4
 8003e0a:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
			p_dev->temp_buffer[0x01] = 4;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2204      	movs	r2, #4
 8003e12:	f883 2511 	strb.w	r2, [r3, #1297]	@ 0x511
			p_dev->temp_buffer[0x04] = 8;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2208      	movs	r2, #8
 8003e1a:	f883 2514 	strb.w	r2, [r3, #1300]	@ 0x514
			p_dev->temp_buffer[0x05] = 8;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2208      	movs	r2, #8
 8003e22:	f883 2515 	strb.w	r2, [r3, #1301]	@ 0x515
			status |= vl53l7cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l7cx_dci_write_data(p_dev,
 8003e2c:	2308      	movs	r3, #8
 8003e2e:	f245 4250 	movw	r2, #21584	@ 0x5450
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f9ae 	bl	8004194 <vl53l7cx_dci_write_data>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	7bfb      	ldrb	r3, [r7, #15]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_ZONE_CONFIG, 8);
			break;
 8003e42:	e057      	b.n	8003ef4 <vl53l7cx_set_resolution+0x176>

		case VL53L7CX_RESOLUTION_8X8:
			status |= vl53l7cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l7cx_dci_read_data(p_dev,
 8003e4a:	2310      	movs	r3, #16
 8003e4c:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 f915 	bl	8004080 <vl53l7cx_dci_read_data>
 8003e56:	4603      	mov	r3, r0
 8003e58:	461a      	mov	r2, r3
 8003e5a:	7bfb      	ldrb	r3, [r7, #15]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 16;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2210      	movs	r2, #16
 8003e64:	f883 2514 	strb.w	r2, [r3, #1300]	@ 0x514
			p_dev->temp_buffer[0x06] = 16;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2210      	movs	r2, #16
 8003e6c:	f883 2516 	strb.w	r2, [r3, #1302]	@ 0x516
			p_dev->temp_buffer[0x09] = 1;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2519 	strb.w	r2, [r3, #1305]	@ 0x519
			status |= vl53l7cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l7cx_dci_write_data(p_dev,
 8003e7e:	2310      	movs	r3, #16
 8003e80:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 f985 	bl	8004194 <vl53l7cx_dci_write_data>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_DSS_CONFIG, 16);

			status |= vl53l7cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l7cx_dci_read_data(p_dev,
 8003e9a:	2308      	movs	r3, #8
 8003e9c:	f245 4250 	movw	r2, #21584	@ 0x5450
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 f8ed 	bl	8004080 <vl53l7cx_dci_read_data>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	7bfb      	ldrb	r3, [r7, #15]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 8;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2208      	movs	r2, #8
 8003eb4:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
			p_dev->temp_buffer[0x01] = 8;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2208      	movs	r2, #8
 8003ebc:	f883 2511 	strb.w	r2, [r3, #1297]	@ 0x511
			p_dev->temp_buffer[0x04] = 4;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2204      	movs	r2, #4
 8003ec4:	f883 2514 	strb.w	r2, [r3, #1300]	@ 0x514
			p_dev->temp_buffer[0x05] = 4;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2204      	movs	r2, #4
 8003ecc:	f883 2515 	strb.w	r2, [r3, #1301]	@ 0x515
			status |= vl53l7cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l7cx_dci_write_data(p_dev,
 8003ed6:	2308      	movs	r3, #8
 8003ed8:	f245 4250 	movw	r2, #21584	@ 0x5450
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f959 	bl	8004194 <vl53l7cx_dci_write_data>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	7bfb      	ldrb	r3, [r7, #15]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_ZONE_CONFIG, 8);

			break;
 8003eec:	e002      	b.n	8003ef4 <vl53l7cx_set_resolution+0x176>

		default:
			status = VL53L7CX_STATUS_INVALID_PARAM;
 8003eee:	237f      	movs	r3, #127	@ 0x7f
 8003ef0:	73fb      	strb	r3, [r7, #15]
			break;
 8003ef2:	bf00      	nop
		}

	status |= _vl53l7cx_send_offset_data(p_dev, resolution);
 8003ef4:	78fb      	ldrb	r3, [r7, #3]
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f7fe f9eb 	bl	80022d4 <_vl53l7cx_send_offset_data>
 8003efe:	4603      	mov	r3, r0
 8003f00:	461a      	mov	r2, r3
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	73fb      	strb	r3, [r7, #15]
	status |= _vl53l7cx_send_xtalk_data(p_dev, resolution);
 8003f08:	78fb      	ldrb	r3, [r7, #3]
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f7fe fbad 	bl	800266c <_vl53l7cx_send_xtalk_data>
 8003f12:	4603      	mov	r3, r0
 8003f14:	461a      	mov	r2, r3
 8003f16:	7bfb      	ldrb	r3, [r7, #15]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	73fb      	strb	r3, [r7, #15]

	return status;
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <vl53l7cx_set_ranging_frequency_hz>:
}

uint8_t vl53l7cx_set_ranging_frequency_hz(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				frequency_hz)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b088      	sub	sp, #32
 8003f2a:	af04      	add	r7, sp, #16
 8003f2c:	6078      	str	r0, [r7, #4]
 8003f2e:	460b      	mov	r3, r1
 8003f30:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L7CX_STATUS_OK;
 8003f32:	2300      	movs	r3, #0
 8003f34:	73fb      	strb	r3, [r7, #15]

	status |= vl53l7cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	9302      	str	r3, [sp, #8]
 8003f40:	2301      	movs	r3, #1
 8003f42:	9301      	str	r3, [sp, #4]
 8003f44:	1cfb      	adds	r3, r7, #3
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	2304      	movs	r3, #4
 8003f4a:	f245 4258 	movw	r2, #21592	@ 0x5458
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f9be 	bl	80042d0 <vl53l7cx_dci_replace_data>
 8003f54:	4603      	mov	r3, r0
 8003f56:	461a      	mov	r2, r3
 8003f58:	7bfb      	ldrb	r3, [r7, #15]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_FREQ_HZ, 4,
					(uint8_t*)&frequency_hz, 1, 0x01);

	return status;
 8003f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <vl53l7cx_set_integration_time_ms>:
}

uint8_t vl53l7cx_set_integration_time_ms(
		VL53L7CX_Configuration		*p_dev,
		uint32_t			integration_time_ms)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b088      	sub	sp, #32
 8003f6c:	af04      	add	r7, sp, #16
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L7CX_STATUS_OK;
 8003f72:	2300      	movs	r3, #0
 8003f74:	73fb      	strb	r3, [r7, #15]
        uint32_t integration = integration_time_ms;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	60bb      	str	r3, [r7, #8]

	/* Integration time must be between 2ms and 1000ms */
	if((integration < (uint32_t)2)
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d903      	bls.n	8003f88 <vl53l7cx_set_integration_time_ms+0x20>
           || (integration > (uint32_t)1000))
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f86:	d904      	bls.n	8003f92 <vl53l7cx_set_integration_time_ms+0x2a>
	{
		status |= VL53L7CX_STATUS_INVALID_PARAM;
 8003f88:	7bfb      	ldrb	r3, [r7, #15]
 8003f8a:	f043 037f 	orr.w	r3, r3, #127	@ 0x7f
 8003f8e:	73fb      	strb	r3, [r7, #15]
 8003f90:	e01a      	b.n	8003fc8 <vl53l7cx_set_integration_time_ms+0x60>
	}else
	{
		integration *= (uint32_t)1000;
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003f98:	fb02 f303 	mul.w	r3, r2, r3
 8003f9c:	60bb      	str	r3, [r7, #8]

		status |= vl53l7cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	9302      	str	r3, [sp, #8]
 8003fa8:	2304      	movs	r3, #4
 8003faa:	9301      	str	r3, [sp, #4]
 8003fac:	f107 0308 	add.w	r3, r7, #8
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	2314      	movs	r3, #20
 8003fb4:	f245 425c 	movw	r2, #21596	@ 0x545c
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 f989 	bl	80042d0 <vl53l7cx_dci_replace_data>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	7bfb      	ldrb	r3, [r7, #15]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	73fb      	strb	r3, [r7, #15]
				VL53L7CX_DCI_INT_TIME, 20,
				(uint8_t*)&integration, 4, 0x00);
	}

	return status;
 8003fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <vl53l7cx_set_ranging_mode>:
}

uint8_t vl53l7cx_set_ranging_mode(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				ranging_mode)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b084      	sub	sp, #16
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
 8003fda:	460b      	mov	r3, r1
 8003fdc:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L7CX_STATUS_OK;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	73fb      	strb	r3, [r7, #15]
	uint32_t single_range = 0x00;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60bb      	str	r3, [r7, #8]

	status |= vl53l7cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8003fec:	2308      	movs	r3, #8
 8003fee:	f64a 5230 	movw	r2, #44336	@ 0xad30
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f844 	bl	8004080 <vl53l7cx_dci_read_data>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	7bfb      	ldrb	r3, [r7, #15]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	73fb      	strb	r3, [r7, #15]
			VL53L7CX_DCI_RANGING_MODE, 8);

	switch(ranging_mode)
 8004002:	78fb      	ldrb	r3, [r7, #3]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d002      	beq.n	800400e <vl53l7cx_set_ranging_mode+0x3c>
 8004008:	2b03      	cmp	r3, #3
 800400a:	d00b      	beq.n	8004024 <vl53l7cx_set_ranging_mode+0x52>
 800400c:	e015      	b.n	800403a <vl53l7cx_set_ranging_mode+0x68>
	{
		case VL53L7CX_RANGING_MODE_CONTINUOUS:
			p_dev->temp_buffer[0x01] = 0x1;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2511 	strb.w	r2, [r3, #1297]	@ 0x511
			p_dev->temp_buffer[0x03] = 0x3;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2203      	movs	r2, #3
 800401a:	f883 2513 	strb.w	r2, [r3, #1299]	@ 0x513
			single_range = 0x00;
 800401e:	2300      	movs	r3, #0
 8004020:	60bb      	str	r3, [r7, #8]
			break;
 8004022:	e00d      	b.n	8004040 <vl53l7cx_set_ranging_mode+0x6e>

		case VL53L7CX_RANGING_MODE_AUTONOMOUS:
			p_dev->temp_buffer[0x01] = 0x3;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2203      	movs	r2, #3
 8004028:	f883 2511 	strb.w	r2, [r3, #1297]	@ 0x511
			p_dev->temp_buffer[0x03] = 0x2;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2202      	movs	r2, #2
 8004030:	f883 2513 	strb.w	r2, [r3, #1299]	@ 0x513
			single_range = 0x01;
 8004034:	2301      	movs	r3, #1
 8004036:	60bb      	str	r3, [r7, #8]
			break;
 8004038:	e002      	b.n	8004040 <vl53l7cx_set_ranging_mode+0x6e>

		default:
			status = VL53L7CX_STATUS_INVALID_PARAM;
 800403a:	237f      	movs	r3, #127	@ 0x7f
 800403c:	73fb      	strb	r3, [r7, #15]
			break;
 800403e:	bf00      	nop
	}

	status |= vl53l7cx_dci_write_data(p_dev, p_dev->temp_buffer,
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8004046:	2308      	movs	r3, #8
 8004048:	f64a 5230 	movw	r2, #44336	@ 0xad30
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 f8a1 	bl	8004194 <vl53l7cx_dci_write_data>
 8004052:	4603      	mov	r3, r0
 8004054:	461a      	mov	r2, r3
 8004056:	7bfb      	ldrb	r3, [r7, #15]
 8004058:	4313      	orrs	r3, r2
 800405a:	73fb      	strb	r3, [r7, #15]
			VL53L7CX_DCI_RANGING_MODE, (uint16_t)8);

	status |= vl53l7cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 800405c:	f107 0108 	add.w	r1, r7, #8
 8004060:	2304      	movs	r3, #4
 8004062:	f64d 1264 	movw	r2, #55652	@ 0xd964
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f894 	bl	8004194 <vl53l7cx_dci_write_data>
 800406c:	4603      	mov	r3, r0
 800406e:	461a      	mov	r2, r3
 8004070:	7bfb      	ldrb	r3, [r7, #15]
 8004072:	4313      	orrs	r3, r2
 8004074:	73fb      	strb	r3, [r7, #15]
			VL53L7CX_DCI_SINGLE_RANGE,
                        (uint16_t)sizeof(single_range));

	return status;
 8004076:	7bfb      	ldrb	r3, [r7, #15]
}
 8004078:	4618      	mov	r0, r3
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <vl53l7cx_dci_read_data>:
uint8_t vl53l7cx_dci_read_data(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b08c      	sub	sp, #48	@ 0x30
 8004084:	af02      	add	r7, sp, #8
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
 800408c:	807b      	strh	r3, [r7, #2]
	int16_t i;
	uint8_t status = VL53L7CX_STATUS_OK;
 800408e:	2300      	movs	r3, #0
 8004090:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        uint32_t rd_size = (uint32_t) data_size + (uint32_t)12;
 8004094:	887b      	ldrh	r3, [r7, #2]
 8004096:	330c      	adds	r3, #12
 8004098:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = {0x00, 0x00, 0x00, 0x00,
 800409a:	4a3d      	ldr	r2, [pc, #244]	@ (8004190 <vl53l7cx_dci_read_data+0x110>)
 800409c:	f107 0314 	add.w	r3, r7, #20
 80040a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80040a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x00, 0x00, 0x0f,
			0x00, 0x02, 0x00, 0x08};

	/* Check if tmp buffer is large enough */
	if((data_size + (uint16_t)12)>(uint16_t)VL53L7CX_TEMPORARY_BUFFER_SIZE)
 80040a6:	887b      	ldrh	r3, [r7, #2]
 80040a8:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 80040ac:	d903      	bls.n	80040b6 <vl53l7cx_dci_read_data+0x36>
	{
		status |= VL53L7CX_STATUS_ERROR;
 80040ae:	23ff      	movs	r3, #255	@ 0xff
 80040b0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80040b4:	e065      	b.n	8004182 <vl53l7cx_dci_read_data+0x102>
	}
	else
	{
		cmd[0] = (uint8_t)(index >> 8);	
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	0a1b      	lsrs	r3, r3, #8
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(index & (uint32_t)0xff);			
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)((data_size & (uint16_t)0xff0) >> 4);
 80040c4:	887b      	ldrh	r3, [r7, #2]
 80040c6:	111b      	asrs	r3, r3, #4
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 80040cc:	887b      	ldrh	r3, [r7, #2]
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	011b      	lsls	r3, r3, #4
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	75fb      	strb	r3, [r7, #23]

	/* Request data reading from FW */
		status |= VL53L7CX_WrMulti(&(p_dev->platform),
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f107 0214 	add.w	r2, r7, #20
 80040dc:	230c      	movs	r3, #12
 80040de:	f642 71f4 	movw	r1, #12276	@ 0x2ff4
 80040e2:	f7fd faba 	bl	800165a <VL53L7CX_WrMulti>
 80040e6:	4603      	mov	r3, r0
 80040e8:	461a      	mov	r2, r3
 80040ea:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80040ee:	4313      	orrs	r3, r2
 80040f0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			(VL53L7CX_UI_CMD_END-(uint16_t)11),cmd, sizeof(cmd));
		status |= _vl53l7cx_poll_for_answer(p_dev, 4, 1,
 80040f4:	2303      	movs	r3, #3
 80040f6:	9301      	str	r3, [sp, #4]
 80040f8:	23ff      	movs	r3, #255	@ 0xff
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8004100:	2201      	movs	r2, #1
 8004102:	2104      	movs	r1, #4
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f7fe f854 	bl	80021b2 <_vl53l7cx_poll_for_answer>
 800410a:	4603      	mov	r3, r0
 800410c:	461a      	mov	r2, r3
 800410e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004112:	4313      	orrs	r3, r2
 8004114:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			VL53L7CX_UI_CMD_STATUS,
			0xff, 0x03);

	/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= VL53L7CX_RdMulti(&(p_dev->platform), VL53L7CX_UI_CMD_START,
 8004118:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, rd_size);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
		status |= VL53L7CX_RdMulti(&(p_dev->platform), VL53L7CX_UI_CMD_START,
 8004120:	6a3b      	ldr	r3, [r7, #32]
 8004122:	f642 4104 	movw	r1, #11268	@ 0x2c04
 8004126:	f7fd faaf 	bl	8001688 <VL53L7CX_RdMulti>
 800412a:	4603      	mov	r3, r0
 800412c:	461a      	mov	r2, r3
 800412e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004132:	4313      	orrs	r3, r2
 8004134:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		VL53L7CX_SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t)12);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 800413e:	887b      	ldrh	r3, [r7, #2]
 8004140:	330c      	adds	r3, #12
 8004142:	b29b      	uxth	r3, r3
 8004144:	4619      	mov	r1, r3
 8004146:	4610      	mov	r0, r2
 8004148:	f7fd fab5 	bl	80016b6 <VL53L7CX_SwapBuffer>

	/* Copy data from FW into input structure (-4 bytes to remove header) */
		for(i = 0 ; i < (int16_t)data_size;i++){
 800414c:	2300      	movs	r3, #0
 800414e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004150:	e011      	b.n	8004176 <vl53l7cx_dci_read_data+0xf6>
			data[i] = p_dev->temp_buffer[i + 4];
 8004152:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8004156:	1d1a      	adds	r2, r3, #4
 8004158:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800415c:	68b9      	ldr	r1, [r7, #8]
 800415e:	440b      	add	r3, r1
 8004160:	68f9      	ldr	r1, [r7, #12]
 8004162:	440a      	add	r2, r1
 8004164:	f892 2510 	ldrb.w	r2, [r2, #1296]	@ 0x510
 8004168:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < (int16_t)data_size;i++){
 800416a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800416e:	b29b      	uxth	r3, r3
 8004170:	3301      	adds	r3, #1
 8004172:	b29b      	uxth	r3, r3
 8004174:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004176:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800417a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800417e:	429a      	cmp	r2, r3
 8004180:	dbe7      	blt.n	8004152 <vl53l7cx_dci_read_data+0xd2>
		}
	}

	return status;
 8004182:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
}
 8004186:	4618      	mov	r0, r3
 8004188:	3728      	adds	r7, #40	@ 0x28
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	080083a4 	.word	0x080083a4

08004194 <vl53l7cx_dci_write_data>:
uint8_t vl53l7cx_dci_write_data(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b08c      	sub	sp, #48	@ 0x30
 8004198:	af02      	add	r7, sp, #8
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
 80041a0:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L7CX_STATUS_OK;
 80041a2:	2300      	movs	r3, #0
 80041a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 80041a8:	2300      	movs	r3, #0
 80041aa:	61fb      	str	r3, [r7, #28]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 80041ac:	2300      	movs	r3, #0
 80041ae:	753b      	strb	r3, [r7, #20]
 80041b0:	2300      	movs	r3, #0
 80041b2:	757b      	strb	r3, [r7, #21]
 80041b4:	2300      	movs	r3, #0
 80041b6:	75bb      	strb	r3, [r7, #22]
 80041b8:	230f      	movs	r3, #15
 80041ba:	75fb      	strb	r3, [r7, #23]
 80041bc:	2305      	movs	r3, #5
 80041be:	763b      	strb	r3, [r7, #24]
 80041c0:	2301      	movs	r3, #1
 80041c2:	767b      	strb	r3, [r7, #25]
			(uint8_t)((data_size + (uint16_t)8) >> 8), 
 80041c4:	887b      	ldrh	r3, [r7, #2]
 80041c6:	3308      	adds	r3, #8
 80041c8:	121b      	asrs	r3, r3, #8
 80041ca:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 80041cc:	76bb      	strb	r3, [r7, #26]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 80041ce:	887b      	ldrh	r3, [r7, #2]
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	3308      	adds	r3, #8
 80041d4:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 80041d6:	76fb      	strb	r3, [r7, #27]

	uint16_t address = (uint16_t)VL53L7CX_UI_CMD_END -
 80041d8:	887b      	ldrh	r3, [r7, #2]
 80041da:	f5c3 533f 	rsb	r3, r3, #12224	@ 0x2fc0
 80041de:	3334      	adds	r3, #52	@ 0x34
 80041e0:	847b      	strh	r3, [r7, #34]	@ 0x22
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12) 
 80041e2:	887b      	ldrh	r3, [r7, #2]
 80041e4:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 80041e8:	d903      	bls.n	80041f2 <vl53l7cx_dci_write_data+0x5e>
           > (uint16_t)VL53L7CX_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53L7CX_STATUS_ERROR;
 80041ea:	23ff      	movs	r3, #255	@ 0xff
 80041ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80041f0:	e068      	b.n	80042c4 <vl53l7cx_dci_write_data+0x130>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	0a1b      	lsrs	r3, r3, #8
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	773b      	strb	r3, [r7, #28]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	777b      	strb	r3, [r7, #29]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 8004200:	887b      	ldrh	r3, [r7, #2]
 8004202:	111b      	asrs	r3, r3, #4
 8004204:	b2db      	uxtb	r3, r3
 8004206:	77bb      	strb	r3, [r7, #30]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8004208:	887b      	ldrh	r3, [r7, #2]
 800420a:	b2db      	uxtb	r3, r3
 800420c:	011b      	lsls	r3, r3, #4
 800420e:	b2db      	uxtb	r3, r3
 8004210:	77fb      	strb	r3, [r7, #31]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		VL53L7CX_SwapBuffer(data, data_size);
 8004212:	887b      	ldrh	r3, [r7, #2]
 8004214:	4619      	mov	r1, r3
 8004216:	68b8      	ldr	r0, [r7, #8]
 8004218:	f7fd fa4d 	bl	80016b6 <VL53L7CX_SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 800421c:	887b      	ldrh	r3, [r7, #2]
 800421e:	3b01      	subs	r3, #1
 8004220:	b29b      	uxth	r3, r3
 8004222:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004224:	e012      	b.n	800424c <vl53l7cx_dci_write_data+0xb8>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 8004226:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	441a      	add	r2, r3
 800422e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8004232:	3304      	adds	r3, #4
 8004234:	7811      	ldrb	r1, [r2, #0]
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	4413      	add	r3, r2
 800423a:	460a      	mov	r2, r1
 800423c:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8004240:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8004244:	b29b      	uxth	r3, r3
 8004246:	3b01      	subs	r3, #1
 8004248:	b29b      	uxth	r3, r3
 800424a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800424c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8004250:	2b00      	cmp	r3, #0
 8004252:	dae8      	bge.n	8004226 <vl53l7cx_dci_write_data+0x92>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 800425a:	69fa      	ldr	r2, [r7, #28]
 800425c:	601a      	str	r2, [r3, #0]
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 800425e:	887b      	ldrh	r3, [r7, #2]
 8004260:	3304      	adds	r3, #4
 8004262:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	4413      	add	r3, r2
 800426a:	461a      	mov	r2, r3
 800426c:	f107 0314 	add.w	r3, r7, #20
 8004270:	cb03      	ldmia	r3!, {r0, r1}
 8004272:	6010      	str	r0, [r2, #0]
 8004274:	6051      	str	r1, [r2, #4]
			footer, sizeof(footer));

	/* Send data to FW */
		status |= VL53L7CX_WrMulti(&(p_dev->platform),address,
 8004276:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 800427e:	887b      	ldrh	r3, [r7, #2]
		status |= VL53L7CX_WrMulti(&(p_dev->platform),address,
 8004280:	330c      	adds	r3, #12
 8004282:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8004284:	f7fd f9e9 	bl	800165a <VL53L7CX_WrMulti>
 8004288:	4603      	mov	r3, r0
 800428a:	461a      	mov	r2, r3
 800428c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004290:	4313      	orrs	r3, r2
 8004292:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		status |= _vl53l7cx_poll_for_answer(p_dev, 4, 1,
 8004296:	2303      	movs	r3, #3
 8004298:	9301      	str	r3, [sp, #4]
 800429a:	23ff      	movs	r3, #255	@ 0xff
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80042a2:	2201      	movs	r2, #1
 80042a4:	2104      	movs	r1, #4
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f7fd ff83 	bl	80021b2 <_vl53l7cx_poll_for_answer>
 80042ac:	4603      	mov	r3, r0
 80042ae:	461a      	mov	r2, r3
 80042b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80042b4:	4313      	orrs	r3, r2
 80042b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L7CX_UI_CMD_STATUS, 0xff, 0x03);

		VL53L7CX_SwapBuffer(data, data_size);
 80042ba:	887b      	ldrh	r3, [r7, #2]
 80042bc:	4619      	mov	r1, r3
 80042be:	68b8      	ldr	r0, [r7, #8]
 80042c0:	f7fd f9f9 	bl	80016b6 <VL53L7CX_SwapBuffer>
	}

	return status;
 80042c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3728      	adds	r7, #40	@ 0x28
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <vl53l7cx_dci_replace_data>:
		uint32_t			index,
		uint16_t			data_size,
		uint8_t				*new_data,
		uint16_t			new_data_size,
		uint16_t			new_data_pos)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
 80042dc:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L7CX_STATUS_OK;
 80042de:	2300      	movs	r3, #0
 80042e0:	75fb      	strb	r3, [r7, #23]

	status |= vl53l7cx_dci_read_data(p_dev, data, index, data_size);
 80042e2:	887b      	ldrh	r3, [r7, #2]
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	68b9      	ldr	r1, [r7, #8]
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f7ff fec9 	bl	8004080 <vl53l7cx_dci_read_data>
 80042ee:	4603      	mov	r3, r0
 80042f0:	461a      	mov	r2, r3
 80042f2:	7dfb      	ldrb	r3, [r7, #23]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(&(data[new_data_pos]), new_data, new_data_size);
 80042f8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	4413      	add	r3, r2
 80042fe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004300:	6a39      	ldr	r1, [r7, #32]
 8004302:	4618      	mov	r0, r3
 8004304:	f003 f8c5 	bl	8007492 <memcpy>
	status |= vl53l7cx_dci_write_data(p_dev, data, index, data_size);
 8004308:	887b      	ldrh	r3, [r7, #2]
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	68b9      	ldr	r1, [r7, #8]
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f7ff ff40 	bl	8004194 <vl53l7cx_dci_write_data>
 8004314:	4603      	mov	r3, r0
 8004316:	461a      	mov	r2, r3
 8004318:	7dfb      	ldrb	r3, [r7, #23]
 800431a:	4313      	orrs	r3, r2
 800431c:	75fb      	strb	r3, [r7, #23]

	return status;
 800431e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3718      	adds	r7, #24
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <vl53l7cx_set_detection_thresholds_enable>:
}

uint8_t vl53l7cx_set_detection_thresholds_enable(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				enabled)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b088      	sub	sp, #32
 800432c:	af04      	add	r7, sp, #16
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	460b      	mov	r3, r1
 8004332:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp, status = VL53L7CX_STATUS_OK;
 8004334:	2300      	movs	r3, #0
 8004336:	73fb      	strb	r3, [r7, #15]
	uint8_t grp_global_config[] = {0x01, 0x00, 0x01, 0x00};
 8004338:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800433c:	60bb      	str	r3, [r7, #8]

	if(enabled == (uint8_t)1)
 800433e:	78fb      	ldrb	r3, [r7, #3]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d104      	bne.n	800434e <vl53l7cx_set_detection_thresholds_enable+0x26>
	{
		grp_global_config[0x01] = 0x01;
 8004344:	2301      	movs	r3, #1
 8004346:	727b      	strb	r3, [r7, #9]
		tmp = 0x04;
 8004348:	2304      	movs	r3, #4
 800434a:	73bb      	strb	r3, [r7, #14]
 800434c:	e003      	b.n	8004356 <vl53l7cx_set_detection_thresholds_enable+0x2e>
	}
	else
	{
		grp_global_config[0x01] = 0x00;
 800434e:	2300      	movs	r3, #0
 8004350:	727b      	strb	r3, [r7, #9]
		tmp = 0x0C;
 8004352:	230c      	movs	r3, #12
 8004354:	73bb      	strb	r3, [r7, #14]
	}

	/* Set global interrupt config */
	status |= vl53l7cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 800435c:	2300      	movs	r3, #0
 800435e:	9302      	str	r3, [sp, #8]
 8004360:	2304      	movs	r3, #4
 8004362:	9301      	str	r3, [sp, #4]
 8004364:	f107 0308 	add.w	r3, r7, #8
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	2308      	movs	r3, #8
 800436c:	f24b 62e0 	movw	r2, #46816	@ 0xb6e0
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f7ff ffad 	bl	80042d0 <vl53l7cx_dci_replace_data>
 8004376:	4603      	mov	r3, r0
 8004378:	461a      	mov	r2, r3
 800437a:	7bfb      	ldrb	r3, [r7, #15]
 800437c:	4313      	orrs	r3, r2
 800437e:	73fb      	strb	r3, [r7, #15]
			VL53L7CX_DCI_DET_THRESH_GLOBAL_CONFIG, 8,
			(uint8_t*)&grp_global_config, 4, 0x00);

	/* Update interrupt config */
	status |= vl53l7cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8004386:	2311      	movs	r3, #17
 8004388:	9302      	str	r3, [sp, #8]
 800438a:	2301      	movs	r3, #1
 800438c:	9301      	str	r3, [sp, #4]
 800438e:	f107 030e 	add.w	r3, r7, #14
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	2314      	movs	r3, #20
 8004396:	f245 4288 	movw	r2, #21640	@ 0x5488
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7ff ff98 	bl	80042d0 <vl53l7cx_dci_replace_data>
 80043a0:	4603      	mov	r3, r0
 80043a2:	461a      	mov	r2, r3
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	73fb      	strb	r3, [r7, #15]
			VL53L7CX_DCI_DET_THRESH_CONFIG, 20,
			(uint8_t*)&tmp, 1, 0x11);

	return status;
 80043aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <vl53l7cx_set_detection_thresholds>:
}

uint8_t vl53l7cx_set_detection_thresholds(
		VL53L7CX_Configuration			*p_dev,
		VL53L7CX_DetectionThresholds	*p_thresholds)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
	uint8_t i, status = VL53L7CX_STATUS_OK;
 80043be:	2300      	movs	r3, #0
 80043c0:	75bb      	strb	r3, [r7, #22]
	uint8_t grp_valid_target_cfg[] = {0x05, 0x05, 0x05, 0x05,
 80043c2:	4aa7      	ldr	r2, [pc, #668]	@ (8004660 <vl53l7cx_set_detection_thresholds+0x2ac>)
 80043c4:	f107 030c 	add.w	r3, r7, #12
 80043c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80043cc:	e883 0003 	stmia.w	r3, {r0, r1}
					0x05, 0x05, 0x05, 0x05};

	for(i = 0; i < (uint8_t) VL53L7CX_NB_THRESHOLDS; i++)
 80043d0:	2300      	movs	r3, #0
 80043d2:	75fb      	strb	r3, [r7, #23]
 80043d4:	e120      	b.n	8004618 <vl53l7cx_set_detection_thresholds+0x264>
	{
		switch(p_thresholds->measurement)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	7a1b      	ldrb	r3, [r3, #8]
 80043da:	3b01      	subs	r3, #1
 80043dc:	2b12      	cmp	r3, #18
 80043de:	f200 8117 	bhi.w	8004610 <vl53l7cx_set_detection_thresholds+0x25c>
 80043e2:	a201      	add	r2, pc, #4	@ (adr r2, 80043e8 <vl53l7cx_set_detection_thresholds+0x34>)
 80043e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e8:	08004435 	.word	0x08004435
 80043ec:	08004483 	.word	0x08004483
 80043f0:	08004611 	.word	0x08004611
 80043f4:	080044d1 	.word	0x080044d1
 80043f8:	08004611 	.word	0x08004611
 80043fc:	08004611 	.word	0x08004611
 8004400:	08004611 	.word	0x08004611
 8004404:	0800451f 	.word	0x0800451f
 8004408:	08004611 	.word	0x08004611
 800440c:	08004611 	.word	0x08004611
 8004410:	08004611 	.word	0x08004611
 8004414:	08004611 	.word	0x08004611
 8004418:	0800456d 	.word	0x0800456d
 800441c:	08004611 	.word	0x08004611
 8004420:	08004611 	.word	0x08004611
 8004424:	08004611 	.word	0x08004611
 8004428:	08004611 	.word	0x08004611
 800442c:	08004611 	.word	0x08004611
 8004430:	080045bb 	.word	0x080045bb
		{
			case VL53L7CX_DISTANCE_MM:
				p_thresholds[i].param_low_thresh  *= 4;
 8004434:	7dfa      	ldrb	r2, [r7, #23]
 8004436:	4613      	mov	r3, r2
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	4413      	add	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	461a      	mov	r2, r3
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	4413      	add	r3, r2
 8004444:	6819      	ldr	r1, [r3, #0]
 8004446:	7dfa      	ldrb	r2, [r7, #23]
 8004448:	4613      	mov	r3, r2
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	4413      	add	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	461a      	mov	r2, r3
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	4413      	add	r3, r2
 8004456:	008a      	lsls	r2, r1, #2
 8004458:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 4;
 800445a:	7dfa      	ldrb	r2, [r7, #23]
 800445c:	4613      	mov	r3, r2
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	4413      	add	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	461a      	mov	r2, r3
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	4413      	add	r3, r2
 800446a:	6859      	ldr	r1, [r3, #4]
 800446c:	7dfa      	ldrb	r2, [r7, #23]
 800446e:	4613      	mov	r3, r2
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	4413      	add	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	461a      	mov	r2, r3
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	4413      	add	r3, r2
 800447c:	008a      	lsls	r2, r1, #2
 800447e:	605a      	str	r2, [r3, #4]
				break;
 8004480:	e0c7      	b.n	8004612 <vl53l7cx_set_detection_thresholds+0x25e>
			case VL53L7CX_SIGNAL_PER_SPAD_KCPS:
				p_thresholds[i].param_low_thresh  *= 2048;
 8004482:	7dfa      	ldrb	r2, [r7, #23]
 8004484:	4613      	mov	r3, r2
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	4413      	add	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	461a      	mov	r2, r3
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	4413      	add	r3, r2
 8004492:	6819      	ldr	r1, [r3, #0]
 8004494:	7dfa      	ldrb	r2, [r7, #23]
 8004496:	4613      	mov	r3, r2
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	4413      	add	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	461a      	mov	r2, r3
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	4413      	add	r3, r2
 80044a4:	02ca      	lsls	r2, r1, #11
 80044a6:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 2048;
 80044a8:	7dfa      	ldrb	r2, [r7, #23]
 80044aa:	4613      	mov	r3, r2
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	4413      	add	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	461a      	mov	r2, r3
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	4413      	add	r3, r2
 80044b8:	6859      	ldr	r1, [r3, #4]
 80044ba:	7dfa      	ldrb	r2, [r7, #23]
 80044bc:	4613      	mov	r3, r2
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	4413      	add	r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	461a      	mov	r2, r3
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	4413      	add	r3, r2
 80044ca:	02ca      	lsls	r2, r1, #11
 80044cc:	605a      	str	r2, [r3, #4]
				break;
 80044ce:	e0a0      	b.n	8004612 <vl53l7cx_set_detection_thresholds+0x25e>
			case VL53L7CX_RANGE_SIGMA_MM:
				p_thresholds[i].param_low_thresh  *= 128;
 80044d0:	7dfa      	ldrb	r2, [r7, #23]
 80044d2:	4613      	mov	r3, r2
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	4413      	add	r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	461a      	mov	r2, r3
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	4413      	add	r3, r2
 80044e0:	6819      	ldr	r1, [r3, #0]
 80044e2:	7dfa      	ldrb	r2, [r7, #23]
 80044e4:	4613      	mov	r3, r2
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	4413      	add	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	461a      	mov	r2, r3
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	4413      	add	r3, r2
 80044f2:	01ca      	lsls	r2, r1, #7
 80044f4:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 128;
 80044f6:	7dfa      	ldrb	r2, [r7, #23]
 80044f8:	4613      	mov	r3, r2
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	4413      	add	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	461a      	mov	r2, r3
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	4413      	add	r3, r2
 8004506:	6859      	ldr	r1, [r3, #4]
 8004508:	7dfa      	ldrb	r2, [r7, #23]
 800450a:	4613      	mov	r3, r2
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	4413      	add	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	461a      	mov	r2, r3
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	4413      	add	r3, r2
 8004518:	01ca      	lsls	r2, r1, #7
 800451a:	605a      	str	r2, [r3, #4]
				break;
 800451c:	e079      	b.n	8004612 <vl53l7cx_set_detection_thresholds+0x25e>
			case VL53L7CX_AMBIENT_PER_SPAD_KCPS:
				p_thresholds[i].param_low_thresh  *= 2048;
 800451e:	7dfa      	ldrb	r2, [r7, #23]
 8004520:	4613      	mov	r3, r2
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	4413      	add	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	461a      	mov	r2, r3
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	4413      	add	r3, r2
 800452e:	6819      	ldr	r1, [r3, #0]
 8004530:	7dfa      	ldrb	r2, [r7, #23]
 8004532:	4613      	mov	r3, r2
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	4413      	add	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	461a      	mov	r2, r3
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	4413      	add	r3, r2
 8004540:	02ca      	lsls	r2, r1, #11
 8004542:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 2048;
 8004544:	7dfa      	ldrb	r2, [r7, #23]
 8004546:	4613      	mov	r3, r2
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	4413      	add	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	461a      	mov	r2, r3
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	4413      	add	r3, r2
 8004554:	6859      	ldr	r1, [r3, #4]
 8004556:	7dfa      	ldrb	r2, [r7, #23]
 8004558:	4613      	mov	r3, r2
 800455a:	005b      	lsls	r3, r3, #1
 800455c:	4413      	add	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	461a      	mov	r2, r3
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	4413      	add	r3, r2
 8004566:	02ca      	lsls	r2, r1, #11
 8004568:	605a      	str	r2, [r3, #4]
				break;
 800456a:	e052      	b.n	8004612 <vl53l7cx_set_detection_thresholds+0x25e>
			case VL53L7CX_NB_SPADS_ENABLED:
				p_thresholds[i].param_low_thresh  *= 256;
 800456c:	7dfa      	ldrb	r2, [r7, #23]
 800456e:	4613      	mov	r3, r2
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	4413      	add	r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	461a      	mov	r2, r3
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	4413      	add	r3, r2
 800457c:	6819      	ldr	r1, [r3, #0]
 800457e:	7dfa      	ldrb	r2, [r7, #23]
 8004580:	4613      	mov	r3, r2
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	4413      	add	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	461a      	mov	r2, r3
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	4413      	add	r3, r2
 800458e:	020a      	lsls	r2, r1, #8
 8004590:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 256;
 8004592:	7dfa      	ldrb	r2, [r7, #23]
 8004594:	4613      	mov	r3, r2
 8004596:	005b      	lsls	r3, r3, #1
 8004598:	4413      	add	r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	461a      	mov	r2, r3
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	4413      	add	r3, r2
 80045a2:	6859      	ldr	r1, [r3, #4]
 80045a4:	7dfa      	ldrb	r2, [r7, #23]
 80045a6:	4613      	mov	r3, r2
 80045a8:	005b      	lsls	r3, r3, #1
 80045aa:	4413      	add	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	461a      	mov	r2, r3
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	4413      	add	r3, r2
 80045b4:	020a      	lsls	r2, r1, #8
 80045b6:	605a      	str	r2, [r3, #4]
				break;
 80045b8:	e02b      	b.n	8004612 <vl53l7cx_set_detection_thresholds+0x25e>
			case VL53L7CX_MOTION_INDICATOR:
				p_thresholds[i].param_low_thresh  *= 65535;
 80045ba:	7dfa      	ldrb	r2, [r7, #23]
 80045bc:	4613      	mov	r3, r2
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	4413      	add	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	461a      	mov	r2, r3
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	4413      	add	r3, r2
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	7df9      	ldrb	r1, [r7, #23]
 80045ce:	460b      	mov	r3, r1
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	440b      	add	r3, r1
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	4619      	mov	r1, r3
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	4419      	add	r1, r3
 80045dc:	4613      	mov	r3, r2
 80045de:	041b      	lsls	r3, r3, #16
 80045e0:	1a9b      	subs	r3, r3, r2
 80045e2:	600b      	str	r3, [r1, #0]
				p_thresholds[i].param_high_thresh *= 65535;
 80045e4:	7dfa      	ldrb	r2, [r7, #23]
 80045e6:	4613      	mov	r3, r2
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	4413      	add	r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	461a      	mov	r2, r3
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	4413      	add	r3, r2
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	7df9      	ldrb	r1, [r7, #23]
 80045f8:	460b      	mov	r3, r1
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	440b      	add	r3, r1
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4619      	mov	r1, r3
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	4419      	add	r1, r3
 8004606:	4613      	mov	r3, r2
 8004608:	041b      	lsls	r3, r3, #16
 800460a:	1a9b      	subs	r3, r3, r2
 800460c:	604b      	str	r3, [r1, #4]
				break;
 800460e:	e000      	b.n	8004612 <vl53l7cx_set_detection_thresholds+0x25e>
			default:
				break;
 8004610:	bf00      	nop
	for(i = 0; i < (uint8_t) VL53L7CX_NB_THRESHOLDS; i++)
 8004612:	7dfb      	ldrb	r3, [r7, #23]
 8004614:	3301      	adds	r3, #1
 8004616:	75fb      	strb	r3, [r7, #23]
 8004618:	7dfb      	ldrb	r3, [r7, #23]
 800461a:	2b3f      	cmp	r3, #63	@ 0x3f
 800461c:	f67f aedb 	bls.w	80043d6 <vl53l7cx_set_detection_thresholds+0x22>
		}
	}

	/* Set valid target list */
	status |= vl53l7cx_dci_write_data(p_dev, (uint8_t*)grp_valid_target_cfg,
 8004620:	f107 010c 	add.w	r1, r7, #12
 8004624:	2308      	movs	r3, #8
 8004626:	f64b 12f0 	movw	r2, #47600	@ 0xb9f0
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7ff fdb2 	bl	8004194 <vl53l7cx_dci_write_data>
 8004630:	4603      	mov	r3, r0
 8004632:	461a      	mov	r2, r3
 8004634:	7dbb      	ldrb	r3, [r7, #22]
 8004636:	4313      	orrs	r3, r2
 8004638:	75bb      	strb	r3, [r7, #22]
			VL53L7CX_DCI_DET_THRESH_VALID_STATUS,
			(uint16_t)sizeof(grp_valid_target_cfg));

	/* Set thresholds configuration */
	status |= vl53l7cx_dci_write_data(p_dev, (uint8_t*)p_thresholds,
 800463a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800463e:	f24b 62e8 	movw	r2, #46824	@ 0xb6e8
 8004642:	6839      	ldr	r1, [r7, #0]
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f7ff fda5 	bl	8004194 <vl53l7cx_dci_write_data>
 800464a:	4603      	mov	r3, r0
 800464c:	461a      	mov	r2, r3
 800464e:	7dbb      	ldrb	r3, [r7, #22]
 8004650:	4313      	orrs	r3, r2
 8004652:	75bb      	strb	r3, [r7, #22]
			VL53L7CX_DCI_DET_THRESH_START,
			(uint16_t)(VL53L7CX_NB_THRESHOLDS
			*sizeof(VL53L7CX_DetectionThresholds)));

	return status;
 8004654:	7dbb      	ldrb	r3, [r7, #22]
}
 8004656:	4618      	mov	r0, r3
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	080083b0 	.word	0x080083b0

08004664 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004668:	4b06      	ldr	r3, [pc, #24]	@ (8004684 <SystemInit+0x20>)
 800466a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800466e:	4a05      	ldr	r2, [pc, #20]	@ (8004684 <SystemInit+0x20>)
 8004670:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004674:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004678:	bf00      	nop
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	e000ed00 	.word	0xe000ed00

08004688 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800468c:	4b0e      	ldr	r3, [pc, #56]	@ (80046c8 <HAL_Init+0x40>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a0d      	ldr	r2, [pc, #52]	@ (80046c8 <HAL_Init+0x40>)
 8004692:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004696:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004698:	4b0b      	ldr	r3, [pc, #44]	@ (80046c8 <HAL_Init+0x40>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a0a      	ldr	r2, [pc, #40]	@ (80046c8 <HAL_Init+0x40>)
 800469e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80046a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046a4:	4b08      	ldr	r3, [pc, #32]	@ (80046c8 <HAL_Init+0x40>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a07      	ldr	r2, [pc, #28]	@ (80046c8 <HAL_Init+0x40>)
 80046aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046b0:	2003      	movs	r0, #3
 80046b2:	f000 f94f 	bl	8004954 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80046b6:	2000      	movs	r0, #0
 80046b8:	f000 f808 	bl	80046cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80046bc:	f7fc fae0 	bl	8000c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	40023c00 	.word	0x40023c00

080046cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80046d4:	4b12      	ldr	r3, [pc, #72]	@ (8004720 <HAL_InitTick+0x54>)
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	4b12      	ldr	r3, [pc, #72]	@ (8004724 <HAL_InitTick+0x58>)
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	4619      	mov	r1, r3
 80046de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80046e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80046e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 f967 	bl	80049be <HAL_SYSTICK_Config>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e00e      	b.n	8004718 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b0f      	cmp	r3, #15
 80046fe:	d80a      	bhi.n	8004716 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004700:	2200      	movs	r2, #0
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	f04f 30ff 	mov.w	r0, #4294967295
 8004708:	f000 f92f 	bl	800496a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800470c:	4a06      	ldr	r2, [pc, #24]	@ (8004728 <HAL_InitTick+0x5c>)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004712:	2300      	movs	r3, #0
 8004714:	e000      	b.n	8004718 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
}
 8004718:	4618      	mov	r0, r3
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	20000040 	.word	0x20000040
 8004724:	20000048 	.word	0x20000048
 8004728:	20000044 	.word	0x20000044

0800472c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800472c:	b480      	push	{r7}
 800472e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004730:	4b06      	ldr	r3, [pc, #24]	@ (800474c <HAL_IncTick+0x20>)
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	461a      	mov	r2, r3
 8004736:	4b06      	ldr	r3, [pc, #24]	@ (8004750 <HAL_IncTick+0x24>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4413      	add	r3, r2
 800473c:	4a04      	ldr	r2, [pc, #16]	@ (8004750 <HAL_IncTick+0x24>)
 800473e:	6013      	str	r3, [r2, #0]
}
 8004740:	bf00      	nop
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	20000048 	.word	0x20000048
 8004750:	20002fac 	.word	0x20002fac

08004754 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004754:	b480      	push	{r7}
 8004756:	af00      	add	r7, sp, #0
  return uwTick;
 8004758:	4b03      	ldr	r3, [pc, #12]	@ (8004768 <HAL_GetTick+0x14>)
 800475a:	681b      	ldr	r3, [r3, #0]
}
 800475c:	4618      	mov	r0, r3
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	20002fac 	.word	0x20002fac

0800476c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004774:	f7ff ffee 	bl	8004754 <HAL_GetTick>
 8004778:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004784:	d005      	beq.n	8004792 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004786:	4b0a      	ldr	r3, [pc, #40]	@ (80047b0 <HAL_Delay+0x44>)
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	461a      	mov	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4413      	add	r3, r2
 8004790:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004792:	bf00      	nop
 8004794:	f7ff ffde 	bl	8004754 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d8f7      	bhi.n	8004794 <HAL_Delay+0x28>
  {
  }
}
 80047a4:	bf00      	nop
 80047a6:	bf00      	nop
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	20000048 	.word	0x20000048

080047b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f003 0307 	and.w	r3, r3, #7
 80047c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047c4:	4b0c      	ldr	r3, [pc, #48]	@ (80047f8 <__NVIC_SetPriorityGrouping+0x44>)
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80047d0:	4013      	ands	r3, r2
 80047d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80047e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047e6:	4a04      	ldr	r2, [pc, #16]	@ (80047f8 <__NVIC_SetPriorityGrouping+0x44>)
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	60d3      	str	r3, [r2, #12]
}
 80047ec:	bf00      	nop
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	e000ed00 	.word	0xe000ed00

080047fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004800:	4b04      	ldr	r3, [pc, #16]	@ (8004814 <__NVIC_GetPriorityGrouping+0x18>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	0a1b      	lsrs	r3, r3, #8
 8004806:	f003 0307 	and.w	r3, r3, #7
}
 800480a:	4618      	mov	r0, r3
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr
 8004814:	e000ed00 	.word	0xe000ed00

08004818 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	4603      	mov	r3, r0
 8004820:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004826:	2b00      	cmp	r3, #0
 8004828:	db0b      	blt.n	8004842 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800482a:	79fb      	ldrb	r3, [r7, #7]
 800482c:	f003 021f 	and.w	r2, r3, #31
 8004830:	4907      	ldr	r1, [pc, #28]	@ (8004850 <__NVIC_EnableIRQ+0x38>)
 8004832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004836:	095b      	lsrs	r3, r3, #5
 8004838:	2001      	movs	r0, #1
 800483a:	fa00 f202 	lsl.w	r2, r0, r2
 800483e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004842:	bf00      	nop
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	e000e100 	.word	0xe000e100

08004854 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	4603      	mov	r3, r0
 800485c:	6039      	str	r1, [r7, #0]
 800485e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004864:	2b00      	cmp	r3, #0
 8004866:	db0a      	blt.n	800487e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	b2da      	uxtb	r2, r3
 800486c:	490c      	ldr	r1, [pc, #48]	@ (80048a0 <__NVIC_SetPriority+0x4c>)
 800486e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004872:	0112      	lsls	r2, r2, #4
 8004874:	b2d2      	uxtb	r2, r2
 8004876:	440b      	add	r3, r1
 8004878:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800487c:	e00a      	b.n	8004894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	b2da      	uxtb	r2, r3
 8004882:	4908      	ldr	r1, [pc, #32]	@ (80048a4 <__NVIC_SetPriority+0x50>)
 8004884:	79fb      	ldrb	r3, [r7, #7]
 8004886:	f003 030f 	and.w	r3, r3, #15
 800488a:	3b04      	subs	r3, #4
 800488c:	0112      	lsls	r2, r2, #4
 800488e:	b2d2      	uxtb	r2, r2
 8004890:	440b      	add	r3, r1
 8004892:	761a      	strb	r2, [r3, #24]
}
 8004894:	bf00      	nop
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	e000e100 	.word	0xe000e100
 80048a4:	e000ed00 	.word	0xe000ed00

080048a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b089      	sub	sp, #36	@ 0x24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f003 0307 	and.w	r3, r3, #7
 80048ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	f1c3 0307 	rsb	r3, r3, #7
 80048c2:	2b04      	cmp	r3, #4
 80048c4:	bf28      	it	cs
 80048c6:	2304      	movcs	r3, #4
 80048c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	3304      	adds	r3, #4
 80048ce:	2b06      	cmp	r3, #6
 80048d0:	d902      	bls.n	80048d8 <NVIC_EncodePriority+0x30>
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	3b03      	subs	r3, #3
 80048d6:	e000      	b.n	80048da <NVIC_EncodePriority+0x32>
 80048d8:	2300      	movs	r3, #0
 80048da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048dc:	f04f 32ff 	mov.w	r2, #4294967295
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	fa02 f303 	lsl.w	r3, r2, r3
 80048e6:	43da      	mvns	r2, r3
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	401a      	ands	r2, r3
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048f0:	f04f 31ff 	mov.w	r1, #4294967295
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	fa01 f303 	lsl.w	r3, r1, r3
 80048fa:	43d9      	mvns	r1, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004900:	4313      	orrs	r3, r2
         );
}
 8004902:	4618      	mov	r0, r3
 8004904:	3724      	adds	r7, #36	@ 0x24
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
	...

08004910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	3b01      	subs	r3, #1
 800491c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004920:	d301      	bcc.n	8004926 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004922:	2301      	movs	r3, #1
 8004924:	e00f      	b.n	8004946 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004926:	4a0a      	ldr	r2, [pc, #40]	@ (8004950 <SysTick_Config+0x40>)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3b01      	subs	r3, #1
 800492c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800492e:	210f      	movs	r1, #15
 8004930:	f04f 30ff 	mov.w	r0, #4294967295
 8004934:	f7ff ff8e 	bl	8004854 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004938:	4b05      	ldr	r3, [pc, #20]	@ (8004950 <SysTick_Config+0x40>)
 800493a:	2200      	movs	r2, #0
 800493c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800493e:	4b04      	ldr	r3, [pc, #16]	@ (8004950 <SysTick_Config+0x40>)
 8004940:	2207      	movs	r2, #7
 8004942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3708      	adds	r7, #8
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	e000e010 	.word	0xe000e010

08004954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f7ff ff29 	bl	80047b4 <__NVIC_SetPriorityGrouping>
}
 8004962:	bf00      	nop
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800496a:	b580      	push	{r7, lr}
 800496c:	b086      	sub	sp, #24
 800496e:	af00      	add	r7, sp, #0
 8004970:	4603      	mov	r3, r0
 8004972:	60b9      	str	r1, [r7, #8]
 8004974:	607a      	str	r2, [r7, #4]
 8004976:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004978:	2300      	movs	r3, #0
 800497a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800497c:	f7ff ff3e 	bl	80047fc <__NVIC_GetPriorityGrouping>
 8004980:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	68b9      	ldr	r1, [r7, #8]
 8004986:	6978      	ldr	r0, [r7, #20]
 8004988:	f7ff ff8e 	bl	80048a8 <NVIC_EncodePriority>
 800498c:	4602      	mov	r2, r0
 800498e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004992:	4611      	mov	r1, r2
 8004994:	4618      	mov	r0, r3
 8004996:	f7ff ff5d 	bl	8004854 <__NVIC_SetPriority>
}
 800499a:	bf00      	nop
 800499c:	3718      	adds	r7, #24
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b082      	sub	sp, #8
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	4603      	mov	r3, r0
 80049aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7ff ff31 	bl	8004818 <__NVIC_EnableIRQ>
}
 80049b6:	bf00      	nop
 80049b8:	3708      	adds	r7, #8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049be:	b580      	push	{r7, lr}
 80049c0:	b082      	sub	sp, #8
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7ff ffa2 	bl	8004910 <SysTick_Config>
 80049cc:	4603      	mov	r3, r0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
	...

080049d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049d8:	b480      	push	{r7}
 80049da:	b089      	sub	sp, #36	@ 0x24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80049e2:	2300      	movs	r3, #0
 80049e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80049e6:	2300      	movs	r3, #0
 80049e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80049ea:	2300      	movs	r3, #0
 80049ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049ee:	2300      	movs	r3, #0
 80049f0:	61fb      	str	r3, [r7, #28]
 80049f2:	e159      	b.n	8004ca8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80049f4:	2201      	movs	r2, #1
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	fa02 f303 	lsl.w	r3, r2, r3
 80049fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	4013      	ands	r3, r2
 8004a06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	f040 8148 	bne.w	8004ca2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f003 0303 	and.w	r3, r3, #3
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d005      	beq.n	8004a2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d130      	bne.n	8004a8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	005b      	lsls	r3, r3, #1
 8004a34:	2203      	movs	r2, #3
 8004a36:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3a:	43db      	mvns	r3, r3
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	68da      	ldr	r2, [r3, #12]
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	005b      	lsls	r3, r3, #1
 8004a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a60:	2201      	movs	r2, #1
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	fa02 f303 	lsl.w	r3, r2, r3
 8004a68:	43db      	mvns	r3, r3
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	091b      	lsrs	r3, r3, #4
 8004a76:	f003 0201 	and.w	r2, r3, #1
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f003 0303 	and.w	r3, r3, #3
 8004a94:	2b03      	cmp	r3, #3
 8004a96:	d017      	beq.n	8004ac8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	005b      	lsls	r3, r3, #1
 8004aa2:	2203      	movs	r2, #3
 8004aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa8:	43db      	mvns	r3, r3
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	4013      	ands	r3, r2
 8004aae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	005b      	lsls	r3, r3, #1
 8004ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8004abc:	69ba      	ldr	r2, [r7, #24]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	69ba      	ldr	r2, [r7, #24]
 8004ac6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f003 0303 	and.w	r3, r3, #3
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d123      	bne.n	8004b1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	08da      	lsrs	r2, r3, #3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	3208      	adds	r2, #8
 8004adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	f003 0307 	and.w	r3, r3, #7
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	220f      	movs	r2, #15
 8004aec:	fa02 f303 	lsl.w	r3, r2, r3
 8004af0:	43db      	mvns	r3, r3
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	4013      	ands	r3, r2
 8004af6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	691a      	ldr	r2, [r3, #16]
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	f003 0307 	and.w	r3, r3, #7
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	fa02 f303 	lsl.w	r3, r2, r3
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	08da      	lsrs	r2, r3, #3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	3208      	adds	r2, #8
 8004b16:	69b9      	ldr	r1, [r7, #24]
 8004b18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	005b      	lsls	r3, r3, #1
 8004b26:	2203      	movs	r2, #3
 8004b28:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2c:	43db      	mvns	r3, r3
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	4013      	ands	r3, r2
 8004b32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f003 0203 	and.w	r2, r3, #3
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	005b      	lsls	r3, r3, #1
 8004b40:	fa02 f303 	lsl.w	r3, r2, r3
 8004b44:	69ba      	ldr	r2, [r7, #24]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f000 80a2 	beq.w	8004ca2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b5e:	2300      	movs	r3, #0
 8004b60:	60fb      	str	r3, [r7, #12]
 8004b62:	4b57      	ldr	r3, [pc, #348]	@ (8004cc0 <HAL_GPIO_Init+0x2e8>)
 8004b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b66:	4a56      	ldr	r2, [pc, #344]	@ (8004cc0 <HAL_GPIO_Init+0x2e8>)
 8004b68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b6e:	4b54      	ldr	r3, [pc, #336]	@ (8004cc0 <HAL_GPIO_Init+0x2e8>)
 8004b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b76:	60fb      	str	r3, [r7, #12]
 8004b78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b7a:	4a52      	ldr	r2, [pc, #328]	@ (8004cc4 <HAL_GPIO_Init+0x2ec>)
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	089b      	lsrs	r3, r3, #2
 8004b80:	3302      	adds	r3, #2
 8004b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	f003 0303 	and.w	r3, r3, #3
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	220f      	movs	r2, #15
 8004b92:	fa02 f303 	lsl.w	r3, r2, r3
 8004b96:	43db      	mvns	r3, r3
 8004b98:	69ba      	ldr	r2, [r7, #24]
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a49      	ldr	r2, [pc, #292]	@ (8004cc8 <HAL_GPIO_Init+0x2f0>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d019      	beq.n	8004bda <HAL_GPIO_Init+0x202>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a48      	ldr	r2, [pc, #288]	@ (8004ccc <HAL_GPIO_Init+0x2f4>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d013      	beq.n	8004bd6 <HAL_GPIO_Init+0x1fe>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a47      	ldr	r2, [pc, #284]	@ (8004cd0 <HAL_GPIO_Init+0x2f8>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d00d      	beq.n	8004bd2 <HAL_GPIO_Init+0x1fa>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a46      	ldr	r2, [pc, #280]	@ (8004cd4 <HAL_GPIO_Init+0x2fc>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d007      	beq.n	8004bce <HAL_GPIO_Init+0x1f6>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a45      	ldr	r2, [pc, #276]	@ (8004cd8 <HAL_GPIO_Init+0x300>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d101      	bne.n	8004bca <HAL_GPIO_Init+0x1f2>
 8004bc6:	2304      	movs	r3, #4
 8004bc8:	e008      	b.n	8004bdc <HAL_GPIO_Init+0x204>
 8004bca:	2307      	movs	r3, #7
 8004bcc:	e006      	b.n	8004bdc <HAL_GPIO_Init+0x204>
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e004      	b.n	8004bdc <HAL_GPIO_Init+0x204>
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	e002      	b.n	8004bdc <HAL_GPIO_Init+0x204>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e000      	b.n	8004bdc <HAL_GPIO_Init+0x204>
 8004bda:	2300      	movs	r3, #0
 8004bdc:	69fa      	ldr	r2, [r7, #28]
 8004bde:	f002 0203 	and.w	r2, r2, #3
 8004be2:	0092      	lsls	r2, r2, #2
 8004be4:	4093      	lsls	r3, r2
 8004be6:	69ba      	ldr	r2, [r7, #24]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bec:	4935      	ldr	r1, [pc, #212]	@ (8004cc4 <HAL_GPIO_Init+0x2ec>)
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	089b      	lsrs	r3, r3, #2
 8004bf2:	3302      	adds	r3, #2
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004bfa:	4b38      	ldr	r3, [pc, #224]	@ (8004cdc <HAL_GPIO_Init+0x304>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	43db      	mvns	r3, r3
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	4013      	ands	r3, r2
 8004c08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c1e:	4a2f      	ldr	r2, [pc, #188]	@ (8004cdc <HAL_GPIO_Init+0x304>)
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c24:	4b2d      	ldr	r3, [pc, #180]	@ (8004cdc <HAL_GPIO_Init+0x304>)
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	43db      	mvns	r3, r3
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	4013      	ands	r3, r2
 8004c32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d003      	beq.n	8004c48 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c48:	4a24      	ldr	r2, [pc, #144]	@ (8004cdc <HAL_GPIO_Init+0x304>)
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004c4e:	4b23      	ldr	r3, [pc, #140]	@ (8004cdc <HAL_GPIO_Init+0x304>)
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	43db      	mvns	r3, r3
 8004c58:	69ba      	ldr	r2, [r7, #24]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004c6a:	69ba      	ldr	r2, [r7, #24]
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c72:	4a1a      	ldr	r2, [pc, #104]	@ (8004cdc <HAL_GPIO_Init+0x304>)
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c78:	4b18      	ldr	r3, [pc, #96]	@ (8004cdc <HAL_GPIO_Init+0x304>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	43db      	mvns	r3, r3
 8004c82:	69ba      	ldr	r2, [r7, #24]
 8004c84:	4013      	ands	r3, r2
 8004c86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d003      	beq.n	8004c9c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c9c:	4a0f      	ldr	r2, [pc, #60]	@ (8004cdc <HAL_GPIO_Init+0x304>)
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	61fb      	str	r3, [r7, #28]
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	2b0f      	cmp	r3, #15
 8004cac:	f67f aea2 	bls.w	80049f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004cb0:	bf00      	nop
 8004cb2:	bf00      	nop
 8004cb4:	3724      	adds	r7, #36	@ 0x24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	40023800 	.word	0x40023800
 8004cc4:	40013800 	.word	0x40013800
 8004cc8:	40020000 	.word	0x40020000
 8004ccc:	40020400 	.word	0x40020400
 8004cd0:	40020800 	.word	0x40020800
 8004cd4:	40020c00 	.word	0x40020c00
 8004cd8:	40021000 	.word	0x40021000
 8004cdc:	40013c00 	.word	0x40013c00

08004ce0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b087      	sub	sp, #28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004cea:	2300      	movs	r3, #0
 8004cec:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	617b      	str	r3, [r7, #20]
 8004cfa:	e0bb      	b.n	8004e74 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	fa02 f303 	lsl.w	r3, r2, r3
 8004d04:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004d06:	683a      	ldr	r2, [r7, #0]
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	f040 80ab 	bne.w	8004e6e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004d18:	4a5c      	ldr	r2, [pc, #368]	@ (8004e8c <HAL_GPIO_DeInit+0x1ac>)
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	089b      	lsrs	r3, r3, #2
 8004d1e:	3302      	adds	r3, #2
 8004d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d24:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	f003 0303 	and.w	r3, r3, #3
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	220f      	movs	r2, #15
 8004d30:	fa02 f303 	lsl.w	r3, r2, r3
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	4013      	ands	r3, r2
 8004d38:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a54      	ldr	r2, [pc, #336]	@ (8004e90 <HAL_GPIO_DeInit+0x1b0>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d019      	beq.n	8004d76 <HAL_GPIO_DeInit+0x96>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a53      	ldr	r2, [pc, #332]	@ (8004e94 <HAL_GPIO_DeInit+0x1b4>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d013      	beq.n	8004d72 <HAL_GPIO_DeInit+0x92>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a52      	ldr	r2, [pc, #328]	@ (8004e98 <HAL_GPIO_DeInit+0x1b8>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d00d      	beq.n	8004d6e <HAL_GPIO_DeInit+0x8e>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a51      	ldr	r2, [pc, #324]	@ (8004e9c <HAL_GPIO_DeInit+0x1bc>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d007      	beq.n	8004d6a <HAL_GPIO_DeInit+0x8a>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a50      	ldr	r2, [pc, #320]	@ (8004ea0 <HAL_GPIO_DeInit+0x1c0>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d101      	bne.n	8004d66 <HAL_GPIO_DeInit+0x86>
 8004d62:	2304      	movs	r3, #4
 8004d64:	e008      	b.n	8004d78 <HAL_GPIO_DeInit+0x98>
 8004d66:	2307      	movs	r3, #7
 8004d68:	e006      	b.n	8004d78 <HAL_GPIO_DeInit+0x98>
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e004      	b.n	8004d78 <HAL_GPIO_DeInit+0x98>
 8004d6e:	2302      	movs	r3, #2
 8004d70:	e002      	b.n	8004d78 <HAL_GPIO_DeInit+0x98>
 8004d72:	2301      	movs	r3, #1
 8004d74:	e000      	b.n	8004d78 <HAL_GPIO_DeInit+0x98>
 8004d76:	2300      	movs	r3, #0
 8004d78:	697a      	ldr	r2, [r7, #20]
 8004d7a:	f002 0203 	and.w	r2, r2, #3
 8004d7e:	0092      	lsls	r2, r2, #2
 8004d80:	4093      	lsls	r3, r2
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d132      	bne.n	8004dee <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004d88:	4b46      	ldr	r3, [pc, #280]	@ (8004ea4 <HAL_GPIO_DeInit+0x1c4>)
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	43db      	mvns	r3, r3
 8004d90:	4944      	ldr	r1, [pc, #272]	@ (8004ea4 <HAL_GPIO_DeInit+0x1c4>)
 8004d92:	4013      	ands	r3, r2
 8004d94:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004d96:	4b43      	ldr	r3, [pc, #268]	@ (8004ea4 <HAL_GPIO_DeInit+0x1c4>)
 8004d98:	685a      	ldr	r2, [r3, #4]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	43db      	mvns	r3, r3
 8004d9e:	4941      	ldr	r1, [pc, #260]	@ (8004ea4 <HAL_GPIO_DeInit+0x1c4>)
 8004da0:	4013      	ands	r3, r2
 8004da2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004da4:	4b3f      	ldr	r3, [pc, #252]	@ (8004ea4 <HAL_GPIO_DeInit+0x1c4>)
 8004da6:	68da      	ldr	r2, [r3, #12]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	43db      	mvns	r3, r3
 8004dac:	493d      	ldr	r1, [pc, #244]	@ (8004ea4 <HAL_GPIO_DeInit+0x1c4>)
 8004dae:	4013      	ands	r3, r2
 8004db0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004db2:	4b3c      	ldr	r3, [pc, #240]	@ (8004ea4 <HAL_GPIO_DeInit+0x1c4>)
 8004db4:	689a      	ldr	r2, [r3, #8]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	43db      	mvns	r3, r3
 8004dba:	493a      	ldr	r1, [pc, #232]	@ (8004ea4 <HAL_GPIO_DeInit+0x1c4>)
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	f003 0303 	and.w	r3, r3, #3
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	220f      	movs	r2, #15
 8004dca:	fa02 f303 	lsl.w	r3, r2, r3
 8004dce:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004dd0:	4a2e      	ldr	r2, [pc, #184]	@ (8004e8c <HAL_GPIO_DeInit+0x1ac>)
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	089b      	lsrs	r3, r3, #2
 8004dd6:	3302      	adds	r3, #2
 8004dd8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	43da      	mvns	r2, r3
 8004de0:	482a      	ldr	r0, [pc, #168]	@ (8004e8c <HAL_GPIO_DeInit+0x1ac>)
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	089b      	lsrs	r3, r3, #2
 8004de6:	400a      	ands	r2, r1
 8004de8:	3302      	adds	r3, #2
 8004dea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	005b      	lsls	r3, r3, #1
 8004df6:	2103      	movs	r1, #3
 8004df8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dfc:	43db      	mvns	r3, r3
 8004dfe:	401a      	ands	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	08da      	lsrs	r2, r3, #3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	3208      	adds	r2, #8
 8004e0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	220f      	movs	r2, #15
 8004e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1e:	43db      	mvns	r3, r3
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	08d2      	lsrs	r2, r2, #3
 8004e24:	4019      	ands	r1, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	3208      	adds	r2, #8
 8004e2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68da      	ldr	r2, [r3, #12]
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	005b      	lsls	r3, r3, #1
 8004e36:	2103      	movs	r1, #3
 8004e38:	fa01 f303 	lsl.w	r3, r1, r3
 8004e3c:	43db      	mvns	r3, r3
 8004e3e:	401a      	ands	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	2101      	movs	r1, #1
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e50:	43db      	mvns	r3, r3
 8004e52:	401a      	ands	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689a      	ldr	r2, [r3, #8]
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	005b      	lsls	r3, r3, #1
 8004e60:	2103      	movs	r1, #3
 8004e62:	fa01 f303 	lsl.w	r3, r1, r3
 8004e66:	43db      	mvns	r3, r3
 8004e68:	401a      	ands	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	3301      	adds	r3, #1
 8004e72:	617b      	str	r3, [r7, #20]
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	2b0f      	cmp	r3, #15
 8004e78:	f67f af40 	bls.w	8004cfc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004e7c:	bf00      	nop
 8004e7e:	bf00      	nop
 8004e80:	371c      	adds	r7, #28
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	40013800 	.word	0x40013800
 8004e90:	40020000 	.word	0x40020000
 8004e94:	40020400 	.word	0x40020400
 8004e98:	40020800 	.word	0x40020800
 8004e9c:	40020c00 	.word	0x40020c00
 8004ea0:	40021000 	.word	0x40021000
 8004ea4:	40013c00 	.word	0x40013c00

08004ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	807b      	strh	r3, [r7, #2]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004eb8:	787b      	ldrb	r3, [r7, #1]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ebe:	887a      	ldrh	r2, [r7, #2]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004ec4:	e003      	b.n	8004ece <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ec6:	887b      	ldrh	r3, [r7, #2]
 8004ec8:	041a      	lsls	r2, r3, #16
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	619a      	str	r2, [r3, #24]
}
 8004ece:	bf00      	nop
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
	...

08004edc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004ee6:	4b08      	ldr	r3, [pc, #32]	@ (8004f08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ee8:	695a      	ldr	r2, [r3, #20]
 8004eea:	88fb      	ldrh	r3, [r7, #6]
 8004eec:	4013      	ands	r3, r2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d006      	beq.n	8004f00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ef2:	4a05      	ldr	r2, [pc, #20]	@ (8004f08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ef4:	88fb      	ldrh	r3, [r7, #6]
 8004ef6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ef8:	88fb      	ldrh	r3, [r7, #6]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7fb fd8e 	bl	8000a1c <HAL_GPIO_EXTI_Callback>
  }
}
 8004f00:	bf00      	nop
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	40013c00 	.word	0x40013c00

08004f0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e12b      	b.n	8005176 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d106      	bne.n	8004f38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f95d 	bl	80051f2 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2224      	movs	r2, #36	@ 0x24
 8004f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 0201 	bic.w	r2, r2, #1
 8004f4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004f70:	f001 fcbe 	bl	80068f0 <HAL_RCC_GetPCLK1Freq>
 8004f74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	4a81      	ldr	r2, [pc, #516]	@ (8005180 <HAL_I2C_Init+0x274>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d807      	bhi.n	8004f90 <HAL_I2C_Init+0x84>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	4a80      	ldr	r2, [pc, #512]	@ (8005184 <HAL_I2C_Init+0x278>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	bf94      	ite	ls
 8004f88:	2301      	movls	r3, #1
 8004f8a:	2300      	movhi	r3, #0
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	e006      	b.n	8004f9e <HAL_I2C_Init+0x92>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4a7d      	ldr	r2, [pc, #500]	@ (8005188 <HAL_I2C_Init+0x27c>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	bf94      	ite	ls
 8004f98:	2301      	movls	r3, #1
 8004f9a:	2300      	movhi	r3, #0
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d001      	beq.n	8004fa6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e0e7      	b.n	8005176 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	4a78      	ldr	r2, [pc, #480]	@ (800518c <HAL_I2C_Init+0x280>)
 8004faa:	fba2 2303 	umull	r2, r3, r2, r3
 8004fae:	0c9b      	lsrs	r3, r3, #18
 8004fb0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6a1b      	ldr	r3, [r3, #32]
 8004fcc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	4a6a      	ldr	r2, [pc, #424]	@ (8005180 <HAL_I2C_Init+0x274>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d802      	bhi.n	8004fe0 <HAL_I2C_Init+0xd4>
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	3301      	adds	r3, #1
 8004fde:	e009      	b.n	8004ff4 <HAL_I2C_Init+0xe8>
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004fe6:	fb02 f303 	mul.w	r3, r2, r3
 8004fea:	4a69      	ldr	r2, [pc, #420]	@ (8005190 <HAL_I2C_Init+0x284>)
 8004fec:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff0:	099b      	lsrs	r3, r3, #6
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	6812      	ldr	r2, [r2, #0]
 8004ff8:	430b      	orrs	r3, r1
 8004ffa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005006:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	495c      	ldr	r1, [pc, #368]	@ (8005180 <HAL_I2C_Init+0x274>)
 8005010:	428b      	cmp	r3, r1
 8005012:	d819      	bhi.n	8005048 <HAL_I2C_Init+0x13c>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	1e59      	subs	r1, r3, #1
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	005b      	lsls	r3, r3, #1
 800501e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005022:	1c59      	adds	r1, r3, #1
 8005024:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005028:	400b      	ands	r3, r1
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00a      	beq.n	8005044 <HAL_I2C_Init+0x138>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	1e59      	subs	r1, r3, #1
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	005b      	lsls	r3, r3, #1
 8005038:	fbb1 f3f3 	udiv	r3, r1, r3
 800503c:	3301      	adds	r3, #1
 800503e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005042:	e051      	b.n	80050e8 <HAL_I2C_Init+0x1dc>
 8005044:	2304      	movs	r3, #4
 8005046:	e04f      	b.n	80050e8 <HAL_I2C_Init+0x1dc>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d111      	bne.n	8005074 <HAL_I2C_Init+0x168>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	1e58      	subs	r0, r3, #1
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6859      	ldr	r1, [r3, #4]
 8005058:	460b      	mov	r3, r1
 800505a:	005b      	lsls	r3, r3, #1
 800505c:	440b      	add	r3, r1
 800505e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005062:	3301      	adds	r3, #1
 8005064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005068:	2b00      	cmp	r3, #0
 800506a:	bf0c      	ite	eq
 800506c:	2301      	moveq	r3, #1
 800506e:	2300      	movne	r3, #0
 8005070:	b2db      	uxtb	r3, r3
 8005072:	e012      	b.n	800509a <HAL_I2C_Init+0x18e>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	1e58      	subs	r0, r3, #1
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6859      	ldr	r1, [r3, #4]
 800507c:	460b      	mov	r3, r1
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	440b      	add	r3, r1
 8005082:	0099      	lsls	r1, r3, #2
 8005084:	440b      	add	r3, r1
 8005086:	fbb0 f3f3 	udiv	r3, r0, r3
 800508a:	3301      	adds	r3, #1
 800508c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005090:	2b00      	cmp	r3, #0
 8005092:	bf0c      	ite	eq
 8005094:	2301      	moveq	r3, #1
 8005096:	2300      	movne	r3, #0
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d001      	beq.n	80050a2 <HAL_I2C_Init+0x196>
 800509e:	2301      	movs	r3, #1
 80050a0:	e022      	b.n	80050e8 <HAL_I2C_Init+0x1dc>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10e      	bne.n	80050c8 <HAL_I2C_Init+0x1bc>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	1e58      	subs	r0, r3, #1
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6859      	ldr	r1, [r3, #4]
 80050b2:	460b      	mov	r3, r1
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	440b      	add	r3, r1
 80050b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80050bc:	3301      	adds	r3, #1
 80050be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050c6:	e00f      	b.n	80050e8 <HAL_I2C_Init+0x1dc>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	1e58      	subs	r0, r3, #1
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6859      	ldr	r1, [r3, #4]
 80050d0:	460b      	mov	r3, r1
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	440b      	add	r3, r1
 80050d6:	0099      	lsls	r1, r3, #2
 80050d8:	440b      	add	r3, r1
 80050da:	fbb0 f3f3 	udiv	r3, r0, r3
 80050de:	3301      	adds	r3, #1
 80050e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80050e8:	6879      	ldr	r1, [r7, #4]
 80050ea:	6809      	ldr	r1, [r1, #0]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	69da      	ldr	r2, [r3, #28]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	431a      	orrs	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	430a      	orrs	r2, r1
 800510a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005116:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	6911      	ldr	r1, [r2, #16]
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	68d2      	ldr	r2, [r2, #12]
 8005122:	4311      	orrs	r1, r2
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	6812      	ldr	r2, [r2, #0]
 8005128:	430b      	orrs	r3, r1
 800512a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	695a      	ldr	r2, [r3, #20]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	431a      	orrs	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	430a      	orrs	r2, r1
 8005146:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0201 	orr.w	r2, r2, #1
 8005156:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2220      	movs	r2, #32
 8005162:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	000186a0 	.word	0x000186a0
 8005184:	001e847f 	.word	0x001e847f
 8005188:	003d08ff 	.word	0x003d08ff
 800518c:	431bde83 	.word	0x431bde83
 8005190:	10624dd3 	.word	0x10624dd3

08005194 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e021      	b.n	80051ea <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2224      	movs	r2, #36	@ 0x24
 80051aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f022 0201 	bic.w	r2, r2, #1
 80051bc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f821 	bl	8005206 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3708      	adds	r7, #8
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b083      	sub	sp, #12
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80051fa:	bf00      	nop
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005206:	b480      	push	{r7}
 8005208:	b083      	sub	sp, #12
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800520e:	bf00      	nop
 8005210:	370c      	adds	r7, #12
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
	...

0800521c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b088      	sub	sp, #32
 8005220:	af02      	add	r7, sp, #8
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	4608      	mov	r0, r1
 8005226:	4611      	mov	r1, r2
 8005228:	461a      	mov	r2, r3
 800522a:	4603      	mov	r3, r0
 800522c:	817b      	strh	r3, [r7, #10]
 800522e:	460b      	mov	r3, r1
 8005230:	813b      	strh	r3, [r7, #8]
 8005232:	4613      	mov	r3, r2
 8005234:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005236:	f7ff fa8d 	bl	8004754 <HAL_GetTick>
 800523a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005242:	b2db      	uxtb	r3, r3
 8005244:	2b20      	cmp	r3, #32
 8005246:	f040 80d9 	bne.w	80053fc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	2319      	movs	r3, #25
 8005250:	2201      	movs	r2, #1
 8005252:	496d      	ldr	r1, [pc, #436]	@ (8005408 <HAL_I2C_Mem_Write+0x1ec>)
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 fca5 	bl	8005ba4 <I2C_WaitOnFlagUntilTimeout>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d001      	beq.n	8005264 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005260:	2302      	movs	r3, #2
 8005262:	e0cc      	b.n	80053fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800526a:	2b01      	cmp	r3, #1
 800526c:	d101      	bne.n	8005272 <HAL_I2C_Mem_Write+0x56>
 800526e:	2302      	movs	r3, #2
 8005270:	e0c5      	b.n	80053fe <HAL_I2C_Mem_Write+0x1e2>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	2b01      	cmp	r3, #1
 8005286:	d007      	beq.n	8005298 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f042 0201 	orr.w	r2, r2, #1
 8005296:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2221      	movs	r2, #33	@ 0x21
 80052ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2240      	movs	r2, #64	@ 0x40
 80052b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6a3a      	ldr	r2, [r7, #32]
 80052c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80052c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4a4d      	ldr	r2, [pc, #308]	@ (800540c <HAL_I2C_Mem_Write+0x1f0>)
 80052d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80052da:	88f8      	ldrh	r0, [r7, #6]
 80052dc:	893a      	ldrh	r2, [r7, #8]
 80052de:	8979      	ldrh	r1, [r7, #10]
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	9301      	str	r3, [sp, #4]
 80052e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	4603      	mov	r3, r0
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f000 fadc 	bl	80058a8 <I2C_RequestMemoryWrite>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d052      	beq.n	800539c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e081      	b.n	80053fe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f000 fd6a 	bl	8005dd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00d      	beq.n	8005326 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800530e:	2b04      	cmp	r3, #4
 8005310:	d107      	bne.n	8005322 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005320:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e06b      	b.n	80053fe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800532a:	781a      	ldrb	r2, [r3, #0]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005336:	1c5a      	adds	r2, r3, #1
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005340:	3b01      	subs	r3, #1
 8005342:	b29a      	uxth	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800534c:	b29b      	uxth	r3, r3
 800534e:	3b01      	subs	r3, #1
 8005350:	b29a      	uxth	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	695b      	ldr	r3, [r3, #20]
 800535c:	f003 0304 	and.w	r3, r3, #4
 8005360:	2b04      	cmp	r3, #4
 8005362:	d11b      	bne.n	800539c <HAL_I2C_Mem_Write+0x180>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005368:	2b00      	cmp	r3, #0
 800536a:	d017      	beq.n	800539c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005370:	781a      	ldrb	r2, [r3, #0]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537c:	1c5a      	adds	r2, r3, #1
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005386:	3b01      	subs	r3, #1
 8005388:	b29a      	uxth	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005392:	b29b      	uxth	r3, r3
 8005394:	3b01      	subs	r3, #1
 8005396:	b29a      	uxth	r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1aa      	bne.n	80052fa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f000 fd5d 	bl	8005e68 <I2C_WaitOnBTFFlagUntilTimeout>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00d      	beq.n	80053d0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b8:	2b04      	cmp	r3, #4
 80053ba:	d107      	bne.n	80053cc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053ca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e016      	b.n	80053fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2220      	movs	r2, #32
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80053f8:	2300      	movs	r3, #0
 80053fa:	e000      	b.n	80053fe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80053fc:	2302      	movs	r3, #2
  }
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3718      	adds	r7, #24
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	00100002 	.word	0x00100002
 800540c:	ffff0000 	.word	0xffff0000

08005410 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b08c      	sub	sp, #48	@ 0x30
 8005414:	af02      	add	r7, sp, #8
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	4608      	mov	r0, r1
 800541a:	4611      	mov	r1, r2
 800541c:	461a      	mov	r2, r3
 800541e:	4603      	mov	r3, r0
 8005420:	817b      	strh	r3, [r7, #10]
 8005422:	460b      	mov	r3, r1
 8005424:	813b      	strh	r3, [r7, #8]
 8005426:	4613      	mov	r3, r2
 8005428:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800542a:	f7ff f993 	bl	8004754 <HAL_GetTick>
 800542e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005436:	b2db      	uxtb	r3, r3
 8005438:	2b20      	cmp	r3, #32
 800543a:	f040 8214 	bne.w	8005866 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800543e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	2319      	movs	r3, #25
 8005444:	2201      	movs	r2, #1
 8005446:	497b      	ldr	r1, [pc, #492]	@ (8005634 <HAL_I2C_Mem_Read+0x224>)
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f000 fbab 	bl	8005ba4 <I2C_WaitOnFlagUntilTimeout>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d001      	beq.n	8005458 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005454:	2302      	movs	r3, #2
 8005456:	e207      	b.n	8005868 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800545e:	2b01      	cmp	r3, #1
 8005460:	d101      	bne.n	8005466 <HAL_I2C_Mem_Read+0x56>
 8005462:	2302      	movs	r3, #2
 8005464:	e200      	b.n	8005868 <HAL_I2C_Mem_Read+0x458>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0301 	and.w	r3, r3, #1
 8005478:	2b01      	cmp	r3, #1
 800547a:	d007      	beq.n	800548c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f042 0201 	orr.w	r2, r2, #1
 800548a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800549a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2222      	movs	r2, #34	@ 0x22
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2240      	movs	r2, #64	@ 0x40
 80054a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80054bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	4a5b      	ldr	r2, [pc, #364]	@ (8005638 <HAL_I2C_Mem_Read+0x228>)
 80054cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80054ce:	88f8      	ldrh	r0, [r7, #6]
 80054d0:	893a      	ldrh	r2, [r7, #8]
 80054d2:	8979      	ldrh	r1, [r7, #10]
 80054d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d6:	9301      	str	r3, [sp, #4]
 80054d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054da:	9300      	str	r3, [sp, #0]
 80054dc:	4603      	mov	r3, r0
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f000 fa78 	bl	80059d4 <I2C_RequestMemoryRead>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e1bc      	b.n	8005868 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d113      	bne.n	800551e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054f6:	2300      	movs	r3, #0
 80054f8:	623b      	str	r3, [r7, #32]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	695b      	ldr	r3, [r3, #20]
 8005500:	623b      	str	r3, [r7, #32]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	623b      	str	r3, [r7, #32]
 800550a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800551a:	601a      	str	r2, [r3, #0]
 800551c:	e190      	b.n	8005840 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005522:	2b01      	cmp	r3, #1
 8005524:	d11b      	bne.n	800555e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005534:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005536:	2300      	movs	r3, #0
 8005538:	61fb      	str	r3, [r7, #28]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	61fb      	str	r3, [r7, #28]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	61fb      	str	r3, [r7, #28]
 800554a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800555a:	601a      	str	r2, [r3, #0]
 800555c:	e170      	b.n	8005840 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005562:	2b02      	cmp	r3, #2
 8005564:	d11b      	bne.n	800559e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005574:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005584:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005586:	2300      	movs	r3, #0
 8005588:	61bb      	str	r3, [r7, #24]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	695b      	ldr	r3, [r3, #20]
 8005590:	61bb      	str	r3, [r7, #24]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	61bb      	str	r3, [r7, #24]
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	e150      	b.n	8005840 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800559e:	2300      	movs	r3, #0
 80055a0:	617b      	str	r3, [r7, #20]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	617b      	str	r3, [r7, #20]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	617b      	str	r3, [r7, #20]
 80055b2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80055b4:	e144      	b.n	8005840 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055ba:	2b03      	cmp	r3, #3
 80055bc:	f200 80f1 	bhi.w	80057a2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d123      	bne.n	8005610 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055ca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f000 fc93 	bl	8005ef8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e145      	b.n	8005868 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	691a      	ldr	r2, [r3, #16]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e6:	b2d2      	uxtb	r2, r2
 80055e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ee:	1c5a      	adds	r2, r3, #1
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055f8:	3b01      	subs	r3, #1
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005604:	b29b      	uxth	r3, r3
 8005606:	3b01      	subs	r3, #1
 8005608:	b29a      	uxth	r2, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800560e:	e117      	b.n	8005840 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005614:	2b02      	cmp	r3, #2
 8005616:	d14e      	bne.n	80056b6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561a:	9300      	str	r3, [sp, #0]
 800561c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800561e:	2200      	movs	r2, #0
 8005620:	4906      	ldr	r1, [pc, #24]	@ (800563c <HAL_I2C_Mem_Read+0x22c>)
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f000 fabe 	bl	8005ba4 <I2C_WaitOnFlagUntilTimeout>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d008      	beq.n	8005640 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e11a      	b.n	8005868 <HAL_I2C_Mem_Read+0x458>
 8005632:	bf00      	nop
 8005634:	00100002 	.word	0x00100002
 8005638:	ffff0000 	.word	0xffff0000
 800563c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800564e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	691a      	ldr	r2, [r3, #16]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565a:	b2d2      	uxtb	r2, r2
 800565c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005662:	1c5a      	adds	r2, r3, #1
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800566c:	3b01      	subs	r3, #1
 800566e:	b29a      	uxth	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005678:	b29b      	uxth	r3, r3
 800567a:	3b01      	subs	r3, #1
 800567c:	b29a      	uxth	r2, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	691a      	ldr	r2, [r3, #16]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800568c:	b2d2      	uxtb	r2, r2
 800568e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005694:	1c5a      	adds	r2, r3, #1
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800569e:	3b01      	subs	r3, #1
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	3b01      	subs	r3, #1
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80056b4:	e0c4      	b.n	8005840 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80056b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b8:	9300      	str	r3, [sp, #0]
 80056ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056bc:	2200      	movs	r2, #0
 80056be:	496c      	ldr	r1, [pc, #432]	@ (8005870 <HAL_I2C_Mem_Read+0x460>)
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f000 fa6f 	bl	8005ba4 <I2C_WaitOnFlagUntilTimeout>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d001      	beq.n	80056d0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e0cb      	b.n	8005868 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	691a      	ldr	r2, [r3, #16]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ea:	b2d2      	uxtb	r2, r2
 80056ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f2:	1c5a      	adds	r2, r3, #1
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056fc:	3b01      	subs	r3, #1
 80056fe:	b29a      	uxth	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005708:	b29b      	uxth	r3, r3
 800570a:	3b01      	subs	r3, #1
 800570c:	b29a      	uxth	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005718:	2200      	movs	r2, #0
 800571a:	4955      	ldr	r1, [pc, #340]	@ (8005870 <HAL_I2C_Mem_Read+0x460>)
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f000 fa41 	bl	8005ba4 <I2C_WaitOnFlagUntilTimeout>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d001      	beq.n	800572c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e09d      	b.n	8005868 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800573a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	691a      	ldr	r2, [r3, #16]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005746:	b2d2      	uxtb	r2, r2
 8005748:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800574e:	1c5a      	adds	r2, r3, #1
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005758:	3b01      	subs	r3, #1
 800575a:	b29a      	uxth	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005764:	b29b      	uxth	r3, r3
 8005766:	3b01      	subs	r3, #1
 8005768:	b29a      	uxth	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	691a      	ldr	r2, [r3, #16]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005778:	b2d2      	uxtb	r2, r2
 800577a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005780:	1c5a      	adds	r2, r3, #1
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800578a:	3b01      	subs	r3, #1
 800578c:	b29a      	uxth	r2, r3
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005796:	b29b      	uxth	r3, r3
 8005798:	3b01      	subs	r3, #1
 800579a:	b29a      	uxth	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80057a0:	e04e      	b.n	8005840 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057a4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f000 fba6 	bl	8005ef8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d001      	beq.n	80057b6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e058      	b.n	8005868 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	691a      	ldr	r2, [r3, #16]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c0:	b2d2      	uxtb	r2, r2
 80057c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c8:	1c5a      	adds	r2, r3, #1
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057d2:	3b01      	subs	r3, #1
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057de:	b29b      	uxth	r3, r3
 80057e0:	3b01      	subs	r3, #1
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	f003 0304 	and.w	r3, r3, #4
 80057f2:	2b04      	cmp	r3, #4
 80057f4:	d124      	bne.n	8005840 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057fa:	2b03      	cmp	r3, #3
 80057fc:	d107      	bne.n	800580e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800580c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	691a      	ldr	r2, [r3, #16]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005818:	b2d2      	uxtb	r2, r2
 800581a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005820:	1c5a      	adds	r2, r3, #1
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800582a:	3b01      	subs	r3, #1
 800582c:	b29a      	uxth	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005836:	b29b      	uxth	r3, r3
 8005838:	3b01      	subs	r3, #1
 800583a:	b29a      	uxth	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005844:	2b00      	cmp	r3, #0
 8005846:	f47f aeb6 	bne.w	80055b6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2220      	movs	r2, #32
 800584e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005862:	2300      	movs	r3, #0
 8005864:	e000      	b.n	8005868 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005866:	2302      	movs	r3, #2
  }
}
 8005868:	4618      	mov	r0, r3
 800586a:	3728      	adds	r7, #40	@ 0x28
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	00010004 	.word	0x00010004

08005874 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005882:	b2db      	uxtb	r3, r3
}
 8005884:	4618      	mov	r0, r3
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800589c:	4618      	mov	r0, r3
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b088      	sub	sp, #32
 80058ac:	af02      	add	r7, sp, #8
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	4608      	mov	r0, r1
 80058b2:	4611      	mov	r1, r2
 80058b4:	461a      	mov	r2, r3
 80058b6:	4603      	mov	r3, r0
 80058b8:	817b      	strh	r3, [r7, #10]
 80058ba:	460b      	mov	r3, r1
 80058bc:	813b      	strh	r3, [r7, #8]
 80058be:	4613      	mov	r3, r2
 80058c0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	6a3b      	ldr	r3, [r7, #32]
 80058d8:	2200      	movs	r2, #0
 80058da:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f000 f960 	bl	8005ba4 <I2C_WaitOnFlagUntilTimeout>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00d      	beq.n	8005906 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058f8:	d103      	bne.n	8005902 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005900:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e05f      	b.n	80059c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005906:	897b      	ldrh	r3, [r7, #10]
 8005908:	b2db      	uxtb	r3, r3
 800590a:	461a      	mov	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005914:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005918:	6a3a      	ldr	r2, [r7, #32]
 800591a:	492d      	ldr	r1, [pc, #180]	@ (80059d0 <I2C_RequestMemoryWrite+0x128>)
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f000 f9bb 	bl	8005c98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d001      	beq.n	800592c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e04c      	b.n	80059c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800592c:	2300      	movs	r3, #0
 800592e:	617b      	str	r3, [r7, #20]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	617b      	str	r3, [r7, #20]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	617b      	str	r3, [r7, #20]
 8005940:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005942:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005944:	6a39      	ldr	r1, [r7, #32]
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f000 fa46 	bl	8005dd8 <I2C_WaitOnTXEFlagUntilTimeout>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00d      	beq.n	800596e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005956:	2b04      	cmp	r3, #4
 8005958:	d107      	bne.n	800596a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005968:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e02b      	b.n	80059c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800596e:	88fb      	ldrh	r3, [r7, #6]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d105      	bne.n	8005980 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005974:	893b      	ldrh	r3, [r7, #8]
 8005976:	b2da      	uxtb	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	611a      	str	r2, [r3, #16]
 800597e:	e021      	b.n	80059c4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005980:	893b      	ldrh	r3, [r7, #8]
 8005982:	0a1b      	lsrs	r3, r3, #8
 8005984:	b29b      	uxth	r3, r3
 8005986:	b2da      	uxtb	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800598e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005990:	6a39      	ldr	r1, [r7, #32]
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	f000 fa20 	bl	8005dd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00d      	beq.n	80059ba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a2:	2b04      	cmp	r3, #4
 80059a4:	d107      	bne.n	80059b6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e005      	b.n	80059c6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059ba:	893b      	ldrh	r3, [r7, #8]
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3718      	adds	r7, #24
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	00010002 	.word	0x00010002

080059d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b088      	sub	sp, #32
 80059d8:	af02      	add	r7, sp, #8
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	4608      	mov	r0, r1
 80059de:	4611      	mov	r1, r2
 80059e0:	461a      	mov	r2, r3
 80059e2:	4603      	mov	r3, r0
 80059e4:	817b      	strh	r3, [r7, #10]
 80059e6:	460b      	mov	r3, r1
 80059e8:	813b      	strh	r3, [r7, #8]
 80059ea:	4613      	mov	r3, r2
 80059ec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80059fc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a10:	9300      	str	r3, [sp, #0]
 8005a12:	6a3b      	ldr	r3, [r7, #32]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f000 f8c2 	bl	8005ba4 <I2C_WaitOnFlagUntilTimeout>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00d      	beq.n	8005a42 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a34:	d103      	bne.n	8005a3e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a3c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e0aa      	b.n	8005b98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a42:	897b      	ldrh	r3, [r7, #10]
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	461a      	mov	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005a50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a54:	6a3a      	ldr	r2, [r7, #32]
 8005a56:	4952      	ldr	r1, [pc, #328]	@ (8005ba0 <I2C_RequestMemoryRead+0x1cc>)
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f000 f91d 	bl	8005c98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d001      	beq.n	8005a68 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e097      	b.n	8005b98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a68:	2300      	movs	r3, #0
 8005a6a:	617b      	str	r3, [r7, #20]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	617b      	str	r3, [r7, #20]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	617b      	str	r3, [r7, #20]
 8005a7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a80:	6a39      	ldr	r1, [r7, #32]
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f000 f9a8 	bl	8005dd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00d      	beq.n	8005aaa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a92:	2b04      	cmp	r3, #4
 8005a94:	d107      	bne.n	8005aa6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005aa4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e076      	b.n	8005b98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005aaa:	88fb      	ldrh	r3, [r7, #6]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d105      	bne.n	8005abc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ab0:	893b      	ldrh	r3, [r7, #8]
 8005ab2:	b2da      	uxtb	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	611a      	str	r2, [r3, #16]
 8005aba:	e021      	b.n	8005b00 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005abc:	893b      	ldrh	r3, [r7, #8]
 8005abe:	0a1b      	lsrs	r3, r3, #8
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	b2da      	uxtb	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005acc:	6a39      	ldr	r1, [r7, #32]
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f000 f982 	bl	8005dd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00d      	beq.n	8005af6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ade:	2b04      	cmp	r3, #4
 8005ae0:	d107      	bne.n	8005af2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005af0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e050      	b.n	8005b98 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005af6:	893b      	ldrh	r3, [r7, #8]
 8005af8:	b2da      	uxtb	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b02:	6a39      	ldr	r1, [r7, #32]
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f000 f967 	bl	8005dd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00d      	beq.n	8005b2c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b14:	2b04      	cmp	r3, #4
 8005b16:	d107      	bne.n	8005b28 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b26:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e035      	b.n	8005b98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b3a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3e:	9300      	str	r3, [sp, #0]
 8005b40:	6a3b      	ldr	r3, [r7, #32]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f000 f82b 	bl	8005ba4 <I2C_WaitOnFlagUntilTimeout>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00d      	beq.n	8005b70 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b62:	d103      	bne.n	8005b6c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b6a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e013      	b.n	8005b98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005b70:	897b      	ldrh	r3, [r7, #10]
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	f043 0301 	orr.w	r3, r3, #1
 8005b78:	b2da      	uxtb	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b82:	6a3a      	ldr	r2, [r7, #32]
 8005b84:	4906      	ldr	r1, [pc, #24]	@ (8005ba0 <I2C_RequestMemoryRead+0x1cc>)
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f000 f886 	bl	8005c98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d001      	beq.n	8005b96 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e000      	b.n	8005b98 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3718      	adds	r7, #24
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	00010002 	.word	0x00010002

08005ba4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	603b      	str	r3, [r7, #0]
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bb4:	e048      	b.n	8005c48 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bbc:	d044      	beq.n	8005c48 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bbe:	f7fe fdc9 	bl	8004754 <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d302      	bcc.n	8005bd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d139      	bne.n	8005c48 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	0c1b      	lsrs	r3, r3, #16
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d10d      	bne.n	8005bfa <I2C_WaitOnFlagUntilTimeout+0x56>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	695b      	ldr	r3, [r3, #20]
 8005be4:	43da      	mvns	r2, r3
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	4013      	ands	r3, r2
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	bf0c      	ite	eq
 8005bf0:	2301      	moveq	r3, #1
 8005bf2:	2300      	movne	r3, #0
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	e00c      	b.n	8005c14 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	43da      	mvns	r2, r3
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	4013      	ands	r3, r2
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	bf0c      	ite	eq
 8005c0c:	2301      	moveq	r3, #1
 8005c0e:	2300      	movne	r3, #0
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	461a      	mov	r2, r3
 8005c14:	79fb      	ldrb	r3, [r7, #7]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d116      	bne.n	8005c48 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2220      	movs	r2, #32
 8005c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c34:	f043 0220 	orr.w	r2, r3, #32
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e023      	b.n	8005c90 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	0c1b      	lsrs	r3, r3, #16
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d10d      	bne.n	8005c6e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	695b      	ldr	r3, [r3, #20]
 8005c58:	43da      	mvns	r2, r3
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	bf0c      	ite	eq
 8005c64:	2301      	moveq	r3, #1
 8005c66:	2300      	movne	r3, #0
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	e00c      	b.n	8005c88 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	43da      	mvns	r2, r3
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	4013      	ands	r3, r2
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	bf0c      	ite	eq
 8005c80:	2301      	moveq	r3, #1
 8005c82:	2300      	movne	r3, #0
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	461a      	mov	r2, r3
 8005c88:	79fb      	ldrb	r3, [r7, #7]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d093      	beq.n	8005bb6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]
 8005ca4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ca6:	e071      	b.n	8005d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cb6:	d123      	bne.n	8005d00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cc6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005cd0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2220      	movs	r2, #32
 8005cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cec:	f043 0204 	orr.w	r2, r3, #4
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e067      	b.n	8005dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d06:	d041      	beq.n	8005d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d08:	f7fe fd24 	bl	8004754 <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d302      	bcc.n	8005d1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d136      	bne.n	8005d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	0c1b      	lsrs	r3, r3, #16
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d10c      	bne.n	8005d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	43da      	mvns	r2, r3
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	4013      	ands	r3, r2
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	bf14      	ite	ne
 8005d3a:	2301      	movne	r3, #1
 8005d3c:	2300      	moveq	r3, #0
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	e00b      	b.n	8005d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	43da      	mvns	r2, r3
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	bf14      	ite	ne
 8005d54:	2301      	movne	r3, #1
 8005d56:	2300      	moveq	r3, #0
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d016      	beq.n	8005d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2220      	movs	r2, #32
 8005d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d78:	f043 0220 	orr.w	r2, r3, #32
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e021      	b.n	8005dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	0c1b      	lsrs	r3, r3, #16
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d10c      	bne.n	8005db0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	695b      	ldr	r3, [r3, #20]
 8005d9c:	43da      	mvns	r2, r3
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	4013      	ands	r3, r2
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	bf14      	ite	ne
 8005da8:	2301      	movne	r3, #1
 8005daa:	2300      	moveq	r3, #0
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	e00b      	b.n	8005dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	43da      	mvns	r2, r3
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	4013      	ands	r3, r2
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	bf14      	ite	ne
 8005dc2:	2301      	movne	r3, #1
 8005dc4:	2300      	moveq	r3, #0
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f47f af6d 	bne.w	8005ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005de4:	e034      	b.n	8005e50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f000 f8e3 	bl	8005fb2 <I2C_IsAcknowledgeFailed>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d001      	beq.n	8005df6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e034      	b.n	8005e60 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfc:	d028      	beq.n	8005e50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dfe:	f7fe fca9 	bl	8004754 <HAL_GetTick>
 8005e02:	4602      	mov	r2, r0
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	68ba      	ldr	r2, [r7, #8]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d302      	bcc.n	8005e14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d11d      	bne.n	8005e50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e1e:	2b80      	cmp	r3, #128	@ 0x80
 8005e20:	d016      	beq.n	8005e50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e3c:	f043 0220 	orr.w	r2, r3, #32
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e007      	b.n	8005e60 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e5a:	2b80      	cmp	r3, #128	@ 0x80
 8005e5c:	d1c3      	bne.n	8005de6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e74:	e034      	b.n	8005ee0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f000 f89b 	bl	8005fb2 <I2C_IsAcknowledgeFailed>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d001      	beq.n	8005e86 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e034      	b.n	8005ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e8c:	d028      	beq.n	8005ee0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e8e:	f7fe fc61 	bl	8004754 <HAL_GetTick>
 8005e92:	4602      	mov	r2, r0
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d302      	bcc.n	8005ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d11d      	bne.n	8005ee0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	f003 0304 	and.w	r3, r3, #4
 8005eae:	2b04      	cmp	r3, #4
 8005eb0:	d016      	beq.n	8005ee0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2220      	movs	r2, #32
 8005ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ecc:	f043 0220 	orr.w	r2, r3, #32
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e007      	b.n	8005ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	f003 0304 	and.w	r3, r3, #4
 8005eea:	2b04      	cmp	r3, #4
 8005eec:	d1c3      	bne.n	8005e76 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3710      	adds	r7, #16
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f04:	e049      	b.n	8005f9a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	f003 0310 	and.w	r3, r3, #16
 8005f10:	2b10      	cmp	r3, #16
 8005f12:	d119      	bne.n	8005f48 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f06f 0210 	mvn.w	r2, #16
 8005f1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2220      	movs	r2, #32
 8005f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e030      	b.n	8005faa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f48:	f7fe fc04 	bl	8004754 <HAL_GetTick>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d302      	bcc.n	8005f5e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d11d      	bne.n	8005f9a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	695b      	ldr	r3, [r3, #20]
 8005f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f68:	2b40      	cmp	r3, #64	@ 0x40
 8005f6a:	d016      	beq.n	8005f9a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2220      	movs	r2, #32
 8005f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f86:	f043 0220 	orr.w	r2, r3, #32
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e007      	b.n	8005faa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	695b      	ldr	r3, [r3, #20]
 8005fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fa4:	2b40      	cmp	r3, #64	@ 0x40
 8005fa6:	d1ae      	bne.n	8005f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b083      	sub	sp, #12
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	695b      	ldr	r3, [r3, #20]
 8005fc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fc8:	d11b      	bne.n	8006002 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005fd2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2220      	movs	r2, #32
 8005fde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fee:	f043 0204 	orr.w	r2, r3, #4
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e000      	b.n	8006004 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b086      	sub	sp, #24
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e267      	b.n	80064f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	2b00      	cmp	r3, #0
 800602c:	d075      	beq.n	800611a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800602e:	4b88      	ldr	r3, [pc, #544]	@ (8006250 <HAL_RCC_OscConfig+0x240>)
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	f003 030c 	and.w	r3, r3, #12
 8006036:	2b04      	cmp	r3, #4
 8006038:	d00c      	beq.n	8006054 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800603a:	4b85      	ldr	r3, [pc, #532]	@ (8006250 <HAL_RCC_OscConfig+0x240>)
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006042:	2b08      	cmp	r3, #8
 8006044:	d112      	bne.n	800606c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006046:	4b82      	ldr	r3, [pc, #520]	@ (8006250 <HAL_RCC_OscConfig+0x240>)
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800604e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006052:	d10b      	bne.n	800606c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006054:	4b7e      	ldr	r3, [pc, #504]	@ (8006250 <HAL_RCC_OscConfig+0x240>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d05b      	beq.n	8006118 <HAL_RCC_OscConfig+0x108>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d157      	bne.n	8006118 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e242      	b.n	80064f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006074:	d106      	bne.n	8006084 <HAL_RCC_OscConfig+0x74>
 8006076:	4b76      	ldr	r3, [pc, #472]	@ (8006250 <HAL_RCC_OscConfig+0x240>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a75      	ldr	r2, [pc, #468]	@ (8006250 <HAL_RCC_OscConfig+0x240>)
 800607c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006080:	6013      	str	r3, [r2, #0]
 8006082:	e01d      	b.n	80060c0 <HAL_RCC_OscConfig+0xb0>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800608c:	d10c      	bne.n	80060a8 <HAL_RCC_OscConfig+0x98>
 800608e:	4b70      	ldr	r3, [pc, #448]	@ (8006250 <HAL_RCC_OscConfig+0x240>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a6f      	ldr	r2, [pc, #444]	@ (8006250 <HAL_RCC_OscConfig+0x240>)
 8006094:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006098:	6013      	str	r3, [r2, #0]
 800609a:	4b6d      	ldr	r3, [pc, #436]	@ (8006250 <HAL_RCC_OscConfig+0x240>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a6c      	ldr	r2, [pc, #432]	@ (8006250 <HAL_RCC_OscConfig+0x240>)
 80060a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060a4:	6013      	str	r3, [r2, #0]
 80060a6:	e00b      	b.n	80060c0 <HAL_RCC_OscConfig+0xb0>
 80060a8:	4b69      	ldr	r3, [pc, #420]	@ (8006250 <HAL_RCC_OscConfig+0x240>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a68      	ldr	r2, [pc, #416]	@ (8006250 <HAL_RCC_OscConfig+0x240>)
 80060ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060b2:	6013      	str	r3, [r2, #0]
 80060b4:	4b66      	ldr	r3, [pc, #408]	@ (8006250 <HAL_RCC_OscConfig+0x240>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a65      	ldr	r2, [pc, #404]	@ (8006250 <HAL_RCC_OscConfig+0x240>)
 80060ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80060be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d013      	beq.n	80060f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060c8:	f7fe fb44 	bl	8004754 <HAL_GetTick>
 80060cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060ce:	e008      	b.n	80060e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060d0:	f7fe fb40 	bl	8004754 <HAL_GetTick>
 80060d4:	4602      	mov	r2, r0
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	2b64      	cmp	r3, #100	@ 0x64
 80060dc:	d901      	bls.n	80060e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e207      	b.n	80064f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060e2:	4b5b      	ldr	r3, [pc, #364]	@ (8006250 <HAL_RCC_OscConfig+0x240>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d0f0      	beq.n	80060d0 <HAL_RCC_OscConfig+0xc0>
 80060ee:	e014      	b.n	800611a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060f0:	f7fe fb30 	bl	8004754 <HAL_GetTick>
 80060f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060f6:	e008      	b.n	800610a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060f8:	f7fe fb2c 	bl	8004754 <HAL_GetTick>
 80060fc:	4602      	mov	r2, r0
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	2b64      	cmp	r3, #100	@ 0x64
 8006104:	d901      	bls.n	800610a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e1f3      	b.n	80064f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800610a:	4b51      	ldr	r3, [pc, #324]	@ (8006250 <HAL_RCC_OscConfig+0x240>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1f0      	bne.n	80060f8 <HAL_RCC_OscConfig+0xe8>
 8006116:	e000      	b.n	800611a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006118:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 0302 	and.w	r3, r3, #2
 8006122:	2b00      	cmp	r3, #0
 8006124:	d063      	beq.n	80061ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006126:	4b4a      	ldr	r3, [pc, #296]	@ (8006250 <HAL_RCC_OscConfig+0x240>)
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	f003 030c 	and.w	r3, r3, #12
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00b      	beq.n	800614a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006132:	4b47      	ldr	r3, [pc, #284]	@ (8006250 <HAL_RCC_OscConfig+0x240>)
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800613a:	2b08      	cmp	r3, #8
 800613c:	d11c      	bne.n	8006178 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800613e:	4b44      	ldr	r3, [pc, #272]	@ (8006250 <HAL_RCC_OscConfig+0x240>)
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d116      	bne.n	8006178 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800614a:	4b41      	ldr	r3, [pc, #260]	@ (8006250 <HAL_RCC_OscConfig+0x240>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0302 	and.w	r3, r3, #2
 8006152:	2b00      	cmp	r3, #0
 8006154:	d005      	beq.n	8006162 <HAL_RCC_OscConfig+0x152>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d001      	beq.n	8006162 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e1c7      	b.n	80064f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006162:	4b3b      	ldr	r3, [pc, #236]	@ (8006250 <HAL_RCC_OscConfig+0x240>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	00db      	lsls	r3, r3, #3
 8006170:	4937      	ldr	r1, [pc, #220]	@ (8006250 <HAL_RCC_OscConfig+0x240>)
 8006172:	4313      	orrs	r3, r2
 8006174:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006176:	e03a      	b.n	80061ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d020      	beq.n	80061c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006180:	4b34      	ldr	r3, [pc, #208]	@ (8006254 <HAL_RCC_OscConfig+0x244>)
 8006182:	2201      	movs	r2, #1
 8006184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006186:	f7fe fae5 	bl	8004754 <HAL_GetTick>
 800618a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800618c:	e008      	b.n	80061a0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800618e:	f7fe fae1 	bl	8004754 <HAL_GetTick>
 8006192:	4602      	mov	r2, r0
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	2b02      	cmp	r3, #2
 800619a:	d901      	bls.n	80061a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	e1a8      	b.n	80064f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061a0:	4b2b      	ldr	r3, [pc, #172]	@ (8006250 <HAL_RCC_OscConfig+0x240>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 0302 	and.w	r3, r3, #2
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d0f0      	beq.n	800618e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061ac:	4b28      	ldr	r3, [pc, #160]	@ (8006250 <HAL_RCC_OscConfig+0x240>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	00db      	lsls	r3, r3, #3
 80061ba:	4925      	ldr	r1, [pc, #148]	@ (8006250 <HAL_RCC_OscConfig+0x240>)
 80061bc:	4313      	orrs	r3, r2
 80061be:	600b      	str	r3, [r1, #0]
 80061c0:	e015      	b.n	80061ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061c2:	4b24      	ldr	r3, [pc, #144]	@ (8006254 <HAL_RCC_OscConfig+0x244>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061c8:	f7fe fac4 	bl	8004754 <HAL_GetTick>
 80061cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061ce:	e008      	b.n	80061e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061d0:	f7fe fac0 	bl	8004754 <HAL_GetTick>
 80061d4:	4602      	mov	r2, r0
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d901      	bls.n	80061e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80061de:	2303      	movs	r3, #3
 80061e0:	e187      	b.n	80064f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061e2:	4b1b      	ldr	r3, [pc, #108]	@ (8006250 <HAL_RCC_OscConfig+0x240>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 0302 	and.w	r3, r3, #2
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1f0      	bne.n	80061d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0308 	and.w	r3, r3, #8
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d036      	beq.n	8006268 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d016      	beq.n	8006230 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006202:	4b15      	ldr	r3, [pc, #84]	@ (8006258 <HAL_RCC_OscConfig+0x248>)
 8006204:	2201      	movs	r2, #1
 8006206:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006208:	f7fe faa4 	bl	8004754 <HAL_GetTick>
 800620c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800620e:	e008      	b.n	8006222 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006210:	f7fe faa0 	bl	8004754 <HAL_GetTick>
 8006214:	4602      	mov	r2, r0
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	2b02      	cmp	r3, #2
 800621c:	d901      	bls.n	8006222 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e167      	b.n	80064f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006222:	4b0b      	ldr	r3, [pc, #44]	@ (8006250 <HAL_RCC_OscConfig+0x240>)
 8006224:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006226:	f003 0302 	and.w	r3, r3, #2
 800622a:	2b00      	cmp	r3, #0
 800622c:	d0f0      	beq.n	8006210 <HAL_RCC_OscConfig+0x200>
 800622e:	e01b      	b.n	8006268 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006230:	4b09      	ldr	r3, [pc, #36]	@ (8006258 <HAL_RCC_OscConfig+0x248>)
 8006232:	2200      	movs	r2, #0
 8006234:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006236:	f7fe fa8d 	bl	8004754 <HAL_GetTick>
 800623a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800623c:	e00e      	b.n	800625c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800623e:	f7fe fa89 	bl	8004754 <HAL_GetTick>
 8006242:	4602      	mov	r2, r0
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	2b02      	cmp	r3, #2
 800624a:	d907      	bls.n	800625c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800624c:	2303      	movs	r3, #3
 800624e:	e150      	b.n	80064f2 <HAL_RCC_OscConfig+0x4e2>
 8006250:	40023800 	.word	0x40023800
 8006254:	42470000 	.word	0x42470000
 8006258:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800625c:	4b88      	ldr	r3, [pc, #544]	@ (8006480 <HAL_RCC_OscConfig+0x470>)
 800625e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006260:	f003 0302 	and.w	r3, r3, #2
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1ea      	bne.n	800623e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0304 	and.w	r3, r3, #4
 8006270:	2b00      	cmp	r3, #0
 8006272:	f000 8097 	beq.w	80063a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006276:	2300      	movs	r3, #0
 8006278:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800627a:	4b81      	ldr	r3, [pc, #516]	@ (8006480 <HAL_RCC_OscConfig+0x470>)
 800627c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800627e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10f      	bne.n	80062a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006286:	2300      	movs	r3, #0
 8006288:	60bb      	str	r3, [r7, #8]
 800628a:	4b7d      	ldr	r3, [pc, #500]	@ (8006480 <HAL_RCC_OscConfig+0x470>)
 800628c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800628e:	4a7c      	ldr	r2, [pc, #496]	@ (8006480 <HAL_RCC_OscConfig+0x470>)
 8006290:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006294:	6413      	str	r3, [r2, #64]	@ 0x40
 8006296:	4b7a      	ldr	r3, [pc, #488]	@ (8006480 <HAL_RCC_OscConfig+0x470>)
 8006298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800629a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800629e:	60bb      	str	r3, [r7, #8]
 80062a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062a2:	2301      	movs	r3, #1
 80062a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062a6:	4b77      	ldr	r3, [pc, #476]	@ (8006484 <HAL_RCC_OscConfig+0x474>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d118      	bne.n	80062e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062b2:	4b74      	ldr	r3, [pc, #464]	@ (8006484 <HAL_RCC_OscConfig+0x474>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a73      	ldr	r2, [pc, #460]	@ (8006484 <HAL_RCC_OscConfig+0x474>)
 80062b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062be:	f7fe fa49 	bl	8004754 <HAL_GetTick>
 80062c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062c4:	e008      	b.n	80062d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062c6:	f7fe fa45 	bl	8004754 <HAL_GetTick>
 80062ca:	4602      	mov	r2, r0
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d901      	bls.n	80062d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e10c      	b.n	80064f2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062d8:	4b6a      	ldr	r3, [pc, #424]	@ (8006484 <HAL_RCC_OscConfig+0x474>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d0f0      	beq.n	80062c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d106      	bne.n	80062fa <HAL_RCC_OscConfig+0x2ea>
 80062ec:	4b64      	ldr	r3, [pc, #400]	@ (8006480 <HAL_RCC_OscConfig+0x470>)
 80062ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062f0:	4a63      	ldr	r2, [pc, #396]	@ (8006480 <HAL_RCC_OscConfig+0x470>)
 80062f2:	f043 0301 	orr.w	r3, r3, #1
 80062f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80062f8:	e01c      	b.n	8006334 <HAL_RCC_OscConfig+0x324>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	2b05      	cmp	r3, #5
 8006300:	d10c      	bne.n	800631c <HAL_RCC_OscConfig+0x30c>
 8006302:	4b5f      	ldr	r3, [pc, #380]	@ (8006480 <HAL_RCC_OscConfig+0x470>)
 8006304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006306:	4a5e      	ldr	r2, [pc, #376]	@ (8006480 <HAL_RCC_OscConfig+0x470>)
 8006308:	f043 0304 	orr.w	r3, r3, #4
 800630c:	6713      	str	r3, [r2, #112]	@ 0x70
 800630e:	4b5c      	ldr	r3, [pc, #368]	@ (8006480 <HAL_RCC_OscConfig+0x470>)
 8006310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006312:	4a5b      	ldr	r2, [pc, #364]	@ (8006480 <HAL_RCC_OscConfig+0x470>)
 8006314:	f043 0301 	orr.w	r3, r3, #1
 8006318:	6713      	str	r3, [r2, #112]	@ 0x70
 800631a:	e00b      	b.n	8006334 <HAL_RCC_OscConfig+0x324>
 800631c:	4b58      	ldr	r3, [pc, #352]	@ (8006480 <HAL_RCC_OscConfig+0x470>)
 800631e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006320:	4a57      	ldr	r2, [pc, #348]	@ (8006480 <HAL_RCC_OscConfig+0x470>)
 8006322:	f023 0301 	bic.w	r3, r3, #1
 8006326:	6713      	str	r3, [r2, #112]	@ 0x70
 8006328:	4b55      	ldr	r3, [pc, #340]	@ (8006480 <HAL_RCC_OscConfig+0x470>)
 800632a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800632c:	4a54      	ldr	r2, [pc, #336]	@ (8006480 <HAL_RCC_OscConfig+0x470>)
 800632e:	f023 0304 	bic.w	r3, r3, #4
 8006332:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d015      	beq.n	8006368 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800633c:	f7fe fa0a 	bl	8004754 <HAL_GetTick>
 8006340:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006342:	e00a      	b.n	800635a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006344:	f7fe fa06 	bl	8004754 <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006352:	4293      	cmp	r3, r2
 8006354:	d901      	bls.n	800635a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	e0cb      	b.n	80064f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800635a:	4b49      	ldr	r3, [pc, #292]	@ (8006480 <HAL_RCC_OscConfig+0x470>)
 800635c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800635e:	f003 0302 	and.w	r3, r3, #2
 8006362:	2b00      	cmp	r3, #0
 8006364:	d0ee      	beq.n	8006344 <HAL_RCC_OscConfig+0x334>
 8006366:	e014      	b.n	8006392 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006368:	f7fe f9f4 	bl	8004754 <HAL_GetTick>
 800636c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800636e:	e00a      	b.n	8006386 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006370:	f7fe f9f0 	bl	8004754 <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800637e:	4293      	cmp	r3, r2
 8006380:	d901      	bls.n	8006386 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e0b5      	b.n	80064f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006386:	4b3e      	ldr	r3, [pc, #248]	@ (8006480 <HAL_RCC_OscConfig+0x470>)
 8006388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800638a:	f003 0302 	and.w	r3, r3, #2
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1ee      	bne.n	8006370 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006392:	7dfb      	ldrb	r3, [r7, #23]
 8006394:	2b01      	cmp	r3, #1
 8006396:	d105      	bne.n	80063a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006398:	4b39      	ldr	r3, [pc, #228]	@ (8006480 <HAL_RCC_OscConfig+0x470>)
 800639a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800639c:	4a38      	ldr	r2, [pc, #224]	@ (8006480 <HAL_RCC_OscConfig+0x470>)
 800639e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f000 80a1 	beq.w	80064f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80063ae:	4b34      	ldr	r3, [pc, #208]	@ (8006480 <HAL_RCC_OscConfig+0x470>)
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f003 030c 	and.w	r3, r3, #12
 80063b6:	2b08      	cmp	r3, #8
 80063b8:	d05c      	beq.n	8006474 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d141      	bne.n	8006446 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063c2:	4b31      	ldr	r3, [pc, #196]	@ (8006488 <HAL_RCC_OscConfig+0x478>)
 80063c4:	2200      	movs	r2, #0
 80063c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063c8:	f7fe f9c4 	bl	8004754 <HAL_GetTick>
 80063cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063ce:	e008      	b.n	80063e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063d0:	f7fe f9c0 	bl	8004754 <HAL_GetTick>
 80063d4:	4602      	mov	r2, r0
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d901      	bls.n	80063e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e087      	b.n	80064f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063e2:	4b27      	ldr	r3, [pc, #156]	@ (8006480 <HAL_RCC_OscConfig+0x470>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1f0      	bne.n	80063d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	69da      	ldr	r2, [r3, #28]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	431a      	orrs	r2, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063fc:	019b      	lsls	r3, r3, #6
 80063fe:	431a      	orrs	r2, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006404:	085b      	lsrs	r3, r3, #1
 8006406:	3b01      	subs	r3, #1
 8006408:	041b      	lsls	r3, r3, #16
 800640a:	431a      	orrs	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006410:	061b      	lsls	r3, r3, #24
 8006412:	491b      	ldr	r1, [pc, #108]	@ (8006480 <HAL_RCC_OscConfig+0x470>)
 8006414:	4313      	orrs	r3, r2
 8006416:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006418:	4b1b      	ldr	r3, [pc, #108]	@ (8006488 <HAL_RCC_OscConfig+0x478>)
 800641a:	2201      	movs	r2, #1
 800641c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800641e:	f7fe f999 	bl	8004754 <HAL_GetTick>
 8006422:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006424:	e008      	b.n	8006438 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006426:	f7fe f995 	bl	8004754 <HAL_GetTick>
 800642a:	4602      	mov	r2, r0
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	2b02      	cmp	r3, #2
 8006432:	d901      	bls.n	8006438 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006434:	2303      	movs	r3, #3
 8006436:	e05c      	b.n	80064f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006438:	4b11      	ldr	r3, [pc, #68]	@ (8006480 <HAL_RCC_OscConfig+0x470>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d0f0      	beq.n	8006426 <HAL_RCC_OscConfig+0x416>
 8006444:	e054      	b.n	80064f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006446:	4b10      	ldr	r3, [pc, #64]	@ (8006488 <HAL_RCC_OscConfig+0x478>)
 8006448:	2200      	movs	r2, #0
 800644a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800644c:	f7fe f982 	bl	8004754 <HAL_GetTick>
 8006450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006452:	e008      	b.n	8006466 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006454:	f7fe f97e 	bl	8004754 <HAL_GetTick>
 8006458:	4602      	mov	r2, r0
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	2b02      	cmp	r3, #2
 8006460:	d901      	bls.n	8006466 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e045      	b.n	80064f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006466:	4b06      	ldr	r3, [pc, #24]	@ (8006480 <HAL_RCC_OscConfig+0x470>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1f0      	bne.n	8006454 <HAL_RCC_OscConfig+0x444>
 8006472:	e03d      	b.n	80064f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	699b      	ldr	r3, [r3, #24]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d107      	bne.n	800648c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e038      	b.n	80064f2 <HAL_RCC_OscConfig+0x4e2>
 8006480:	40023800 	.word	0x40023800
 8006484:	40007000 	.word	0x40007000
 8006488:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800648c:	4b1b      	ldr	r3, [pc, #108]	@ (80064fc <HAL_RCC_OscConfig+0x4ec>)
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	2b01      	cmp	r3, #1
 8006498:	d028      	beq.n	80064ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d121      	bne.n	80064ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d11a      	bne.n	80064ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80064bc:	4013      	ands	r3, r2
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80064c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d111      	bne.n	80064ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064d2:	085b      	lsrs	r3, r3, #1
 80064d4:	3b01      	subs	r3, #1
 80064d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064d8:	429a      	cmp	r2, r3
 80064da:	d107      	bne.n	80064ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d001      	beq.n	80064f0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e000      	b.n	80064f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3718      	adds	r7, #24
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	40023800 	.word	0x40023800

08006500 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d101      	bne.n	8006514 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e0cc      	b.n	80066ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006514:	4b68      	ldr	r3, [pc, #416]	@ (80066b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0307 	and.w	r3, r3, #7
 800651c:	683a      	ldr	r2, [r7, #0]
 800651e:	429a      	cmp	r2, r3
 8006520:	d90c      	bls.n	800653c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006522:	4b65      	ldr	r3, [pc, #404]	@ (80066b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006524:	683a      	ldr	r2, [r7, #0]
 8006526:	b2d2      	uxtb	r2, r2
 8006528:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800652a:	4b63      	ldr	r3, [pc, #396]	@ (80066b8 <HAL_RCC_ClockConfig+0x1b8>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0307 	and.w	r3, r3, #7
 8006532:	683a      	ldr	r2, [r7, #0]
 8006534:	429a      	cmp	r2, r3
 8006536:	d001      	beq.n	800653c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e0b8      	b.n	80066ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 0302 	and.w	r3, r3, #2
 8006544:	2b00      	cmp	r3, #0
 8006546:	d020      	beq.n	800658a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0304 	and.w	r3, r3, #4
 8006550:	2b00      	cmp	r3, #0
 8006552:	d005      	beq.n	8006560 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006554:	4b59      	ldr	r3, [pc, #356]	@ (80066bc <HAL_RCC_ClockConfig+0x1bc>)
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	4a58      	ldr	r2, [pc, #352]	@ (80066bc <HAL_RCC_ClockConfig+0x1bc>)
 800655a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800655e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0308 	and.w	r3, r3, #8
 8006568:	2b00      	cmp	r3, #0
 800656a:	d005      	beq.n	8006578 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800656c:	4b53      	ldr	r3, [pc, #332]	@ (80066bc <HAL_RCC_ClockConfig+0x1bc>)
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	4a52      	ldr	r2, [pc, #328]	@ (80066bc <HAL_RCC_ClockConfig+0x1bc>)
 8006572:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006576:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006578:	4b50      	ldr	r3, [pc, #320]	@ (80066bc <HAL_RCC_ClockConfig+0x1bc>)
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	494d      	ldr	r1, [pc, #308]	@ (80066bc <HAL_RCC_ClockConfig+0x1bc>)
 8006586:	4313      	orrs	r3, r2
 8006588:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	2b00      	cmp	r3, #0
 8006594:	d044      	beq.n	8006620 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	2b01      	cmp	r3, #1
 800659c:	d107      	bne.n	80065ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800659e:	4b47      	ldr	r3, [pc, #284]	@ (80066bc <HAL_RCC_ClockConfig+0x1bc>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d119      	bne.n	80065de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e07f      	b.n	80066ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d003      	beq.n	80065be <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065ba:	2b03      	cmp	r3, #3
 80065bc:	d107      	bne.n	80065ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065be:	4b3f      	ldr	r3, [pc, #252]	@ (80066bc <HAL_RCC_ClockConfig+0x1bc>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d109      	bne.n	80065de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e06f      	b.n	80066ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065ce:	4b3b      	ldr	r3, [pc, #236]	@ (80066bc <HAL_RCC_ClockConfig+0x1bc>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0302 	and.w	r3, r3, #2
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d101      	bne.n	80065de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e067      	b.n	80066ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065de:	4b37      	ldr	r3, [pc, #220]	@ (80066bc <HAL_RCC_ClockConfig+0x1bc>)
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f023 0203 	bic.w	r2, r3, #3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	4934      	ldr	r1, [pc, #208]	@ (80066bc <HAL_RCC_ClockConfig+0x1bc>)
 80065ec:	4313      	orrs	r3, r2
 80065ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065f0:	f7fe f8b0 	bl	8004754 <HAL_GetTick>
 80065f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065f6:	e00a      	b.n	800660e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065f8:	f7fe f8ac 	bl	8004754 <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006606:	4293      	cmp	r3, r2
 8006608:	d901      	bls.n	800660e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e04f      	b.n	80066ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800660e:	4b2b      	ldr	r3, [pc, #172]	@ (80066bc <HAL_RCC_ClockConfig+0x1bc>)
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	f003 020c 	and.w	r2, r3, #12
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	429a      	cmp	r2, r3
 800661e:	d1eb      	bne.n	80065f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006620:	4b25      	ldr	r3, [pc, #148]	@ (80066b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0307 	and.w	r3, r3, #7
 8006628:	683a      	ldr	r2, [r7, #0]
 800662a:	429a      	cmp	r2, r3
 800662c:	d20c      	bcs.n	8006648 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800662e:	4b22      	ldr	r3, [pc, #136]	@ (80066b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006630:	683a      	ldr	r2, [r7, #0]
 8006632:	b2d2      	uxtb	r2, r2
 8006634:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006636:	4b20      	ldr	r3, [pc, #128]	@ (80066b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0307 	and.w	r3, r3, #7
 800663e:	683a      	ldr	r2, [r7, #0]
 8006640:	429a      	cmp	r2, r3
 8006642:	d001      	beq.n	8006648 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e032      	b.n	80066ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0304 	and.w	r3, r3, #4
 8006650:	2b00      	cmp	r3, #0
 8006652:	d008      	beq.n	8006666 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006654:	4b19      	ldr	r3, [pc, #100]	@ (80066bc <HAL_RCC_ClockConfig+0x1bc>)
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	4916      	ldr	r1, [pc, #88]	@ (80066bc <HAL_RCC_ClockConfig+0x1bc>)
 8006662:	4313      	orrs	r3, r2
 8006664:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0308 	and.w	r3, r3, #8
 800666e:	2b00      	cmp	r3, #0
 8006670:	d009      	beq.n	8006686 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006672:	4b12      	ldr	r3, [pc, #72]	@ (80066bc <HAL_RCC_ClockConfig+0x1bc>)
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	00db      	lsls	r3, r3, #3
 8006680:	490e      	ldr	r1, [pc, #56]	@ (80066bc <HAL_RCC_ClockConfig+0x1bc>)
 8006682:	4313      	orrs	r3, r2
 8006684:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006686:	f000 f821 	bl	80066cc <HAL_RCC_GetSysClockFreq>
 800668a:	4602      	mov	r2, r0
 800668c:	4b0b      	ldr	r3, [pc, #44]	@ (80066bc <HAL_RCC_ClockConfig+0x1bc>)
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	091b      	lsrs	r3, r3, #4
 8006692:	f003 030f 	and.w	r3, r3, #15
 8006696:	490a      	ldr	r1, [pc, #40]	@ (80066c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006698:	5ccb      	ldrb	r3, [r1, r3]
 800669a:	fa22 f303 	lsr.w	r3, r2, r3
 800669e:	4a09      	ldr	r2, [pc, #36]	@ (80066c4 <HAL_RCC_ClockConfig+0x1c4>)
 80066a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80066a2:	4b09      	ldr	r3, [pc, #36]	@ (80066c8 <HAL_RCC_ClockConfig+0x1c8>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4618      	mov	r0, r3
 80066a8:	f7fe f810 	bl	80046cc <HAL_InitTick>

  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	40023c00 	.word	0x40023c00
 80066bc:	40023800 	.word	0x40023800
 80066c0:	0801dab4 	.word	0x0801dab4
 80066c4:	20000040 	.word	0x20000040
 80066c8:	20000044 	.word	0x20000044

080066cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066d0:	b094      	sub	sp, #80	@ 0x50
 80066d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80066d4:	2300      	movs	r3, #0
 80066d6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80066d8:	2300      	movs	r3, #0
 80066da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80066dc:	2300      	movs	r3, #0
 80066de:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80066e0:	2300      	movs	r3, #0
 80066e2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066e4:	4b79      	ldr	r3, [pc, #484]	@ (80068cc <HAL_RCC_GetSysClockFreq+0x200>)
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	f003 030c 	and.w	r3, r3, #12
 80066ec:	2b08      	cmp	r3, #8
 80066ee:	d00d      	beq.n	800670c <HAL_RCC_GetSysClockFreq+0x40>
 80066f0:	2b08      	cmp	r3, #8
 80066f2:	f200 80e1 	bhi.w	80068b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d002      	beq.n	8006700 <HAL_RCC_GetSysClockFreq+0x34>
 80066fa:	2b04      	cmp	r3, #4
 80066fc:	d003      	beq.n	8006706 <HAL_RCC_GetSysClockFreq+0x3a>
 80066fe:	e0db      	b.n	80068b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006700:	4b73      	ldr	r3, [pc, #460]	@ (80068d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006702:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006704:	e0db      	b.n	80068be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006706:	4b73      	ldr	r3, [pc, #460]	@ (80068d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8006708:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800670a:	e0d8      	b.n	80068be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800670c:	4b6f      	ldr	r3, [pc, #444]	@ (80068cc <HAL_RCC_GetSysClockFreq+0x200>)
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006714:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006716:	4b6d      	ldr	r3, [pc, #436]	@ (80068cc <HAL_RCC_GetSysClockFreq+0x200>)
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800671e:	2b00      	cmp	r3, #0
 8006720:	d063      	beq.n	80067ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006722:	4b6a      	ldr	r3, [pc, #424]	@ (80068cc <HAL_RCC_GetSysClockFreq+0x200>)
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	099b      	lsrs	r3, r3, #6
 8006728:	2200      	movs	r2, #0
 800672a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800672c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800672e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006734:	633b      	str	r3, [r7, #48]	@ 0x30
 8006736:	2300      	movs	r3, #0
 8006738:	637b      	str	r3, [r7, #52]	@ 0x34
 800673a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800673e:	4622      	mov	r2, r4
 8006740:	462b      	mov	r3, r5
 8006742:	f04f 0000 	mov.w	r0, #0
 8006746:	f04f 0100 	mov.w	r1, #0
 800674a:	0159      	lsls	r1, r3, #5
 800674c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006750:	0150      	lsls	r0, r2, #5
 8006752:	4602      	mov	r2, r0
 8006754:	460b      	mov	r3, r1
 8006756:	4621      	mov	r1, r4
 8006758:	1a51      	subs	r1, r2, r1
 800675a:	6139      	str	r1, [r7, #16]
 800675c:	4629      	mov	r1, r5
 800675e:	eb63 0301 	sbc.w	r3, r3, r1
 8006762:	617b      	str	r3, [r7, #20]
 8006764:	f04f 0200 	mov.w	r2, #0
 8006768:	f04f 0300 	mov.w	r3, #0
 800676c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006770:	4659      	mov	r1, fp
 8006772:	018b      	lsls	r3, r1, #6
 8006774:	4651      	mov	r1, sl
 8006776:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800677a:	4651      	mov	r1, sl
 800677c:	018a      	lsls	r2, r1, #6
 800677e:	4651      	mov	r1, sl
 8006780:	ebb2 0801 	subs.w	r8, r2, r1
 8006784:	4659      	mov	r1, fp
 8006786:	eb63 0901 	sbc.w	r9, r3, r1
 800678a:	f04f 0200 	mov.w	r2, #0
 800678e:	f04f 0300 	mov.w	r3, #0
 8006792:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006796:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800679a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800679e:	4690      	mov	r8, r2
 80067a0:	4699      	mov	r9, r3
 80067a2:	4623      	mov	r3, r4
 80067a4:	eb18 0303 	adds.w	r3, r8, r3
 80067a8:	60bb      	str	r3, [r7, #8]
 80067aa:	462b      	mov	r3, r5
 80067ac:	eb49 0303 	adc.w	r3, r9, r3
 80067b0:	60fb      	str	r3, [r7, #12]
 80067b2:	f04f 0200 	mov.w	r2, #0
 80067b6:	f04f 0300 	mov.w	r3, #0
 80067ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80067be:	4629      	mov	r1, r5
 80067c0:	024b      	lsls	r3, r1, #9
 80067c2:	4621      	mov	r1, r4
 80067c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80067c8:	4621      	mov	r1, r4
 80067ca:	024a      	lsls	r2, r1, #9
 80067cc:	4610      	mov	r0, r2
 80067ce:	4619      	mov	r1, r3
 80067d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067d2:	2200      	movs	r2, #0
 80067d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80067dc:	f7f9 fd50 	bl	8000280 <__aeabi_uldivmod>
 80067e0:	4602      	mov	r2, r0
 80067e2:	460b      	mov	r3, r1
 80067e4:	4613      	mov	r3, r2
 80067e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067e8:	e058      	b.n	800689c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067ea:	4b38      	ldr	r3, [pc, #224]	@ (80068cc <HAL_RCC_GetSysClockFreq+0x200>)
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	099b      	lsrs	r3, r3, #6
 80067f0:	2200      	movs	r2, #0
 80067f2:	4618      	mov	r0, r3
 80067f4:	4611      	mov	r1, r2
 80067f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80067fa:	623b      	str	r3, [r7, #32]
 80067fc:	2300      	movs	r3, #0
 80067fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8006800:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006804:	4642      	mov	r2, r8
 8006806:	464b      	mov	r3, r9
 8006808:	f04f 0000 	mov.w	r0, #0
 800680c:	f04f 0100 	mov.w	r1, #0
 8006810:	0159      	lsls	r1, r3, #5
 8006812:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006816:	0150      	lsls	r0, r2, #5
 8006818:	4602      	mov	r2, r0
 800681a:	460b      	mov	r3, r1
 800681c:	4641      	mov	r1, r8
 800681e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006822:	4649      	mov	r1, r9
 8006824:	eb63 0b01 	sbc.w	fp, r3, r1
 8006828:	f04f 0200 	mov.w	r2, #0
 800682c:	f04f 0300 	mov.w	r3, #0
 8006830:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006834:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006838:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800683c:	ebb2 040a 	subs.w	r4, r2, sl
 8006840:	eb63 050b 	sbc.w	r5, r3, fp
 8006844:	f04f 0200 	mov.w	r2, #0
 8006848:	f04f 0300 	mov.w	r3, #0
 800684c:	00eb      	lsls	r3, r5, #3
 800684e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006852:	00e2      	lsls	r2, r4, #3
 8006854:	4614      	mov	r4, r2
 8006856:	461d      	mov	r5, r3
 8006858:	4643      	mov	r3, r8
 800685a:	18e3      	adds	r3, r4, r3
 800685c:	603b      	str	r3, [r7, #0]
 800685e:	464b      	mov	r3, r9
 8006860:	eb45 0303 	adc.w	r3, r5, r3
 8006864:	607b      	str	r3, [r7, #4]
 8006866:	f04f 0200 	mov.w	r2, #0
 800686a:	f04f 0300 	mov.w	r3, #0
 800686e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006872:	4629      	mov	r1, r5
 8006874:	028b      	lsls	r3, r1, #10
 8006876:	4621      	mov	r1, r4
 8006878:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800687c:	4621      	mov	r1, r4
 800687e:	028a      	lsls	r2, r1, #10
 8006880:	4610      	mov	r0, r2
 8006882:	4619      	mov	r1, r3
 8006884:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006886:	2200      	movs	r2, #0
 8006888:	61bb      	str	r3, [r7, #24]
 800688a:	61fa      	str	r2, [r7, #28]
 800688c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006890:	f7f9 fcf6 	bl	8000280 <__aeabi_uldivmod>
 8006894:	4602      	mov	r2, r0
 8006896:	460b      	mov	r3, r1
 8006898:	4613      	mov	r3, r2
 800689a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800689c:	4b0b      	ldr	r3, [pc, #44]	@ (80068cc <HAL_RCC_GetSysClockFreq+0x200>)
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	0c1b      	lsrs	r3, r3, #16
 80068a2:	f003 0303 	and.w	r3, r3, #3
 80068a6:	3301      	adds	r3, #1
 80068a8:	005b      	lsls	r3, r3, #1
 80068aa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80068ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80068ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80068b6:	e002      	b.n	80068be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80068b8:	4b05      	ldr	r3, [pc, #20]	@ (80068d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80068ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80068bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3750      	adds	r7, #80	@ 0x50
 80068c4:	46bd      	mov	sp, r7
 80068c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068ca:	bf00      	nop
 80068cc:	40023800 	.word	0x40023800
 80068d0:	00f42400 	.word	0x00f42400
 80068d4:	007a1200 	.word	0x007a1200

080068d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068d8:	b480      	push	{r7}
 80068da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068dc:	4b03      	ldr	r3, [pc, #12]	@ (80068ec <HAL_RCC_GetHCLKFreq+0x14>)
 80068de:	681b      	ldr	r3, [r3, #0]
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	20000040 	.word	0x20000040

080068f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80068f4:	f7ff fff0 	bl	80068d8 <HAL_RCC_GetHCLKFreq>
 80068f8:	4602      	mov	r2, r0
 80068fa:	4b05      	ldr	r3, [pc, #20]	@ (8006910 <HAL_RCC_GetPCLK1Freq+0x20>)
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	0a9b      	lsrs	r3, r3, #10
 8006900:	f003 0307 	and.w	r3, r3, #7
 8006904:	4903      	ldr	r1, [pc, #12]	@ (8006914 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006906:	5ccb      	ldrb	r3, [r1, r3]
 8006908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800690c:	4618      	mov	r0, r3
 800690e:	bd80      	pop	{r7, pc}
 8006910:	40023800 	.word	0x40023800
 8006914:	0801dac4 	.word	0x0801dac4

08006918 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800691c:	f7ff ffdc 	bl	80068d8 <HAL_RCC_GetHCLKFreq>
 8006920:	4602      	mov	r2, r0
 8006922:	4b05      	ldr	r3, [pc, #20]	@ (8006938 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	0b5b      	lsrs	r3, r3, #13
 8006928:	f003 0307 	and.w	r3, r3, #7
 800692c:	4903      	ldr	r1, [pc, #12]	@ (800693c <HAL_RCC_GetPCLK2Freq+0x24>)
 800692e:	5ccb      	ldrb	r3, [r1, r3]
 8006930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006934:	4618      	mov	r0, r3
 8006936:	bd80      	pop	{r7, pc}
 8006938:	40023800 	.word	0x40023800
 800693c:	0801dac4 	.word	0x0801dac4

08006940 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d101      	bne.n	8006952 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e042      	b.n	80069d8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006958:	b2db      	uxtb	r3, r3
 800695a:	2b00      	cmp	r3, #0
 800695c:	d106      	bne.n	800696c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f83a 	bl	80069e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2224      	movs	r2, #36	@ 0x24
 8006970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68da      	ldr	r2, [r3, #12]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006982:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 f97d 	bl	8006c84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	691a      	ldr	r2, [r3, #16]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006998:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	695a      	ldr	r2, [r3, #20]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80069a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68da      	ldr	r2, [r3, #12]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80069b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2220      	movs	r2, #32
 80069c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2220      	movs	r2, #32
 80069cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3708      	adds	r7, #8
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 80069e8:	bf00      	nop
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b08a      	sub	sp, #40	@ 0x28
 80069f8:	af02      	add	r7, sp, #8
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	603b      	str	r3, [r7, #0]
 8006a00:	4613      	mov	r3, r2
 8006a02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006a04:	2300      	movs	r3, #0
 8006a06:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	2b20      	cmp	r3, #32
 8006a12:	d175      	bne.n	8006b00 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d002      	beq.n	8006a20 <HAL_UART_Transmit+0x2c>
 8006a1a:	88fb      	ldrh	r3, [r7, #6]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d101      	bne.n	8006a24 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e06e      	b.n	8006b02 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2221      	movs	r2, #33	@ 0x21
 8006a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a32:	f7fd fe8f 	bl	8004754 <HAL_GetTick>
 8006a36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	88fa      	ldrh	r2, [r7, #6]
 8006a3c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	88fa      	ldrh	r2, [r7, #6]
 8006a42:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a4c:	d108      	bne.n	8006a60 <HAL_UART_Transmit+0x6c>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d104      	bne.n	8006a60 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006a56:	2300      	movs	r3, #0
 8006a58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	61bb      	str	r3, [r7, #24]
 8006a5e:	e003      	b.n	8006a68 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a64:	2300      	movs	r3, #0
 8006a66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006a68:	e02e      	b.n	8006ac8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	9300      	str	r3, [sp, #0]
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	2200      	movs	r2, #0
 8006a72:	2180      	movs	r1, #128	@ 0x80
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f000 f848 	bl	8006b0a <UART_WaitOnFlagUntilTimeout>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d005      	beq.n	8006a8c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2220      	movs	r2, #32
 8006a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	e03a      	b.n	8006b02 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d10b      	bne.n	8006aaa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	881b      	ldrh	r3, [r3, #0]
 8006a96:	461a      	mov	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006aa0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	3302      	adds	r3, #2
 8006aa6:	61bb      	str	r3, [r7, #24]
 8006aa8:	e007      	b.n	8006aba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	781a      	ldrb	r2, [r3, #0]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1cb      	bne.n	8006a6a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	9300      	str	r3, [sp, #0]
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	2140      	movs	r1, #64	@ 0x40
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f000 f814 	bl	8006b0a <UART_WaitOnFlagUntilTimeout>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d005      	beq.n	8006af4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2220      	movs	r2, #32
 8006aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e006      	b.n	8006b02 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2220      	movs	r2, #32
 8006af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006afc:	2300      	movs	r3, #0
 8006afe:	e000      	b.n	8006b02 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006b00:	2302      	movs	r3, #2
  }
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3720      	adds	r7, #32
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b086      	sub	sp, #24
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	60f8      	str	r0, [r7, #12]
 8006b12:	60b9      	str	r1, [r7, #8]
 8006b14:	603b      	str	r3, [r7, #0]
 8006b16:	4613      	mov	r3, r2
 8006b18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b1a:	e03b      	b.n	8006b94 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b1c:	6a3b      	ldr	r3, [r7, #32]
 8006b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b22:	d037      	beq.n	8006b94 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b24:	f7fd fe16 	bl	8004754 <HAL_GetTick>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	6a3a      	ldr	r2, [r7, #32]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d302      	bcc.n	8006b3a <UART_WaitOnFlagUntilTimeout+0x30>
 8006b34:	6a3b      	ldr	r3, [r7, #32]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d101      	bne.n	8006b3e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e03a      	b.n	8006bb4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	f003 0304 	and.w	r3, r3, #4
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d023      	beq.n	8006b94 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	2b80      	cmp	r3, #128	@ 0x80
 8006b50:	d020      	beq.n	8006b94 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	2b40      	cmp	r3, #64	@ 0x40
 8006b56:	d01d      	beq.n	8006b94 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0308 	and.w	r3, r3, #8
 8006b62:	2b08      	cmp	r3, #8
 8006b64:	d116      	bne.n	8006b94 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006b66:	2300      	movs	r3, #0
 8006b68:	617b      	str	r3, [r7, #20]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	617b      	str	r3, [r7, #20]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	617b      	str	r3, [r7, #20]
 8006b7a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f000 f81d 	bl	8006bbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2208      	movs	r2, #8
 8006b86:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e00f      	b.n	8006bb4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	68ba      	ldr	r2, [r7, #8]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	bf0c      	ite	eq
 8006ba4:	2301      	moveq	r3, #1
 8006ba6:	2300      	movne	r3, #0
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	461a      	mov	r2, r3
 8006bac:	79fb      	ldrb	r3, [r7, #7]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d0b4      	beq.n	8006b1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3718      	adds	r7, #24
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b095      	sub	sp, #84	@ 0x54
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	330c      	adds	r3, #12
 8006bca:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bce:	e853 3f00 	ldrex	r3, [r3]
 8006bd2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	330c      	adds	r3, #12
 8006be2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006be4:	643a      	str	r2, [r7, #64]	@ 0x40
 8006be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006bea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006bec:	e841 2300 	strex	r3, r2, [r1]
 8006bf0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1e5      	bne.n	8006bc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	3314      	adds	r3, #20
 8006bfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c00:	6a3b      	ldr	r3, [r7, #32]
 8006c02:	e853 3f00 	ldrex	r3, [r3]
 8006c06:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	f023 0301 	bic.w	r3, r3, #1
 8006c0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	3314      	adds	r3, #20
 8006c16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c20:	e841 2300 	strex	r3, r2, [r1]
 8006c24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d1e5      	bne.n	8006bf8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d119      	bne.n	8006c68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	330c      	adds	r3, #12
 8006c3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	e853 3f00 	ldrex	r3, [r3]
 8006c42:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	f023 0310 	bic.w	r3, r3, #16
 8006c4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	330c      	adds	r3, #12
 8006c52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c54:	61ba      	str	r2, [r7, #24]
 8006c56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c58:	6979      	ldr	r1, [r7, #20]
 8006c5a:	69ba      	ldr	r2, [r7, #24]
 8006c5c:	e841 2300 	strex	r3, r2, [r1]
 8006c60:	613b      	str	r3, [r7, #16]
   return(result);
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d1e5      	bne.n	8006c34 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2220      	movs	r2, #32
 8006c6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006c76:	bf00      	nop
 8006c78:	3754      	adds	r7, #84	@ 0x54
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
	...

08006c84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c88:	b0c0      	sub	sp, #256	@ 0x100
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ca0:	68d9      	ldr	r1, [r3, #12]
 8006ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	ea40 0301 	orr.w	r3, r0, r1
 8006cac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cb2:	689a      	ldr	r2, [r3, #8]
 8006cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	431a      	orrs	r2, r3
 8006cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	431a      	orrs	r2, r3
 8006cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cc8:	69db      	ldr	r3, [r3, #28]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006cdc:	f021 010c 	bic.w	r1, r1, #12
 8006ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006cea:	430b      	orrs	r3, r1
 8006cec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cfe:	6999      	ldr	r1, [r3, #24]
 8006d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	ea40 0301 	orr.w	r3, r0, r1
 8006d0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	4b8f      	ldr	r3, [pc, #572]	@ (8006f50 <UART_SetConfig+0x2cc>)
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d005      	beq.n	8006d24 <UART_SetConfig+0xa0>
 8006d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	4b8d      	ldr	r3, [pc, #564]	@ (8006f54 <UART_SetConfig+0x2d0>)
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d104      	bne.n	8006d2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d24:	f7ff fdf8 	bl	8006918 <HAL_RCC_GetPCLK2Freq>
 8006d28:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006d2c:	e003      	b.n	8006d36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d2e:	f7ff fddf 	bl	80068f0 <HAL_RCC_GetPCLK1Freq>
 8006d32:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d3a:	69db      	ldr	r3, [r3, #28]
 8006d3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d40:	f040 810c 	bne.w	8006f5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006d4e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006d52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006d56:	4622      	mov	r2, r4
 8006d58:	462b      	mov	r3, r5
 8006d5a:	1891      	adds	r1, r2, r2
 8006d5c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006d5e:	415b      	adcs	r3, r3
 8006d60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006d66:	4621      	mov	r1, r4
 8006d68:	eb12 0801 	adds.w	r8, r2, r1
 8006d6c:	4629      	mov	r1, r5
 8006d6e:	eb43 0901 	adc.w	r9, r3, r1
 8006d72:	f04f 0200 	mov.w	r2, #0
 8006d76:	f04f 0300 	mov.w	r3, #0
 8006d7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d86:	4690      	mov	r8, r2
 8006d88:	4699      	mov	r9, r3
 8006d8a:	4623      	mov	r3, r4
 8006d8c:	eb18 0303 	adds.w	r3, r8, r3
 8006d90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006d94:	462b      	mov	r3, r5
 8006d96:	eb49 0303 	adc.w	r3, r9, r3
 8006d9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006daa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006dae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006db2:	460b      	mov	r3, r1
 8006db4:	18db      	adds	r3, r3, r3
 8006db6:	653b      	str	r3, [r7, #80]	@ 0x50
 8006db8:	4613      	mov	r3, r2
 8006dba:	eb42 0303 	adc.w	r3, r2, r3
 8006dbe:	657b      	str	r3, [r7, #84]	@ 0x54
 8006dc0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006dc4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006dc8:	f7f9 fa5a 	bl	8000280 <__aeabi_uldivmod>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	460b      	mov	r3, r1
 8006dd0:	4b61      	ldr	r3, [pc, #388]	@ (8006f58 <UART_SetConfig+0x2d4>)
 8006dd2:	fba3 2302 	umull	r2, r3, r3, r2
 8006dd6:	095b      	lsrs	r3, r3, #5
 8006dd8:	011c      	lsls	r4, r3, #4
 8006dda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006dde:	2200      	movs	r2, #0
 8006de0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006de4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006de8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006dec:	4642      	mov	r2, r8
 8006dee:	464b      	mov	r3, r9
 8006df0:	1891      	adds	r1, r2, r2
 8006df2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006df4:	415b      	adcs	r3, r3
 8006df6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006df8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006dfc:	4641      	mov	r1, r8
 8006dfe:	eb12 0a01 	adds.w	sl, r2, r1
 8006e02:	4649      	mov	r1, r9
 8006e04:	eb43 0b01 	adc.w	fp, r3, r1
 8006e08:	f04f 0200 	mov.w	r2, #0
 8006e0c:	f04f 0300 	mov.w	r3, #0
 8006e10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006e14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006e18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e1c:	4692      	mov	sl, r2
 8006e1e:	469b      	mov	fp, r3
 8006e20:	4643      	mov	r3, r8
 8006e22:	eb1a 0303 	adds.w	r3, sl, r3
 8006e26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006e2a:	464b      	mov	r3, r9
 8006e2c:	eb4b 0303 	adc.w	r3, fp, r3
 8006e30:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e40:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006e44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006e48:	460b      	mov	r3, r1
 8006e4a:	18db      	adds	r3, r3, r3
 8006e4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e4e:	4613      	mov	r3, r2
 8006e50:	eb42 0303 	adc.w	r3, r2, r3
 8006e54:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006e5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006e5e:	f7f9 fa0f 	bl	8000280 <__aeabi_uldivmod>
 8006e62:	4602      	mov	r2, r0
 8006e64:	460b      	mov	r3, r1
 8006e66:	4611      	mov	r1, r2
 8006e68:	4b3b      	ldr	r3, [pc, #236]	@ (8006f58 <UART_SetConfig+0x2d4>)
 8006e6a:	fba3 2301 	umull	r2, r3, r3, r1
 8006e6e:	095b      	lsrs	r3, r3, #5
 8006e70:	2264      	movs	r2, #100	@ 0x64
 8006e72:	fb02 f303 	mul.w	r3, r2, r3
 8006e76:	1acb      	subs	r3, r1, r3
 8006e78:	00db      	lsls	r3, r3, #3
 8006e7a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006e7e:	4b36      	ldr	r3, [pc, #216]	@ (8006f58 <UART_SetConfig+0x2d4>)
 8006e80:	fba3 2302 	umull	r2, r3, r3, r2
 8006e84:	095b      	lsrs	r3, r3, #5
 8006e86:	005b      	lsls	r3, r3, #1
 8006e88:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006e8c:	441c      	add	r4, r3
 8006e8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e92:	2200      	movs	r2, #0
 8006e94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e98:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006e9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006ea0:	4642      	mov	r2, r8
 8006ea2:	464b      	mov	r3, r9
 8006ea4:	1891      	adds	r1, r2, r2
 8006ea6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006ea8:	415b      	adcs	r3, r3
 8006eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006eac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006eb0:	4641      	mov	r1, r8
 8006eb2:	1851      	adds	r1, r2, r1
 8006eb4:	6339      	str	r1, [r7, #48]	@ 0x30
 8006eb6:	4649      	mov	r1, r9
 8006eb8:	414b      	adcs	r3, r1
 8006eba:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ebc:	f04f 0200 	mov.w	r2, #0
 8006ec0:	f04f 0300 	mov.w	r3, #0
 8006ec4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006ec8:	4659      	mov	r1, fp
 8006eca:	00cb      	lsls	r3, r1, #3
 8006ecc:	4651      	mov	r1, sl
 8006ece:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ed2:	4651      	mov	r1, sl
 8006ed4:	00ca      	lsls	r2, r1, #3
 8006ed6:	4610      	mov	r0, r2
 8006ed8:	4619      	mov	r1, r3
 8006eda:	4603      	mov	r3, r0
 8006edc:	4642      	mov	r2, r8
 8006ede:	189b      	adds	r3, r3, r2
 8006ee0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ee4:	464b      	mov	r3, r9
 8006ee6:	460a      	mov	r2, r1
 8006ee8:	eb42 0303 	adc.w	r3, r2, r3
 8006eec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006efc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006f00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006f04:	460b      	mov	r3, r1
 8006f06:	18db      	adds	r3, r3, r3
 8006f08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	eb42 0303 	adc.w	r3, r2, r3
 8006f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006f16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006f1a:	f7f9 f9b1 	bl	8000280 <__aeabi_uldivmod>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	460b      	mov	r3, r1
 8006f22:	4b0d      	ldr	r3, [pc, #52]	@ (8006f58 <UART_SetConfig+0x2d4>)
 8006f24:	fba3 1302 	umull	r1, r3, r3, r2
 8006f28:	095b      	lsrs	r3, r3, #5
 8006f2a:	2164      	movs	r1, #100	@ 0x64
 8006f2c:	fb01 f303 	mul.w	r3, r1, r3
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	00db      	lsls	r3, r3, #3
 8006f34:	3332      	adds	r3, #50	@ 0x32
 8006f36:	4a08      	ldr	r2, [pc, #32]	@ (8006f58 <UART_SetConfig+0x2d4>)
 8006f38:	fba2 2303 	umull	r2, r3, r2, r3
 8006f3c:	095b      	lsrs	r3, r3, #5
 8006f3e:	f003 0207 	and.w	r2, r3, #7
 8006f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4422      	add	r2, r4
 8006f4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f4c:	e106      	b.n	800715c <UART_SetConfig+0x4d8>
 8006f4e:	bf00      	nop
 8006f50:	40011000 	.word	0x40011000
 8006f54:	40011400 	.word	0x40011400
 8006f58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f60:	2200      	movs	r2, #0
 8006f62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006f66:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006f6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006f6e:	4642      	mov	r2, r8
 8006f70:	464b      	mov	r3, r9
 8006f72:	1891      	adds	r1, r2, r2
 8006f74:	6239      	str	r1, [r7, #32]
 8006f76:	415b      	adcs	r3, r3
 8006f78:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f7e:	4641      	mov	r1, r8
 8006f80:	1854      	adds	r4, r2, r1
 8006f82:	4649      	mov	r1, r9
 8006f84:	eb43 0501 	adc.w	r5, r3, r1
 8006f88:	f04f 0200 	mov.w	r2, #0
 8006f8c:	f04f 0300 	mov.w	r3, #0
 8006f90:	00eb      	lsls	r3, r5, #3
 8006f92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f96:	00e2      	lsls	r2, r4, #3
 8006f98:	4614      	mov	r4, r2
 8006f9a:	461d      	mov	r5, r3
 8006f9c:	4643      	mov	r3, r8
 8006f9e:	18e3      	adds	r3, r4, r3
 8006fa0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006fa4:	464b      	mov	r3, r9
 8006fa6:	eb45 0303 	adc.w	r3, r5, r3
 8006faa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006fba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006fbe:	f04f 0200 	mov.w	r2, #0
 8006fc2:	f04f 0300 	mov.w	r3, #0
 8006fc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006fca:	4629      	mov	r1, r5
 8006fcc:	008b      	lsls	r3, r1, #2
 8006fce:	4621      	mov	r1, r4
 8006fd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fd4:	4621      	mov	r1, r4
 8006fd6:	008a      	lsls	r2, r1, #2
 8006fd8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006fdc:	f7f9 f950 	bl	8000280 <__aeabi_uldivmod>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	4b60      	ldr	r3, [pc, #384]	@ (8007168 <UART_SetConfig+0x4e4>)
 8006fe6:	fba3 2302 	umull	r2, r3, r3, r2
 8006fea:	095b      	lsrs	r3, r3, #5
 8006fec:	011c      	lsls	r4, r3, #4
 8006fee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006ff8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006ffc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007000:	4642      	mov	r2, r8
 8007002:	464b      	mov	r3, r9
 8007004:	1891      	adds	r1, r2, r2
 8007006:	61b9      	str	r1, [r7, #24]
 8007008:	415b      	adcs	r3, r3
 800700a:	61fb      	str	r3, [r7, #28]
 800700c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007010:	4641      	mov	r1, r8
 8007012:	1851      	adds	r1, r2, r1
 8007014:	6139      	str	r1, [r7, #16]
 8007016:	4649      	mov	r1, r9
 8007018:	414b      	adcs	r3, r1
 800701a:	617b      	str	r3, [r7, #20]
 800701c:	f04f 0200 	mov.w	r2, #0
 8007020:	f04f 0300 	mov.w	r3, #0
 8007024:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007028:	4659      	mov	r1, fp
 800702a:	00cb      	lsls	r3, r1, #3
 800702c:	4651      	mov	r1, sl
 800702e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007032:	4651      	mov	r1, sl
 8007034:	00ca      	lsls	r2, r1, #3
 8007036:	4610      	mov	r0, r2
 8007038:	4619      	mov	r1, r3
 800703a:	4603      	mov	r3, r0
 800703c:	4642      	mov	r2, r8
 800703e:	189b      	adds	r3, r3, r2
 8007040:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007044:	464b      	mov	r3, r9
 8007046:	460a      	mov	r2, r1
 8007048:	eb42 0303 	adc.w	r3, r2, r3
 800704c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	67bb      	str	r3, [r7, #120]	@ 0x78
 800705a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800705c:	f04f 0200 	mov.w	r2, #0
 8007060:	f04f 0300 	mov.w	r3, #0
 8007064:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007068:	4649      	mov	r1, r9
 800706a:	008b      	lsls	r3, r1, #2
 800706c:	4641      	mov	r1, r8
 800706e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007072:	4641      	mov	r1, r8
 8007074:	008a      	lsls	r2, r1, #2
 8007076:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800707a:	f7f9 f901 	bl	8000280 <__aeabi_uldivmod>
 800707e:	4602      	mov	r2, r0
 8007080:	460b      	mov	r3, r1
 8007082:	4611      	mov	r1, r2
 8007084:	4b38      	ldr	r3, [pc, #224]	@ (8007168 <UART_SetConfig+0x4e4>)
 8007086:	fba3 2301 	umull	r2, r3, r3, r1
 800708a:	095b      	lsrs	r3, r3, #5
 800708c:	2264      	movs	r2, #100	@ 0x64
 800708e:	fb02 f303 	mul.w	r3, r2, r3
 8007092:	1acb      	subs	r3, r1, r3
 8007094:	011b      	lsls	r3, r3, #4
 8007096:	3332      	adds	r3, #50	@ 0x32
 8007098:	4a33      	ldr	r2, [pc, #204]	@ (8007168 <UART_SetConfig+0x4e4>)
 800709a:	fba2 2303 	umull	r2, r3, r2, r3
 800709e:	095b      	lsrs	r3, r3, #5
 80070a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80070a4:	441c      	add	r4, r3
 80070a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070aa:	2200      	movs	r2, #0
 80070ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80070ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80070b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80070b4:	4642      	mov	r2, r8
 80070b6:	464b      	mov	r3, r9
 80070b8:	1891      	adds	r1, r2, r2
 80070ba:	60b9      	str	r1, [r7, #8]
 80070bc:	415b      	adcs	r3, r3
 80070be:	60fb      	str	r3, [r7, #12]
 80070c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80070c4:	4641      	mov	r1, r8
 80070c6:	1851      	adds	r1, r2, r1
 80070c8:	6039      	str	r1, [r7, #0]
 80070ca:	4649      	mov	r1, r9
 80070cc:	414b      	adcs	r3, r1
 80070ce:	607b      	str	r3, [r7, #4]
 80070d0:	f04f 0200 	mov.w	r2, #0
 80070d4:	f04f 0300 	mov.w	r3, #0
 80070d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80070dc:	4659      	mov	r1, fp
 80070de:	00cb      	lsls	r3, r1, #3
 80070e0:	4651      	mov	r1, sl
 80070e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070e6:	4651      	mov	r1, sl
 80070e8:	00ca      	lsls	r2, r1, #3
 80070ea:	4610      	mov	r0, r2
 80070ec:	4619      	mov	r1, r3
 80070ee:	4603      	mov	r3, r0
 80070f0:	4642      	mov	r2, r8
 80070f2:	189b      	adds	r3, r3, r2
 80070f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070f6:	464b      	mov	r3, r9
 80070f8:	460a      	mov	r2, r1
 80070fa:	eb42 0303 	adc.w	r3, r2, r3
 80070fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	663b      	str	r3, [r7, #96]	@ 0x60
 800710a:	667a      	str	r2, [r7, #100]	@ 0x64
 800710c:	f04f 0200 	mov.w	r2, #0
 8007110:	f04f 0300 	mov.w	r3, #0
 8007114:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007118:	4649      	mov	r1, r9
 800711a:	008b      	lsls	r3, r1, #2
 800711c:	4641      	mov	r1, r8
 800711e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007122:	4641      	mov	r1, r8
 8007124:	008a      	lsls	r2, r1, #2
 8007126:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800712a:	f7f9 f8a9 	bl	8000280 <__aeabi_uldivmod>
 800712e:	4602      	mov	r2, r0
 8007130:	460b      	mov	r3, r1
 8007132:	4b0d      	ldr	r3, [pc, #52]	@ (8007168 <UART_SetConfig+0x4e4>)
 8007134:	fba3 1302 	umull	r1, r3, r3, r2
 8007138:	095b      	lsrs	r3, r3, #5
 800713a:	2164      	movs	r1, #100	@ 0x64
 800713c:	fb01 f303 	mul.w	r3, r1, r3
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	011b      	lsls	r3, r3, #4
 8007144:	3332      	adds	r3, #50	@ 0x32
 8007146:	4a08      	ldr	r2, [pc, #32]	@ (8007168 <UART_SetConfig+0x4e4>)
 8007148:	fba2 2303 	umull	r2, r3, r2, r3
 800714c:	095b      	lsrs	r3, r3, #5
 800714e:	f003 020f 	and.w	r2, r3, #15
 8007152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4422      	add	r2, r4
 800715a:	609a      	str	r2, [r3, #8]
}
 800715c:	bf00      	nop
 800715e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007162:	46bd      	mov	sp, r7
 8007164:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007168:	51eb851f 	.word	0x51eb851f

0800716c <std>:
 800716c:	2300      	movs	r3, #0
 800716e:	b510      	push	{r4, lr}
 8007170:	4604      	mov	r4, r0
 8007172:	e9c0 3300 	strd	r3, r3, [r0]
 8007176:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800717a:	6083      	str	r3, [r0, #8]
 800717c:	8181      	strh	r1, [r0, #12]
 800717e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007180:	81c2      	strh	r2, [r0, #14]
 8007182:	6183      	str	r3, [r0, #24]
 8007184:	4619      	mov	r1, r3
 8007186:	2208      	movs	r2, #8
 8007188:	305c      	adds	r0, #92	@ 0x5c
 800718a:	f000 f906 	bl	800739a <memset>
 800718e:	4b0d      	ldr	r3, [pc, #52]	@ (80071c4 <std+0x58>)
 8007190:	6263      	str	r3, [r4, #36]	@ 0x24
 8007192:	4b0d      	ldr	r3, [pc, #52]	@ (80071c8 <std+0x5c>)
 8007194:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007196:	4b0d      	ldr	r3, [pc, #52]	@ (80071cc <std+0x60>)
 8007198:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800719a:	4b0d      	ldr	r3, [pc, #52]	@ (80071d0 <std+0x64>)
 800719c:	6323      	str	r3, [r4, #48]	@ 0x30
 800719e:	4b0d      	ldr	r3, [pc, #52]	@ (80071d4 <std+0x68>)
 80071a0:	6224      	str	r4, [r4, #32]
 80071a2:	429c      	cmp	r4, r3
 80071a4:	d006      	beq.n	80071b4 <std+0x48>
 80071a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80071aa:	4294      	cmp	r4, r2
 80071ac:	d002      	beq.n	80071b4 <std+0x48>
 80071ae:	33d0      	adds	r3, #208	@ 0xd0
 80071b0:	429c      	cmp	r4, r3
 80071b2:	d105      	bne.n	80071c0 <std+0x54>
 80071b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80071b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071bc:	f000 b966 	b.w	800748c <__retarget_lock_init_recursive>
 80071c0:	bd10      	pop	{r4, pc}
 80071c2:	bf00      	nop
 80071c4:	08007315 	.word	0x08007315
 80071c8:	08007337 	.word	0x08007337
 80071cc:	0800736f 	.word	0x0800736f
 80071d0:	08007393 	.word	0x08007393
 80071d4:	20002fb0 	.word	0x20002fb0

080071d8 <stdio_exit_handler>:
 80071d8:	4a02      	ldr	r2, [pc, #8]	@ (80071e4 <stdio_exit_handler+0xc>)
 80071da:	4903      	ldr	r1, [pc, #12]	@ (80071e8 <stdio_exit_handler+0x10>)
 80071dc:	4803      	ldr	r0, [pc, #12]	@ (80071ec <stdio_exit_handler+0x14>)
 80071de:	f000 b869 	b.w	80072b4 <_fwalk_sglue>
 80071e2:	bf00      	nop
 80071e4:	2000004c 	.word	0x2000004c
 80071e8:	08007d45 	.word	0x08007d45
 80071ec:	2000005c 	.word	0x2000005c

080071f0 <cleanup_stdio>:
 80071f0:	6841      	ldr	r1, [r0, #4]
 80071f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007224 <cleanup_stdio+0x34>)
 80071f4:	4299      	cmp	r1, r3
 80071f6:	b510      	push	{r4, lr}
 80071f8:	4604      	mov	r4, r0
 80071fa:	d001      	beq.n	8007200 <cleanup_stdio+0x10>
 80071fc:	f000 fda2 	bl	8007d44 <_fflush_r>
 8007200:	68a1      	ldr	r1, [r4, #8]
 8007202:	4b09      	ldr	r3, [pc, #36]	@ (8007228 <cleanup_stdio+0x38>)
 8007204:	4299      	cmp	r1, r3
 8007206:	d002      	beq.n	800720e <cleanup_stdio+0x1e>
 8007208:	4620      	mov	r0, r4
 800720a:	f000 fd9b 	bl	8007d44 <_fflush_r>
 800720e:	68e1      	ldr	r1, [r4, #12]
 8007210:	4b06      	ldr	r3, [pc, #24]	@ (800722c <cleanup_stdio+0x3c>)
 8007212:	4299      	cmp	r1, r3
 8007214:	d004      	beq.n	8007220 <cleanup_stdio+0x30>
 8007216:	4620      	mov	r0, r4
 8007218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800721c:	f000 bd92 	b.w	8007d44 <_fflush_r>
 8007220:	bd10      	pop	{r4, pc}
 8007222:	bf00      	nop
 8007224:	20002fb0 	.word	0x20002fb0
 8007228:	20003018 	.word	0x20003018
 800722c:	20003080 	.word	0x20003080

08007230 <global_stdio_init.part.0>:
 8007230:	b510      	push	{r4, lr}
 8007232:	4b0b      	ldr	r3, [pc, #44]	@ (8007260 <global_stdio_init.part.0+0x30>)
 8007234:	4c0b      	ldr	r4, [pc, #44]	@ (8007264 <global_stdio_init.part.0+0x34>)
 8007236:	4a0c      	ldr	r2, [pc, #48]	@ (8007268 <global_stdio_init.part.0+0x38>)
 8007238:	601a      	str	r2, [r3, #0]
 800723a:	4620      	mov	r0, r4
 800723c:	2200      	movs	r2, #0
 800723e:	2104      	movs	r1, #4
 8007240:	f7ff ff94 	bl	800716c <std>
 8007244:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007248:	2201      	movs	r2, #1
 800724a:	2109      	movs	r1, #9
 800724c:	f7ff ff8e 	bl	800716c <std>
 8007250:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007254:	2202      	movs	r2, #2
 8007256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800725a:	2112      	movs	r1, #18
 800725c:	f7ff bf86 	b.w	800716c <std>
 8007260:	200030e8 	.word	0x200030e8
 8007264:	20002fb0 	.word	0x20002fb0
 8007268:	080071d9 	.word	0x080071d9

0800726c <__sfp_lock_acquire>:
 800726c:	4801      	ldr	r0, [pc, #4]	@ (8007274 <__sfp_lock_acquire+0x8>)
 800726e:	f000 b90e 	b.w	800748e <__retarget_lock_acquire_recursive>
 8007272:	bf00      	nop
 8007274:	200030f1 	.word	0x200030f1

08007278 <__sfp_lock_release>:
 8007278:	4801      	ldr	r0, [pc, #4]	@ (8007280 <__sfp_lock_release+0x8>)
 800727a:	f000 b909 	b.w	8007490 <__retarget_lock_release_recursive>
 800727e:	bf00      	nop
 8007280:	200030f1 	.word	0x200030f1

08007284 <__sinit>:
 8007284:	b510      	push	{r4, lr}
 8007286:	4604      	mov	r4, r0
 8007288:	f7ff fff0 	bl	800726c <__sfp_lock_acquire>
 800728c:	6a23      	ldr	r3, [r4, #32]
 800728e:	b11b      	cbz	r3, 8007298 <__sinit+0x14>
 8007290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007294:	f7ff bff0 	b.w	8007278 <__sfp_lock_release>
 8007298:	4b04      	ldr	r3, [pc, #16]	@ (80072ac <__sinit+0x28>)
 800729a:	6223      	str	r3, [r4, #32]
 800729c:	4b04      	ldr	r3, [pc, #16]	@ (80072b0 <__sinit+0x2c>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d1f5      	bne.n	8007290 <__sinit+0xc>
 80072a4:	f7ff ffc4 	bl	8007230 <global_stdio_init.part.0>
 80072a8:	e7f2      	b.n	8007290 <__sinit+0xc>
 80072aa:	bf00      	nop
 80072ac:	080071f1 	.word	0x080071f1
 80072b0:	200030e8 	.word	0x200030e8

080072b4 <_fwalk_sglue>:
 80072b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072b8:	4607      	mov	r7, r0
 80072ba:	4688      	mov	r8, r1
 80072bc:	4614      	mov	r4, r2
 80072be:	2600      	movs	r6, #0
 80072c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80072c4:	f1b9 0901 	subs.w	r9, r9, #1
 80072c8:	d505      	bpl.n	80072d6 <_fwalk_sglue+0x22>
 80072ca:	6824      	ldr	r4, [r4, #0]
 80072cc:	2c00      	cmp	r4, #0
 80072ce:	d1f7      	bne.n	80072c0 <_fwalk_sglue+0xc>
 80072d0:	4630      	mov	r0, r6
 80072d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072d6:	89ab      	ldrh	r3, [r5, #12]
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d907      	bls.n	80072ec <_fwalk_sglue+0x38>
 80072dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80072e0:	3301      	adds	r3, #1
 80072e2:	d003      	beq.n	80072ec <_fwalk_sglue+0x38>
 80072e4:	4629      	mov	r1, r5
 80072e6:	4638      	mov	r0, r7
 80072e8:	47c0      	blx	r8
 80072ea:	4306      	orrs	r6, r0
 80072ec:	3568      	adds	r5, #104	@ 0x68
 80072ee:	e7e9      	b.n	80072c4 <_fwalk_sglue+0x10>

080072f0 <iprintf>:
 80072f0:	b40f      	push	{r0, r1, r2, r3}
 80072f2:	b507      	push	{r0, r1, r2, lr}
 80072f4:	4906      	ldr	r1, [pc, #24]	@ (8007310 <iprintf+0x20>)
 80072f6:	ab04      	add	r3, sp, #16
 80072f8:	6808      	ldr	r0, [r1, #0]
 80072fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80072fe:	6881      	ldr	r1, [r0, #8]
 8007300:	9301      	str	r3, [sp, #4]
 8007302:	f000 f9f7 	bl	80076f4 <_vfiprintf_r>
 8007306:	b003      	add	sp, #12
 8007308:	f85d eb04 	ldr.w	lr, [sp], #4
 800730c:	b004      	add	sp, #16
 800730e:	4770      	bx	lr
 8007310:	20000058 	.word	0x20000058

08007314 <__sread>:
 8007314:	b510      	push	{r4, lr}
 8007316:	460c      	mov	r4, r1
 8007318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800731c:	f000 f868 	bl	80073f0 <_read_r>
 8007320:	2800      	cmp	r0, #0
 8007322:	bfab      	itete	ge
 8007324:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007326:	89a3      	ldrhlt	r3, [r4, #12]
 8007328:	181b      	addge	r3, r3, r0
 800732a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800732e:	bfac      	ite	ge
 8007330:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007332:	81a3      	strhlt	r3, [r4, #12]
 8007334:	bd10      	pop	{r4, pc}

08007336 <__swrite>:
 8007336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800733a:	461f      	mov	r7, r3
 800733c:	898b      	ldrh	r3, [r1, #12]
 800733e:	05db      	lsls	r3, r3, #23
 8007340:	4605      	mov	r5, r0
 8007342:	460c      	mov	r4, r1
 8007344:	4616      	mov	r6, r2
 8007346:	d505      	bpl.n	8007354 <__swrite+0x1e>
 8007348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800734c:	2302      	movs	r3, #2
 800734e:	2200      	movs	r2, #0
 8007350:	f000 f83c 	bl	80073cc <_lseek_r>
 8007354:	89a3      	ldrh	r3, [r4, #12]
 8007356:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800735a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800735e:	81a3      	strh	r3, [r4, #12]
 8007360:	4632      	mov	r2, r6
 8007362:	463b      	mov	r3, r7
 8007364:	4628      	mov	r0, r5
 8007366:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800736a:	f000 b853 	b.w	8007414 <_write_r>

0800736e <__sseek>:
 800736e:	b510      	push	{r4, lr}
 8007370:	460c      	mov	r4, r1
 8007372:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007376:	f000 f829 	bl	80073cc <_lseek_r>
 800737a:	1c43      	adds	r3, r0, #1
 800737c:	89a3      	ldrh	r3, [r4, #12]
 800737e:	bf15      	itete	ne
 8007380:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007382:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007386:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800738a:	81a3      	strheq	r3, [r4, #12]
 800738c:	bf18      	it	ne
 800738e:	81a3      	strhne	r3, [r4, #12]
 8007390:	bd10      	pop	{r4, pc}

08007392 <__sclose>:
 8007392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007396:	f000 b809 	b.w	80073ac <_close_r>

0800739a <memset>:
 800739a:	4402      	add	r2, r0
 800739c:	4603      	mov	r3, r0
 800739e:	4293      	cmp	r3, r2
 80073a0:	d100      	bne.n	80073a4 <memset+0xa>
 80073a2:	4770      	bx	lr
 80073a4:	f803 1b01 	strb.w	r1, [r3], #1
 80073a8:	e7f9      	b.n	800739e <memset+0x4>
	...

080073ac <_close_r>:
 80073ac:	b538      	push	{r3, r4, r5, lr}
 80073ae:	4d06      	ldr	r5, [pc, #24]	@ (80073c8 <_close_r+0x1c>)
 80073b0:	2300      	movs	r3, #0
 80073b2:	4604      	mov	r4, r0
 80073b4:	4608      	mov	r0, r1
 80073b6:	602b      	str	r3, [r5, #0]
 80073b8:	f7f9 ff29 	bl	800120e <_close>
 80073bc:	1c43      	adds	r3, r0, #1
 80073be:	d102      	bne.n	80073c6 <_close_r+0x1a>
 80073c0:	682b      	ldr	r3, [r5, #0]
 80073c2:	b103      	cbz	r3, 80073c6 <_close_r+0x1a>
 80073c4:	6023      	str	r3, [r4, #0]
 80073c6:	bd38      	pop	{r3, r4, r5, pc}
 80073c8:	200030ec 	.word	0x200030ec

080073cc <_lseek_r>:
 80073cc:	b538      	push	{r3, r4, r5, lr}
 80073ce:	4d07      	ldr	r5, [pc, #28]	@ (80073ec <_lseek_r+0x20>)
 80073d0:	4604      	mov	r4, r0
 80073d2:	4608      	mov	r0, r1
 80073d4:	4611      	mov	r1, r2
 80073d6:	2200      	movs	r2, #0
 80073d8:	602a      	str	r2, [r5, #0]
 80073da:	461a      	mov	r2, r3
 80073dc:	f7f9 ff3e 	bl	800125c <_lseek>
 80073e0:	1c43      	adds	r3, r0, #1
 80073e2:	d102      	bne.n	80073ea <_lseek_r+0x1e>
 80073e4:	682b      	ldr	r3, [r5, #0]
 80073e6:	b103      	cbz	r3, 80073ea <_lseek_r+0x1e>
 80073e8:	6023      	str	r3, [r4, #0]
 80073ea:	bd38      	pop	{r3, r4, r5, pc}
 80073ec:	200030ec 	.word	0x200030ec

080073f0 <_read_r>:
 80073f0:	b538      	push	{r3, r4, r5, lr}
 80073f2:	4d07      	ldr	r5, [pc, #28]	@ (8007410 <_read_r+0x20>)
 80073f4:	4604      	mov	r4, r0
 80073f6:	4608      	mov	r0, r1
 80073f8:	4611      	mov	r1, r2
 80073fa:	2200      	movs	r2, #0
 80073fc:	602a      	str	r2, [r5, #0]
 80073fe:	461a      	mov	r2, r3
 8007400:	f7f9 fecc 	bl	800119c <_read>
 8007404:	1c43      	adds	r3, r0, #1
 8007406:	d102      	bne.n	800740e <_read_r+0x1e>
 8007408:	682b      	ldr	r3, [r5, #0]
 800740a:	b103      	cbz	r3, 800740e <_read_r+0x1e>
 800740c:	6023      	str	r3, [r4, #0]
 800740e:	bd38      	pop	{r3, r4, r5, pc}
 8007410:	200030ec 	.word	0x200030ec

08007414 <_write_r>:
 8007414:	b538      	push	{r3, r4, r5, lr}
 8007416:	4d07      	ldr	r5, [pc, #28]	@ (8007434 <_write_r+0x20>)
 8007418:	4604      	mov	r4, r0
 800741a:	4608      	mov	r0, r1
 800741c:	4611      	mov	r1, r2
 800741e:	2200      	movs	r2, #0
 8007420:	602a      	str	r2, [r5, #0]
 8007422:	461a      	mov	r2, r3
 8007424:	f7f9 fed7 	bl	80011d6 <_write>
 8007428:	1c43      	adds	r3, r0, #1
 800742a:	d102      	bne.n	8007432 <_write_r+0x1e>
 800742c:	682b      	ldr	r3, [r5, #0]
 800742e:	b103      	cbz	r3, 8007432 <_write_r+0x1e>
 8007430:	6023      	str	r3, [r4, #0]
 8007432:	bd38      	pop	{r3, r4, r5, pc}
 8007434:	200030ec 	.word	0x200030ec

08007438 <__errno>:
 8007438:	4b01      	ldr	r3, [pc, #4]	@ (8007440 <__errno+0x8>)
 800743a:	6818      	ldr	r0, [r3, #0]
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop
 8007440:	20000058 	.word	0x20000058

08007444 <__libc_init_array>:
 8007444:	b570      	push	{r4, r5, r6, lr}
 8007446:	4d0d      	ldr	r5, [pc, #52]	@ (800747c <__libc_init_array+0x38>)
 8007448:	4c0d      	ldr	r4, [pc, #52]	@ (8007480 <__libc_init_array+0x3c>)
 800744a:	1b64      	subs	r4, r4, r5
 800744c:	10a4      	asrs	r4, r4, #2
 800744e:	2600      	movs	r6, #0
 8007450:	42a6      	cmp	r6, r4
 8007452:	d109      	bne.n	8007468 <__libc_init_array+0x24>
 8007454:	4d0b      	ldr	r5, [pc, #44]	@ (8007484 <__libc_init_array+0x40>)
 8007456:	4c0c      	ldr	r4, [pc, #48]	@ (8007488 <__libc_init_array+0x44>)
 8007458:	f000 fdc4 	bl	8007fe4 <_init>
 800745c:	1b64      	subs	r4, r4, r5
 800745e:	10a4      	asrs	r4, r4, #2
 8007460:	2600      	movs	r6, #0
 8007462:	42a6      	cmp	r6, r4
 8007464:	d105      	bne.n	8007472 <__libc_init_array+0x2e>
 8007466:	bd70      	pop	{r4, r5, r6, pc}
 8007468:	f855 3b04 	ldr.w	r3, [r5], #4
 800746c:	4798      	blx	r3
 800746e:	3601      	adds	r6, #1
 8007470:	e7ee      	b.n	8007450 <__libc_init_array+0xc>
 8007472:	f855 3b04 	ldr.w	r3, [r5], #4
 8007476:	4798      	blx	r3
 8007478:	3601      	adds	r6, #1
 800747a:	e7f2      	b.n	8007462 <__libc_init_array+0x1e>
 800747c:	0801db08 	.word	0x0801db08
 8007480:	0801db08 	.word	0x0801db08
 8007484:	0801db08 	.word	0x0801db08
 8007488:	0801db0c 	.word	0x0801db0c

0800748c <__retarget_lock_init_recursive>:
 800748c:	4770      	bx	lr

0800748e <__retarget_lock_acquire_recursive>:
 800748e:	4770      	bx	lr

08007490 <__retarget_lock_release_recursive>:
 8007490:	4770      	bx	lr

08007492 <memcpy>:
 8007492:	440a      	add	r2, r1
 8007494:	4291      	cmp	r1, r2
 8007496:	f100 33ff 	add.w	r3, r0, #4294967295
 800749a:	d100      	bne.n	800749e <memcpy+0xc>
 800749c:	4770      	bx	lr
 800749e:	b510      	push	{r4, lr}
 80074a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074a8:	4291      	cmp	r1, r2
 80074aa:	d1f9      	bne.n	80074a0 <memcpy+0xe>
 80074ac:	bd10      	pop	{r4, pc}
	...

080074b0 <_free_r>:
 80074b0:	b538      	push	{r3, r4, r5, lr}
 80074b2:	4605      	mov	r5, r0
 80074b4:	2900      	cmp	r1, #0
 80074b6:	d041      	beq.n	800753c <_free_r+0x8c>
 80074b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074bc:	1f0c      	subs	r4, r1, #4
 80074be:	2b00      	cmp	r3, #0
 80074c0:	bfb8      	it	lt
 80074c2:	18e4      	addlt	r4, r4, r3
 80074c4:	f000 f8e0 	bl	8007688 <__malloc_lock>
 80074c8:	4a1d      	ldr	r2, [pc, #116]	@ (8007540 <_free_r+0x90>)
 80074ca:	6813      	ldr	r3, [r2, #0]
 80074cc:	b933      	cbnz	r3, 80074dc <_free_r+0x2c>
 80074ce:	6063      	str	r3, [r4, #4]
 80074d0:	6014      	str	r4, [r2, #0]
 80074d2:	4628      	mov	r0, r5
 80074d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074d8:	f000 b8dc 	b.w	8007694 <__malloc_unlock>
 80074dc:	42a3      	cmp	r3, r4
 80074de:	d908      	bls.n	80074f2 <_free_r+0x42>
 80074e0:	6820      	ldr	r0, [r4, #0]
 80074e2:	1821      	adds	r1, r4, r0
 80074e4:	428b      	cmp	r3, r1
 80074e6:	bf01      	itttt	eq
 80074e8:	6819      	ldreq	r1, [r3, #0]
 80074ea:	685b      	ldreq	r3, [r3, #4]
 80074ec:	1809      	addeq	r1, r1, r0
 80074ee:	6021      	streq	r1, [r4, #0]
 80074f0:	e7ed      	b.n	80074ce <_free_r+0x1e>
 80074f2:	461a      	mov	r2, r3
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	b10b      	cbz	r3, 80074fc <_free_r+0x4c>
 80074f8:	42a3      	cmp	r3, r4
 80074fa:	d9fa      	bls.n	80074f2 <_free_r+0x42>
 80074fc:	6811      	ldr	r1, [r2, #0]
 80074fe:	1850      	adds	r0, r2, r1
 8007500:	42a0      	cmp	r0, r4
 8007502:	d10b      	bne.n	800751c <_free_r+0x6c>
 8007504:	6820      	ldr	r0, [r4, #0]
 8007506:	4401      	add	r1, r0
 8007508:	1850      	adds	r0, r2, r1
 800750a:	4283      	cmp	r3, r0
 800750c:	6011      	str	r1, [r2, #0]
 800750e:	d1e0      	bne.n	80074d2 <_free_r+0x22>
 8007510:	6818      	ldr	r0, [r3, #0]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	6053      	str	r3, [r2, #4]
 8007516:	4408      	add	r0, r1
 8007518:	6010      	str	r0, [r2, #0]
 800751a:	e7da      	b.n	80074d2 <_free_r+0x22>
 800751c:	d902      	bls.n	8007524 <_free_r+0x74>
 800751e:	230c      	movs	r3, #12
 8007520:	602b      	str	r3, [r5, #0]
 8007522:	e7d6      	b.n	80074d2 <_free_r+0x22>
 8007524:	6820      	ldr	r0, [r4, #0]
 8007526:	1821      	adds	r1, r4, r0
 8007528:	428b      	cmp	r3, r1
 800752a:	bf04      	itt	eq
 800752c:	6819      	ldreq	r1, [r3, #0]
 800752e:	685b      	ldreq	r3, [r3, #4]
 8007530:	6063      	str	r3, [r4, #4]
 8007532:	bf04      	itt	eq
 8007534:	1809      	addeq	r1, r1, r0
 8007536:	6021      	streq	r1, [r4, #0]
 8007538:	6054      	str	r4, [r2, #4]
 800753a:	e7ca      	b.n	80074d2 <_free_r+0x22>
 800753c:	bd38      	pop	{r3, r4, r5, pc}
 800753e:	bf00      	nop
 8007540:	200030f8 	.word	0x200030f8

08007544 <sbrk_aligned>:
 8007544:	b570      	push	{r4, r5, r6, lr}
 8007546:	4e0f      	ldr	r6, [pc, #60]	@ (8007584 <sbrk_aligned+0x40>)
 8007548:	460c      	mov	r4, r1
 800754a:	6831      	ldr	r1, [r6, #0]
 800754c:	4605      	mov	r5, r0
 800754e:	b911      	cbnz	r1, 8007556 <sbrk_aligned+0x12>
 8007550:	f000 fcb4 	bl	8007ebc <_sbrk_r>
 8007554:	6030      	str	r0, [r6, #0]
 8007556:	4621      	mov	r1, r4
 8007558:	4628      	mov	r0, r5
 800755a:	f000 fcaf 	bl	8007ebc <_sbrk_r>
 800755e:	1c43      	adds	r3, r0, #1
 8007560:	d103      	bne.n	800756a <sbrk_aligned+0x26>
 8007562:	f04f 34ff 	mov.w	r4, #4294967295
 8007566:	4620      	mov	r0, r4
 8007568:	bd70      	pop	{r4, r5, r6, pc}
 800756a:	1cc4      	adds	r4, r0, #3
 800756c:	f024 0403 	bic.w	r4, r4, #3
 8007570:	42a0      	cmp	r0, r4
 8007572:	d0f8      	beq.n	8007566 <sbrk_aligned+0x22>
 8007574:	1a21      	subs	r1, r4, r0
 8007576:	4628      	mov	r0, r5
 8007578:	f000 fca0 	bl	8007ebc <_sbrk_r>
 800757c:	3001      	adds	r0, #1
 800757e:	d1f2      	bne.n	8007566 <sbrk_aligned+0x22>
 8007580:	e7ef      	b.n	8007562 <sbrk_aligned+0x1e>
 8007582:	bf00      	nop
 8007584:	200030f4 	.word	0x200030f4

08007588 <_malloc_r>:
 8007588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800758c:	1ccd      	adds	r5, r1, #3
 800758e:	f025 0503 	bic.w	r5, r5, #3
 8007592:	3508      	adds	r5, #8
 8007594:	2d0c      	cmp	r5, #12
 8007596:	bf38      	it	cc
 8007598:	250c      	movcc	r5, #12
 800759a:	2d00      	cmp	r5, #0
 800759c:	4606      	mov	r6, r0
 800759e:	db01      	blt.n	80075a4 <_malloc_r+0x1c>
 80075a0:	42a9      	cmp	r1, r5
 80075a2:	d904      	bls.n	80075ae <_malloc_r+0x26>
 80075a4:	230c      	movs	r3, #12
 80075a6:	6033      	str	r3, [r6, #0]
 80075a8:	2000      	movs	r0, #0
 80075aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007684 <_malloc_r+0xfc>
 80075b2:	f000 f869 	bl	8007688 <__malloc_lock>
 80075b6:	f8d8 3000 	ldr.w	r3, [r8]
 80075ba:	461c      	mov	r4, r3
 80075bc:	bb44      	cbnz	r4, 8007610 <_malloc_r+0x88>
 80075be:	4629      	mov	r1, r5
 80075c0:	4630      	mov	r0, r6
 80075c2:	f7ff ffbf 	bl	8007544 <sbrk_aligned>
 80075c6:	1c43      	adds	r3, r0, #1
 80075c8:	4604      	mov	r4, r0
 80075ca:	d158      	bne.n	800767e <_malloc_r+0xf6>
 80075cc:	f8d8 4000 	ldr.w	r4, [r8]
 80075d0:	4627      	mov	r7, r4
 80075d2:	2f00      	cmp	r7, #0
 80075d4:	d143      	bne.n	800765e <_malloc_r+0xd6>
 80075d6:	2c00      	cmp	r4, #0
 80075d8:	d04b      	beq.n	8007672 <_malloc_r+0xea>
 80075da:	6823      	ldr	r3, [r4, #0]
 80075dc:	4639      	mov	r1, r7
 80075de:	4630      	mov	r0, r6
 80075e0:	eb04 0903 	add.w	r9, r4, r3
 80075e4:	f000 fc6a 	bl	8007ebc <_sbrk_r>
 80075e8:	4581      	cmp	r9, r0
 80075ea:	d142      	bne.n	8007672 <_malloc_r+0xea>
 80075ec:	6821      	ldr	r1, [r4, #0]
 80075ee:	1a6d      	subs	r5, r5, r1
 80075f0:	4629      	mov	r1, r5
 80075f2:	4630      	mov	r0, r6
 80075f4:	f7ff ffa6 	bl	8007544 <sbrk_aligned>
 80075f8:	3001      	adds	r0, #1
 80075fa:	d03a      	beq.n	8007672 <_malloc_r+0xea>
 80075fc:	6823      	ldr	r3, [r4, #0]
 80075fe:	442b      	add	r3, r5
 8007600:	6023      	str	r3, [r4, #0]
 8007602:	f8d8 3000 	ldr.w	r3, [r8]
 8007606:	685a      	ldr	r2, [r3, #4]
 8007608:	bb62      	cbnz	r2, 8007664 <_malloc_r+0xdc>
 800760a:	f8c8 7000 	str.w	r7, [r8]
 800760e:	e00f      	b.n	8007630 <_malloc_r+0xa8>
 8007610:	6822      	ldr	r2, [r4, #0]
 8007612:	1b52      	subs	r2, r2, r5
 8007614:	d420      	bmi.n	8007658 <_malloc_r+0xd0>
 8007616:	2a0b      	cmp	r2, #11
 8007618:	d917      	bls.n	800764a <_malloc_r+0xc2>
 800761a:	1961      	adds	r1, r4, r5
 800761c:	42a3      	cmp	r3, r4
 800761e:	6025      	str	r5, [r4, #0]
 8007620:	bf18      	it	ne
 8007622:	6059      	strne	r1, [r3, #4]
 8007624:	6863      	ldr	r3, [r4, #4]
 8007626:	bf08      	it	eq
 8007628:	f8c8 1000 	streq.w	r1, [r8]
 800762c:	5162      	str	r2, [r4, r5]
 800762e:	604b      	str	r3, [r1, #4]
 8007630:	4630      	mov	r0, r6
 8007632:	f000 f82f 	bl	8007694 <__malloc_unlock>
 8007636:	f104 000b 	add.w	r0, r4, #11
 800763a:	1d23      	adds	r3, r4, #4
 800763c:	f020 0007 	bic.w	r0, r0, #7
 8007640:	1ac2      	subs	r2, r0, r3
 8007642:	bf1c      	itt	ne
 8007644:	1a1b      	subne	r3, r3, r0
 8007646:	50a3      	strne	r3, [r4, r2]
 8007648:	e7af      	b.n	80075aa <_malloc_r+0x22>
 800764a:	6862      	ldr	r2, [r4, #4]
 800764c:	42a3      	cmp	r3, r4
 800764e:	bf0c      	ite	eq
 8007650:	f8c8 2000 	streq.w	r2, [r8]
 8007654:	605a      	strne	r2, [r3, #4]
 8007656:	e7eb      	b.n	8007630 <_malloc_r+0xa8>
 8007658:	4623      	mov	r3, r4
 800765a:	6864      	ldr	r4, [r4, #4]
 800765c:	e7ae      	b.n	80075bc <_malloc_r+0x34>
 800765e:	463c      	mov	r4, r7
 8007660:	687f      	ldr	r7, [r7, #4]
 8007662:	e7b6      	b.n	80075d2 <_malloc_r+0x4a>
 8007664:	461a      	mov	r2, r3
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	42a3      	cmp	r3, r4
 800766a:	d1fb      	bne.n	8007664 <_malloc_r+0xdc>
 800766c:	2300      	movs	r3, #0
 800766e:	6053      	str	r3, [r2, #4]
 8007670:	e7de      	b.n	8007630 <_malloc_r+0xa8>
 8007672:	230c      	movs	r3, #12
 8007674:	6033      	str	r3, [r6, #0]
 8007676:	4630      	mov	r0, r6
 8007678:	f000 f80c 	bl	8007694 <__malloc_unlock>
 800767c:	e794      	b.n	80075a8 <_malloc_r+0x20>
 800767e:	6005      	str	r5, [r0, #0]
 8007680:	e7d6      	b.n	8007630 <_malloc_r+0xa8>
 8007682:	bf00      	nop
 8007684:	200030f8 	.word	0x200030f8

08007688 <__malloc_lock>:
 8007688:	4801      	ldr	r0, [pc, #4]	@ (8007690 <__malloc_lock+0x8>)
 800768a:	f7ff bf00 	b.w	800748e <__retarget_lock_acquire_recursive>
 800768e:	bf00      	nop
 8007690:	200030f0 	.word	0x200030f0

08007694 <__malloc_unlock>:
 8007694:	4801      	ldr	r0, [pc, #4]	@ (800769c <__malloc_unlock+0x8>)
 8007696:	f7ff befb 	b.w	8007490 <__retarget_lock_release_recursive>
 800769a:	bf00      	nop
 800769c:	200030f0 	.word	0x200030f0

080076a0 <__sfputc_r>:
 80076a0:	6893      	ldr	r3, [r2, #8]
 80076a2:	3b01      	subs	r3, #1
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	b410      	push	{r4}
 80076a8:	6093      	str	r3, [r2, #8]
 80076aa:	da08      	bge.n	80076be <__sfputc_r+0x1e>
 80076ac:	6994      	ldr	r4, [r2, #24]
 80076ae:	42a3      	cmp	r3, r4
 80076b0:	db01      	blt.n	80076b6 <__sfputc_r+0x16>
 80076b2:	290a      	cmp	r1, #10
 80076b4:	d103      	bne.n	80076be <__sfputc_r+0x1e>
 80076b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076ba:	f000 bb6b 	b.w	8007d94 <__swbuf_r>
 80076be:	6813      	ldr	r3, [r2, #0]
 80076c0:	1c58      	adds	r0, r3, #1
 80076c2:	6010      	str	r0, [r2, #0]
 80076c4:	7019      	strb	r1, [r3, #0]
 80076c6:	4608      	mov	r0, r1
 80076c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076cc:	4770      	bx	lr

080076ce <__sfputs_r>:
 80076ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076d0:	4606      	mov	r6, r0
 80076d2:	460f      	mov	r7, r1
 80076d4:	4614      	mov	r4, r2
 80076d6:	18d5      	adds	r5, r2, r3
 80076d8:	42ac      	cmp	r4, r5
 80076da:	d101      	bne.n	80076e0 <__sfputs_r+0x12>
 80076dc:	2000      	movs	r0, #0
 80076de:	e007      	b.n	80076f0 <__sfputs_r+0x22>
 80076e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076e4:	463a      	mov	r2, r7
 80076e6:	4630      	mov	r0, r6
 80076e8:	f7ff ffda 	bl	80076a0 <__sfputc_r>
 80076ec:	1c43      	adds	r3, r0, #1
 80076ee:	d1f3      	bne.n	80076d8 <__sfputs_r+0xa>
 80076f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080076f4 <_vfiprintf_r>:
 80076f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f8:	460d      	mov	r5, r1
 80076fa:	b09d      	sub	sp, #116	@ 0x74
 80076fc:	4614      	mov	r4, r2
 80076fe:	4698      	mov	r8, r3
 8007700:	4606      	mov	r6, r0
 8007702:	b118      	cbz	r0, 800770c <_vfiprintf_r+0x18>
 8007704:	6a03      	ldr	r3, [r0, #32]
 8007706:	b90b      	cbnz	r3, 800770c <_vfiprintf_r+0x18>
 8007708:	f7ff fdbc 	bl	8007284 <__sinit>
 800770c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800770e:	07d9      	lsls	r1, r3, #31
 8007710:	d405      	bmi.n	800771e <_vfiprintf_r+0x2a>
 8007712:	89ab      	ldrh	r3, [r5, #12]
 8007714:	059a      	lsls	r2, r3, #22
 8007716:	d402      	bmi.n	800771e <_vfiprintf_r+0x2a>
 8007718:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800771a:	f7ff feb8 	bl	800748e <__retarget_lock_acquire_recursive>
 800771e:	89ab      	ldrh	r3, [r5, #12]
 8007720:	071b      	lsls	r3, r3, #28
 8007722:	d501      	bpl.n	8007728 <_vfiprintf_r+0x34>
 8007724:	692b      	ldr	r3, [r5, #16]
 8007726:	b99b      	cbnz	r3, 8007750 <_vfiprintf_r+0x5c>
 8007728:	4629      	mov	r1, r5
 800772a:	4630      	mov	r0, r6
 800772c:	f000 fb70 	bl	8007e10 <__swsetup_r>
 8007730:	b170      	cbz	r0, 8007750 <_vfiprintf_r+0x5c>
 8007732:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007734:	07dc      	lsls	r4, r3, #31
 8007736:	d504      	bpl.n	8007742 <_vfiprintf_r+0x4e>
 8007738:	f04f 30ff 	mov.w	r0, #4294967295
 800773c:	b01d      	add	sp, #116	@ 0x74
 800773e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007742:	89ab      	ldrh	r3, [r5, #12]
 8007744:	0598      	lsls	r0, r3, #22
 8007746:	d4f7      	bmi.n	8007738 <_vfiprintf_r+0x44>
 8007748:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800774a:	f7ff fea1 	bl	8007490 <__retarget_lock_release_recursive>
 800774e:	e7f3      	b.n	8007738 <_vfiprintf_r+0x44>
 8007750:	2300      	movs	r3, #0
 8007752:	9309      	str	r3, [sp, #36]	@ 0x24
 8007754:	2320      	movs	r3, #32
 8007756:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800775a:	f8cd 800c 	str.w	r8, [sp, #12]
 800775e:	2330      	movs	r3, #48	@ 0x30
 8007760:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007910 <_vfiprintf_r+0x21c>
 8007764:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007768:	f04f 0901 	mov.w	r9, #1
 800776c:	4623      	mov	r3, r4
 800776e:	469a      	mov	sl, r3
 8007770:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007774:	b10a      	cbz	r2, 800777a <_vfiprintf_r+0x86>
 8007776:	2a25      	cmp	r2, #37	@ 0x25
 8007778:	d1f9      	bne.n	800776e <_vfiprintf_r+0x7a>
 800777a:	ebba 0b04 	subs.w	fp, sl, r4
 800777e:	d00b      	beq.n	8007798 <_vfiprintf_r+0xa4>
 8007780:	465b      	mov	r3, fp
 8007782:	4622      	mov	r2, r4
 8007784:	4629      	mov	r1, r5
 8007786:	4630      	mov	r0, r6
 8007788:	f7ff ffa1 	bl	80076ce <__sfputs_r>
 800778c:	3001      	adds	r0, #1
 800778e:	f000 80a7 	beq.w	80078e0 <_vfiprintf_r+0x1ec>
 8007792:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007794:	445a      	add	r2, fp
 8007796:	9209      	str	r2, [sp, #36]	@ 0x24
 8007798:	f89a 3000 	ldrb.w	r3, [sl]
 800779c:	2b00      	cmp	r3, #0
 800779e:	f000 809f 	beq.w	80078e0 <_vfiprintf_r+0x1ec>
 80077a2:	2300      	movs	r3, #0
 80077a4:	f04f 32ff 	mov.w	r2, #4294967295
 80077a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077ac:	f10a 0a01 	add.w	sl, sl, #1
 80077b0:	9304      	str	r3, [sp, #16]
 80077b2:	9307      	str	r3, [sp, #28]
 80077b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80077b8:	931a      	str	r3, [sp, #104]	@ 0x68
 80077ba:	4654      	mov	r4, sl
 80077bc:	2205      	movs	r2, #5
 80077be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077c2:	4853      	ldr	r0, [pc, #332]	@ (8007910 <_vfiprintf_r+0x21c>)
 80077c4:	f7f8 fd0c 	bl	80001e0 <memchr>
 80077c8:	9a04      	ldr	r2, [sp, #16]
 80077ca:	b9d8      	cbnz	r0, 8007804 <_vfiprintf_r+0x110>
 80077cc:	06d1      	lsls	r1, r2, #27
 80077ce:	bf44      	itt	mi
 80077d0:	2320      	movmi	r3, #32
 80077d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077d6:	0713      	lsls	r3, r2, #28
 80077d8:	bf44      	itt	mi
 80077da:	232b      	movmi	r3, #43	@ 0x2b
 80077dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077e0:	f89a 3000 	ldrb.w	r3, [sl]
 80077e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80077e6:	d015      	beq.n	8007814 <_vfiprintf_r+0x120>
 80077e8:	9a07      	ldr	r2, [sp, #28]
 80077ea:	4654      	mov	r4, sl
 80077ec:	2000      	movs	r0, #0
 80077ee:	f04f 0c0a 	mov.w	ip, #10
 80077f2:	4621      	mov	r1, r4
 80077f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077f8:	3b30      	subs	r3, #48	@ 0x30
 80077fa:	2b09      	cmp	r3, #9
 80077fc:	d94b      	bls.n	8007896 <_vfiprintf_r+0x1a2>
 80077fe:	b1b0      	cbz	r0, 800782e <_vfiprintf_r+0x13a>
 8007800:	9207      	str	r2, [sp, #28]
 8007802:	e014      	b.n	800782e <_vfiprintf_r+0x13a>
 8007804:	eba0 0308 	sub.w	r3, r0, r8
 8007808:	fa09 f303 	lsl.w	r3, r9, r3
 800780c:	4313      	orrs	r3, r2
 800780e:	9304      	str	r3, [sp, #16]
 8007810:	46a2      	mov	sl, r4
 8007812:	e7d2      	b.n	80077ba <_vfiprintf_r+0xc6>
 8007814:	9b03      	ldr	r3, [sp, #12]
 8007816:	1d19      	adds	r1, r3, #4
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	9103      	str	r1, [sp, #12]
 800781c:	2b00      	cmp	r3, #0
 800781e:	bfbb      	ittet	lt
 8007820:	425b      	neglt	r3, r3
 8007822:	f042 0202 	orrlt.w	r2, r2, #2
 8007826:	9307      	strge	r3, [sp, #28]
 8007828:	9307      	strlt	r3, [sp, #28]
 800782a:	bfb8      	it	lt
 800782c:	9204      	strlt	r2, [sp, #16]
 800782e:	7823      	ldrb	r3, [r4, #0]
 8007830:	2b2e      	cmp	r3, #46	@ 0x2e
 8007832:	d10a      	bne.n	800784a <_vfiprintf_r+0x156>
 8007834:	7863      	ldrb	r3, [r4, #1]
 8007836:	2b2a      	cmp	r3, #42	@ 0x2a
 8007838:	d132      	bne.n	80078a0 <_vfiprintf_r+0x1ac>
 800783a:	9b03      	ldr	r3, [sp, #12]
 800783c:	1d1a      	adds	r2, r3, #4
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	9203      	str	r2, [sp, #12]
 8007842:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007846:	3402      	adds	r4, #2
 8007848:	9305      	str	r3, [sp, #20]
 800784a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007920 <_vfiprintf_r+0x22c>
 800784e:	7821      	ldrb	r1, [r4, #0]
 8007850:	2203      	movs	r2, #3
 8007852:	4650      	mov	r0, sl
 8007854:	f7f8 fcc4 	bl	80001e0 <memchr>
 8007858:	b138      	cbz	r0, 800786a <_vfiprintf_r+0x176>
 800785a:	9b04      	ldr	r3, [sp, #16]
 800785c:	eba0 000a 	sub.w	r0, r0, sl
 8007860:	2240      	movs	r2, #64	@ 0x40
 8007862:	4082      	lsls	r2, r0
 8007864:	4313      	orrs	r3, r2
 8007866:	3401      	adds	r4, #1
 8007868:	9304      	str	r3, [sp, #16]
 800786a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800786e:	4829      	ldr	r0, [pc, #164]	@ (8007914 <_vfiprintf_r+0x220>)
 8007870:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007874:	2206      	movs	r2, #6
 8007876:	f7f8 fcb3 	bl	80001e0 <memchr>
 800787a:	2800      	cmp	r0, #0
 800787c:	d03f      	beq.n	80078fe <_vfiprintf_r+0x20a>
 800787e:	4b26      	ldr	r3, [pc, #152]	@ (8007918 <_vfiprintf_r+0x224>)
 8007880:	bb1b      	cbnz	r3, 80078ca <_vfiprintf_r+0x1d6>
 8007882:	9b03      	ldr	r3, [sp, #12]
 8007884:	3307      	adds	r3, #7
 8007886:	f023 0307 	bic.w	r3, r3, #7
 800788a:	3308      	adds	r3, #8
 800788c:	9303      	str	r3, [sp, #12]
 800788e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007890:	443b      	add	r3, r7
 8007892:	9309      	str	r3, [sp, #36]	@ 0x24
 8007894:	e76a      	b.n	800776c <_vfiprintf_r+0x78>
 8007896:	fb0c 3202 	mla	r2, ip, r2, r3
 800789a:	460c      	mov	r4, r1
 800789c:	2001      	movs	r0, #1
 800789e:	e7a8      	b.n	80077f2 <_vfiprintf_r+0xfe>
 80078a0:	2300      	movs	r3, #0
 80078a2:	3401      	adds	r4, #1
 80078a4:	9305      	str	r3, [sp, #20]
 80078a6:	4619      	mov	r1, r3
 80078a8:	f04f 0c0a 	mov.w	ip, #10
 80078ac:	4620      	mov	r0, r4
 80078ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078b2:	3a30      	subs	r2, #48	@ 0x30
 80078b4:	2a09      	cmp	r2, #9
 80078b6:	d903      	bls.n	80078c0 <_vfiprintf_r+0x1cc>
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d0c6      	beq.n	800784a <_vfiprintf_r+0x156>
 80078bc:	9105      	str	r1, [sp, #20]
 80078be:	e7c4      	b.n	800784a <_vfiprintf_r+0x156>
 80078c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80078c4:	4604      	mov	r4, r0
 80078c6:	2301      	movs	r3, #1
 80078c8:	e7f0      	b.n	80078ac <_vfiprintf_r+0x1b8>
 80078ca:	ab03      	add	r3, sp, #12
 80078cc:	9300      	str	r3, [sp, #0]
 80078ce:	462a      	mov	r2, r5
 80078d0:	4b12      	ldr	r3, [pc, #72]	@ (800791c <_vfiprintf_r+0x228>)
 80078d2:	a904      	add	r1, sp, #16
 80078d4:	4630      	mov	r0, r6
 80078d6:	f3af 8000 	nop.w
 80078da:	4607      	mov	r7, r0
 80078dc:	1c78      	adds	r0, r7, #1
 80078de:	d1d6      	bne.n	800788e <_vfiprintf_r+0x19a>
 80078e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078e2:	07d9      	lsls	r1, r3, #31
 80078e4:	d405      	bmi.n	80078f2 <_vfiprintf_r+0x1fe>
 80078e6:	89ab      	ldrh	r3, [r5, #12]
 80078e8:	059a      	lsls	r2, r3, #22
 80078ea:	d402      	bmi.n	80078f2 <_vfiprintf_r+0x1fe>
 80078ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80078ee:	f7ff fdcf 	bl	8007490 <__retarget_lock_release_recursive>
 80078f2:	89ab      	ldrh	r3, [r5, #12]
 80078f4:	065b      	lsls	r3, r3, #25
 80078f6:	f53f af1f 	bmi.w	8007738 <_vfiprintf_r+0x44>
 80078fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80078fc:	e71e      	b.n	800773c <_vfiprintf_r+0x48>
 80078fe:	ab03      	add	r3, sp, #12
 8007900:	9300      	str	r3, [sp, #0]
 8007902:	462a      	mov	r2, r5
 8007904:	4b05      	ldr	r3, [pc, #20]	@ (800791c <_vfiprintf_r+0x228>)
 8007906:	a904      	add	r1, sp, #16
 8007908:	4630      	mov	r0, r6
 800790a:	f000 f879 	bl	8007a00 <_printf_i>
 800790e:	e7e4      	b.n	80078da <_vfiprintf_r+0x1e6>
 8007910:	0801dacc 	.word	0x0801dacc
 8007914:	0801dad6 	.word	0x0801dad6
 8007918:	00000000 	.word	0x00000000
 800791c:	080076cf 	.word	0x080076cf
 8007920:	0801dad2 	.word	0x0801dad2

08007924 <_printf_common>:
 8007924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007928:	4616      	mov	r6, r2
 800792a:	4698      	mov	r8, r3
 800792c:	688a      	ldr	r2, [r1, #8]
 800792e:	690b      	ldr	r3, [r1, #16]
 8007930:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007934:	4293      	cmp	r3, r2
 8007936:	bfb8      	it	lt
 8007938:	4613      	movlt	r3, r2
 800793a:	6033      	str	r3, [r6, #0]
 800793c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007940:	4607      	mov	r7, r0
 8007942:	460c      	mov	r4, r1
 8007944:	b10a      	cbz	r2, 800794a <_printf_common+0x26>
 8007946:	3301      	adds	r3, #1
 8007948:	6033      	str	r3, [r6, #0]
 800794a:	6823      	ldr	r3, [r4, #0]
 800794c:	0699      	lsls	r1, r3, #26
 800794e:	bf42      	ittt	mi
 8007950:	6833      	ldrmi	r3, [r6, #0]
 8007952:	3302      	addmi	r3, #2
 8007954:	6033      	strmi	r3, [r6, #0]
 8007956:	6825      	ldr	r5, [r4, #0]
 8007958:	f015 0506 	ands.w	r5, r5, #6
 800795c:	d106      	bne.n	800796c <_printf_common+0x48>
 800795e:	f104 0a19 	add.w	sl, r4, #25
 8007962:	68e3      	ldr	r3, [r4, #12]
 8007964:	6832      	ldr	r2, [r6, #0]
 8007966:	1a9b      	subs	r3, r3, r2
 8007968:	42ab      	cmp	r3, r5
 800796a:	dc26      	bgt.n	80079ba <_printf_common+0x96>
 800796c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007970:	6822      	ldr	r2, [r4, #0]
 8007972:	3b00      	subs	r3, #0
 8007974:	bf18      	it	ne
 8007976:	2301      	movne	r3, #1
 8007978:	0692      	lsls	r2, r2, #26
 800797a:	d42b      	bmi.n	80079d4 <_printf_common+0xb0>
 800797c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007980:	4641      	mov	r1, r8
 8007982:	4638      	mov	r0, r7
 8007984:	47c8      	blx	r9
 8007986:	3001      	adds	r0, #1
 8007988:	d01e      	beq.n	80079c8 <_printf_common+0xa4>
 800798a:	6823      	ldr	r3, [r4, #0]
 800798c:	6922      	ldr	r2, [r4, #16]
 800798e:	f003 0306 	and.w	r3, r3, #6
 8007992:	2b04      	cmp	r3, #4
 8007994:	bf02      	ittt	eq
 8007996:	68e5      	ldreq	r5, [r4, #12]
 8007998:	6833      	ldreq	r3, [r6, #0]
 800799a:	1aed      	subeq	r5, r5, r3
 800799c:	68a3      	ldr	r3, [r4, #8]
 800799e:	bf0c      	ite	eq
 80079a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079a4:	2500      	movne	r5, #0
 80079a6:	4293      	cmp	r3, r2
 80079a8:	bfc4      	itt	gt
 80079aa:	1a9b      	subgt	r3, r3, r2
 80079ac:	18ed      	addgt	r5, r5, r3
 80079ae:	2600      	movs	r6, #0
 80079b0:	341a      	adds	r4, #26
 80079b2:	42b5      	cmp	r5, r6
 80079b4:	d11a      	bne.n	80079ec <_printf_common+0xc8>
 80079b6:	2000      	movs	r0, #0
 80079b8:	e008      	b.n	80079cc <_printf_common+0xa8>
 80079ba:	2301      	movs	r3, #1
 80079bc:	4652      	mov	r2, sl
 80079be:	4641      	mov	r1, r8
 80079c0:	4638      	mov	r0, r7
 80079c2:	47c8      	blx	r9
 80079c4:	3001      	adds	r0, #1
 80079c6:	d103      	bne.n	80079d0 <_printf_common+0xac>
 80079c8:	f04f 30ff 	mov.w	r0, #4294967295
 80079cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079d0:	3501      	adds	r5, #1
 80079d2:	e7c6      	b.n	8007962 <_printf_common+0x3e>
 80079d4:	18e1      	adds	r1, r4, r3
 80079d6:	1c5a      	adds	r2, r3, #1
 80079d8:	2030      	movs	r0, #48	@ 0x30
 80079da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80079de:	4422      	add	r2, r4
 80079e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80079e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80079e8:	3302      	adds	r3, #2
 80079ea:	e7c7      	b.n	800797c <_printf_common+0x58>
 80079ec:	2301      	movs	r3, #1
 80079ee:	4622      	mov	r2, r4
 80079f0:	4641      	mov	r1, r8
 80079f2:	4638      	mov	r0, r7
 80079f4:	47c8      	blx	r9
 80079f6:	3001      	adds	r0, #1
 80079f8:	d0e6      	beq.n	80079c8 <_printf_common+0xa4>
 80079fa:	3601      	adds	r6, #1
 80079fc:	e7d9      	b.n	80079b2 <_printf_common+0x8e>
	...

08007a00 <_printf_i>:
 8007a00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a04:	7e0f      	ldrb	r7, [r1, #24]
 8007a06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007a08:	2f78      	cmp	r7, #120	@ 0x78
 8007a0a:	4691      	mov	r9, r2
 8007a0c:	4680      	mov	r8, r0
 8007a0e:	460c      	mov	r4, r1
 8007a10:	469a      	mov	sl, r3
 8007a12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007a16:	d807      	bhi.n	8007a28 <_printf_i+0x28>
 8007a18:	2f62      	cmp	r7, #98	@ 0x62
 8007a1a:	d80a      	bhi.n	8007a32 <_printf_i+0x32>
 8007a1c:	2f00      	cmp	r7, #0
 8007a1e:	f000 80d1 	beq.w	8007bc4 <_printf_i+0x1c4>
 8007a22:	2f58      	cmp	r7, #88	@ 0x58
 8007a24:	f000 80b8 	beq.w	8007b98 <_printf_i+0x198>
 8007a28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007a30:	e03a      	b.n	8007aa8 <_printf_i+0xa8>
 8007a32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007a36:	2b15      	cmp	r3, #21
 8007a38:	d8f6      	bhi.n	8007a28 <_printf_i+0x28>
 8007a3a:	a101      	add	r1, pc, #4	@ (adr r1, 8007a40 <_printf_i+0x40>)
 8007a3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a40:	08007a99 	.word	0x08007a99
 8007a44:	08007aad 	.word	0x08007aad
 8007a48:	08007a29 	.word	0x08007a29
 8007a4c:	08007a29 	.word	0x08007a29
 8007a50:	08007a29 	.word	0x08007a29
 8007a54:	08007a29 	.word	0x08007a29
 8007a58:	08007aad 	.word	0x08007aad
 8007a5c:	08007a29 	.word	0x08007a29
 8007a60:	08007a29 	.word	0x08007a29
 8007a64:	08007a29 	.word	0x08007a29
 8007a68:	08007a29 	.word	0x08007a29
 8007a6c:	08007bab 	.word	0x08007bab
 8007a70:	08007ad7 	.word	0x08007ad7
 8007a74:	08007b65 	.word	0x08007b65
 8007a78:	08007a29 	.word	0x08007a29
 8007a7c:	08007a29 	.word	0x08007a29
 8007a80:	08007bcd 	.word	0x08007bcd
 8007a84:	08007a29 	.word	0x08007a29
 8007a88:	08007ad7 	.word	0x08007ad7
 8007a8c:	08007a29 	.word	0x08007a29
 8007a90:	08007a29 	.word	0x08007a29
 8007a94:	08007b6d 	.word	0x08007b6d
 8007a98:	6833      	ldr	r3, [r6, #0]
 8007a9a:	1d1a      	adds	r2, r3, #4
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	6032      	str	r2, [r6, #0]
 8007aa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007aa4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e09c      	b.n	8007be6 <_printf_i+0x1e6>
 8007aac:	6833      	ldr	r3, [r6, #0]
 8007aae:	6820      	ldr	r0, [r4, #0]
 8007ab0:	1d19      	adds	r1, r3, #4
 8007ab2:	6031      	str	r1, [r6, #0]
 8007ab4:	0606      	lsls	r6, r0, #24
 8007ab6:	d501      	bpl.n	8007abc <_printf_i+0xbc>
 8007ab8:	681d      	ldr	r5, [r3, #0]
 8007aba:	e003      	b.n	8007ac4 <_printf_i+0xc4>
 8007abc:	0645      	lsls	r5, r0, #25
 8007abe:	d5fb      	bpl.n	8007ab8 <_printf_i+0xb8>
 8007ac0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007ac4:	2d00      	cmp	r5, #0
 8007ac6:	da03      	bge.n	8007ad0 <_printf_i+0xd0>
 8007ac8:	232d      	movs	r3, #45	@ 0x2d
 8007aca:	426d      	negs	r5, r5
 8007acc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ad0:	4858      	ldr	r0, [pc, #352]	@ (8007c34 <_printf_i+0x234>)
 8007ad2:	230a      	movs	r3, #10
 8007ad4:	e011      	b.n	8007afa <_printf_i+0xfa>
 8007ad6:	6821      	ldr	r1, [r4, #0]
 8007ad8:	6833      	ldr	r3, [r6, #0]
 8007ada:	0608      	lsls	r0, r1, #24
 8007adc:	f853 5b04 	ldr.w	r5, [r3], #4
 8007ae0:	d402      	bmi.n	8007ae8 <_printf_i+0xe8>
 8007ae2:	0649      	lsls	r1, r1, #25
 8007ae4:	bf48      	it	mi
 8007ae6:	b2ad      	uxthmi	r5, r5
 8007ae8:	2f6f      	cmp	r7, #111	@ 0x6f
 8007aea:	4852      	ldr	r0, [pc, #328]	@ (8007c34 <_printf_i+0x234>)
 8007aec:	6033      	str	r3, [r6, #0]
 8007aee:	bf14      	ite	ne
 8007af0:	230a      	movne	r3, #10
 8007af2:	2308      	moveq	r3, #8
 8007af4:	2100      	movs	r1, #0
 8007af6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007afa:	6866      	ldr	r6, [r4, #4]
 8007afc:	60a6      	str	r6, [r4, #8]
 8007afe:	2e00      	cmp	r6, #0
 8007b00:	db05      	blt.n	8007b0e <_printf_i+0x10e>
 8007b02:	6821      	ldr	r1, [r4, #0]
 8007b04:	432e      	orrs	r6, r5
 8007b06:	f021 0104 	bic.w	r1, r1, #4
 8007b0a:	6021      	str	r1, [r4, #0]
 8007b0c:	d04b      	beq.n	8007ba6 <_printf_i+0x1a6>
 8007b0e:	4616      	mov	r6, r2
 8007b10:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b14:	fb03 5711 	mls	r7, r3, r1, r5
 8007b18:	5dc7      	ldrb	r7, [r0, r7]
 8007b1a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b1e:	462f      	mov	r7, r5
 8007b20:	42bb      	cmp	r3, r7
 8007b22:	460d      	mov	r5, r1
 8007b24:	d9f4      	bls.n	8007b10 <_printf_i+0x110>
 8007b26:	2b08      	cmp	r3, #8
 8007b28:	d10b      	bne.n	8007b42 <_printf_i+0x142>
 8007b2a:	6823      	ldr	r3, [r4, #0]
 8007b2c:	07df      	lsls	r7, r3, #31
 8007b2e:	d508      	bpl.n	8007b42 <_printf_i+0x142>
 8007b30:	6923      	ldr	r3, [r4, #16]
 8007b32:	6861      	ldr	r1, [r4, #4]
 8007b34:	4299      	cmp	r1, r3
 8007b36:	bfde      	ittt	le
 8007b38:	2330      	movle	r3, #48	@ 0x30
 8007b3a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007b3e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007b42:	1b92      	subs	r2, r2, r6
 8007b44:	6122      	str	r2, [r4, #16]
 8007b46:	f8cd a000 	str.w	sl, [sp]
 8007b4a:	464b      	mov	r3, r9
 8007b4c:	aa03      	add	r2, sp, #12
 8007b4e:	4621      	mov	r1, r4
 8007b50:	4640      	mov	r0, r8
 8007b52:	f7ff fee7 	bl	8007924 <_printf_common>
 8007b56:	3001      	adds	r0, #1
 8007b58:	d14a      	bne.n	8007bf0 <_printf_i+0x1f0>
 8007b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b5e:	b004      	add	sp, #16
 8007b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b64:	6823      	ldr	r3, [r4, #0]
 8007b66:	f043 0320 	orr.w	r3, r3, #32
 8007b6a:	6023      	str	r3, [r4, #0]
 8007b6c:	4832      	ldr	r0, [pc, #200]	@ (8007c38 <_printf_i+0x238>)
 8007b6e:	2778      	movs	r7, #120	@ 0x78
 8007b70:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007b74:	6823      	ldr	r3, [r4, #0]
 8007b76:	6831      	ldr	r1, [r6, #0]
 8007b78:	061f      	lsls	r7, r3, #24
 8007b7a:	f851 5b04 	ldr.w	r5, [r1], #4
 8007b7e:	d402      	bmi.n	8007b86 <_printf_i+0x186>
 8007b80:	065f      	lsls	r7, r3, #25
 8007b82:	bf48      	it	mi
 8007b84:	b2ad      	uxthmi	r5, r5
 8007b86:	6031      	str	r1, [r6, #0]
 8007b88:	07d9      	lsls	r1, r3, #31
 8007b8a:	bf44      	itt	mi
 8007b8c:	f043 0320 	orrmi.w	r3, r3, #32
 8007b90:	6023      	strmi	r3, [r4, #0]
 8007b92:	b11d      	cbz	r5, 8007b9c <_printf_i+0x19c>
 8007b94:	2310      	movs	r3, #16
 8007b96:	e7ad      	b.n	8007af4 <_printf_i+0xf4>
 8007b98:	4826      	ldr	r0, [pc, #152]	@ (8007c34 <_printf_i+0x234>)
 8007b9a:	e7e9      	b.n	8007b70 <_printf_i+0x170>
 8007b9c:	6823      	ldr	r3, [r4, #0]
 8007b9e:	f023 0320 	bic.w	r3, r3, #32
 8007ba2:	6023      	str	r3, [r4, #0]
 8007ba4:	e7f6      	b.n	8007b94 <_printf_i+0x194>
 8007ba6:	4616      	mov	r6, r2
 8007ba8:	e7bd      	b.n	8007b26 <_printf_i+0x126>
 8007baa:	6833      	ldr	r3, [r6, #0]
 8007bac:	6825      	ldr	r5, [r4, #0]
 8007bae:	6961      	ldr	r1, [r4, #20]
 8007bb0:	1d18      	adds	r0, r3, #4
 8007bb2:	6030      	str	r0, [r6, #0]
 8007bb4:	062e      	lsls	r6, r5, #24
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	d501      	bpl.n	8007bbe <_printf_i+0x1be>
 8007bba:	6019      	str	r1, [r3, #0]
 8007bbc:	e002      	b.n	8007bc4 <_printf_i+0x1c4>
 8007bbe:	0668      	lsls	r0, r5, #25
 8007bc0:	d5fb      	bpl.n	8007bba <_printf_i+0x1ba>
 8007bc2:	8019      	strh	r1, [r3, #0]
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	6123      	str	r3, [r4, #16]
 8007bc8:	4616      	mov	r6, r2
 8007bca:	e7bc      	b.n	8007b46 <_printf_i+0x146>
 8007bcc:	6833      	ldr	r3, [r6, #0]
 8007bce:	1d1a      	adds	r2, r3, #4
 8007bd0:	6032      	str	r2, [r6, #0]
 8007bd2:	681e      	ldr	r6, [r3, #0]
 8007bd4:	6862      	ldr	r2, [r4, #4]
 8007bd6:	2100      	movs	r1, #0
 8007bd8:	4630      	mov	r0, r6
 8007bda:	f7f8 fb01 	bl	80001e0 <memchr>
 8007bde:	b108      	cbz	r0, 8007be4 <_printf_i+0x1e4>
 8007be0:	1b80      	subs	r0, r0, r6
 8007be2:	6060      	str	r0, [r4, #4]
 8007be4:	6863      	ldr	r3, [r4, #4]
 8007be6:	6123      	str	r3, [r4, #16]
 8007be8:	2300      	movs	r3, #0
 8007bea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bee:	e7aa      	b.n	8007b46 <_printf_i+0x146>
 8007bf0:	6923      	ldr	r3, [r4, #16]
 8007bf2:	4632      	mov	r2, r6
 8007bf4:	4649      	mov	r1, r9
 8007bf6:	4640      	mov	r0, r8
 8007bf8:	47d0      	blx	sl
 8007bfa:	3001      	adds	r0, #1
 8007bfc:	d0ad      	beq.n	8007b5a <_printf_i+0x15a>
 8007bfe:	6823      	ldr	r3, [r4, #0]
 8007c00:	079b      	lsls	r3, r3, #30
 8007c02:	d413      	bmi.n	8007c2c <_printf_i+0x22c>
 8007c04:	68e0      	ldr	r0, [r4, #12]
 8007c06:	9b03      	ldr	r3, [sp, #12]
 8007c08:	4298      	cmp	r0, r3
 8007c0a:	bfb8      	it	lt
 8007c0c:	4618      	movlt	r0, r3
 8007c0e:	e7a6      	b.n	8007b5e <_printf_i+0x15e>
 8007c10:	2301      	movs	r3, #1
 8007c12:	4632      	mov	r2, r6
 8007c14:	4649      	mov	r1, r9
 8007c16:	4640      	mov	r0, r8
 8007c18:	47d0      	blx	sl
 8007c1a:	3001      	adds	r0, #1
 8007c1c:	d09d      	beq.n	8007b5a <_printf_i+0x15a>
 8007c1e:	3501      	adds	r5, #1
 8007c20:	68e3      	ldr	r3, [r4, #12]
 8007c22:	9903      	ldr	r1, [sp, #12]
 8007c24:	1a5b      	subs	r3, r3, r1
 8007c26:	42ab      	cmp	r3, r5
 8007c28:	dcf2      	bgt.n	8007c10 <_printf_i+0x210>
 8007c2a:	e7eb      	b.n	8007c04 <_printf_i+0x204>
 8007c2c:	2500      	movs	r5, #0
 8007c2e:	f104 0619 	add.w	r6, r4, #25
 8007c32:	e7f5      	b.n	8007c20 <_printf_i+0x220>
 8007c34:	0801dadd 	.word	0x0801dadd
 8007c38:	0801daee 	.word	0x0801daee

08007c3c <__sflush_r>:
 8007c3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c44:	0716      	lsls	r6, r2, #28
 8007c46:	4605      	mov	r5, r0
 8007c48:	460c      	mov	r4, r1
 8007c4a:	d454      	bmi.n	8007cf6 <__sflush_r+0xba>
 8007c4c:	684b      	ldr	r3, [r1, #4]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	dc02      	bgt.n	8007c58 <__sflush_r+0x1c>
 8007c52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	dd48      	ble.n	8007cea <__sflush_r+0xae>
 8007c58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c5a:	2e00      	cmp	r6, #0
 8007c5c:	d045      	beq.n	8007cea <__sflush_r+0xae>
 8007c5e:	2300      	movs	r3, #0
 8007c60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007c64:	682f      	ldr	r7, [r5, #0]
 8007c66:	6a21      	ldr	r1, [r4, #32]
 8007c68:	602b      	str	r3, [r5, #0]
 8007c6a:	d030      	beq.n	8007cce <__sflush_r+0x92>
 8007c6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007c6e:	89a3      	ldrh	r3, [r4, #12]
 8007c70:	0759      	lsls	r1, r3, #29
 8007c72:	d505      	bpl.n	8007c80 <__sflush_r+0x44>
 8007c74:	6863      	ldr	r3, [r4, #4]
 8007c76:	1ad2      	subs	r2, r2, r3
 8007c78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007c7a:	b10b      	cbz	r3, 8007c80 <__sflush_r+0x44>
 8007c7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007c7e:	1ad2      	subs	r2, r2, r3
 8007c80:	2300      	movs	r3, #0
 8007c82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c84:	6a21      	ldr	r1, [r4, #32]
 8007c86:	4628      	mov	r0, r5
 8007c88:	47b0      	blx	r6
 8007c8a:	1c43      	adds	r3, r0, #1
 8007c8c:	89a3      	ldrh	r3, [r4, #12]
 8007c8e:	d106      	bne.n	8007c9e <__sflush_r+0x62>
 8007c90:	6829      	ldr	r1, [r5, #0]
 8007c92:	291d      	cmp	r1, #29
 8007c94:	d82b      	bhi.n	8007cee <__sflush_r+0xb2>
 8007c96:	4a2a      	ldr	r2, [pc, #168]	@ (8007d40 <__sflush_r+0x104>)
 8007c98:	40ca      	lsrs	r2, r1
 8007c9a:	07d6      	lsls	r6, r2, #31
 8007c9c:	d527      	bpl.n	8007cee <__sflush_r+0xb2>
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	6062      	str	r2, [r4, #4]
 8007ca2:	04d9      	lsls	r1, r3, #19
 8007ca4:	6922      	ldr	r2, [r4, #16]
 8007ca6:	6022      	str	r2, [r4, #0]
 8007ca8:	d504      	bpl.n	8007cb4 <__sflush_r+0x78>
 8007caa:	1c42      	adds	r2, r0, #1
 8007cac:	d101      	bne.n	8007cb2 <__sflush_r+0x76>
 8007cae:	682b      	ldr	r3, [r5, #0]
 8007cb0:	b903      	cbnz	r3, 8007cb4 <__sflush_r+0x78>
 8007cb2:	6560      	str	r0, [r4, #84]	@ 0x54
 8007cb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007cb6:	602f      	str	r7, [r5, #0]
 8007cb8:	b1b9      	cbz	r1, 8007cea <__sflush_r+0xae>
 8007cba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007cbe:	4299      	cmp	r1, r3
 8007cc0:	d002      	beq.n	8007cc8 <__sflush_r+0x8c>
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	f7ff fbf4 	bl	80074b0 <_free_r>
 8007cc8:	2300      	movs	r3, #0
 8007cca:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ccc:	e00d      	b.n	8007cea <__sflush_r+0xae>
 8007cce:	2301      	movs	r3, #1
 8007cd0:	4628      	mov	r0, r5
 8007cd2:	47b0      	blx	r6
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	1c50      	adds	r0, r2, #1
 8007cd8:	d1c9      	bne.n	8007c6e <__sflush_r+0x32>
 8007cda:	682b      	ldr	r3, [r5, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d0c6      	beq.n	8007c6e <__sflush_r+0x32>
 8007ce0:	2b1d      	cmp	r3, #29
 8007ce2:	d001      	beq.n	8007ce8 <__sflush_r+0xac>
 8007ce4:	2b16      	cmp	r3, #22
 8007ce6:	d11e      	bne.n	8007d26 <__sflush_r+0xea>
 8007ce8:	602f      	str	r7, [r5, #0]
 8007cea:	2000      	movs	r0, #0
 8007cec:	e022      	b.n	8007d34 <__sflush_r+0xf8>
 8007cee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cf2:	b21b      	sxth	r3, r3
 8007cf4:	e01b      	b.n	8007d2e <__sflush_r+0xf2>
 8007cf6:	690f      	ldr	r7, [r1, #16]
 8007cf8:	2f00      	cmp	r7, #0
 8007cfa:	d0f6      	beq.n	8007cea <__sflush_r+0xae>
 8007cfc:	0793      	lsls	r3, r2, #30
 8007cfe:	680e      	ldr	r6, [r1, #0]
 8007d00:	bf08      	it	eq
 8007d02:	694b      	ldreq	r3, [r1, #20]
 8007d04:	600f      	str	r7, [r1, #0]
 8007d06:	bf18      	it	ne
 8007d08:	2300      	movne	r3, #0
 8007d0a:	eba6 0807 	sub.w	r8, r6, r7
 8007d0e:	608b      	str	r3, [r1, #8]
 8007d10:	f1b8 0f00 	cmp.w	r8, #0
 8007d14:	dde9      	ble.n	8007cea <__sflush_r+0xae>
 8007d16:	6a21      	ldr	r1, [r4, #32]
 8007d18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007d1a:	4643      	mov	r3, r8
 8007d1c:	463a      	mov	r2, r7
 8007d1e:	4628      	mov	r0, r5
 8007d20:	47b0      	blx	r6
 8007d22:	2800      	cmp	r0, #0
 8007d24:	dc08      	bgt.n	8007d38 <__sflush_r+0xfc>
 8007d26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d2e:	81a3      	strh	r3, [r4, #12]
 8007d30:	f04f 30ff 	mov.w	r0, #4294967295
 8007d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d38:	4407      	add	r7, r0
 8007d3a:	eba8 0800 	sub.w	r8, r8, r0
 8007d3e:	e7e7      	b.n	8007d10 <__sflush_r+0xd4>
 8007d40:	20400001 	.word	0x20400001

08007d44 <_fflush_r>:
 8007d44:	b538      	push	{r3, r4, r5, lr}
 8007d46:	690b      	ldr	r3, [r1, #16]
 8007d48:	4605      	mov	r5, r0
 8007d4a:	460c      	mov	r4, r1
 8007d4c:	b913      	cbnz	r3, 8007d54 <_fflush_r+0x10>
 8007d4e:	2500      	movs	r5, #0
 8007d50:	4628      	mov	r0, r5
 8007d52:	bd38      	pop	{r3, r4, r5, pc}
 8007d54:	b118      	cbz	r0, 8007d5e <_fflush_r+0x1a>
 8007d56:	6a03      	ldr	r3, [r0, #32]
 8007d58:	b90b      	cbnz	r3, 8007d5e <_fflush_r+0x1a>
 8007d5a:	f7ff fa93 	bl	8007284 <__sinit>
 8007d5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d0f3      	beq.n	8007d4e <_fflush_r+0xa>
 8007d66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007d68:	07d0      	lsls	r0, r2, #31
 8007d6a:	d404      	bmi.n	8007d76 <_fflush_r+0x32>
 8007d6c:	0599      	lsls	r1, r3, #22
 8007d6e:	d402      	bmi.n	8007d76 <_fflush_r+0x32>
 8007d70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d72:	f7ff fb8c 	bl	800748e <__retarget_lock_acquire_recursive>
 8007d76:	4628      	mov	r0, r5
 8007d78:	4621      	mov	r1, r4
 8007d7a:	f7ff ff5f 	bl	8007c3c <__sflush_r>
 8007d7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d80:	07da      	lsls	r2, r3, #31
 8007d82:	4605      	mov	r5, r0
 8007d84:	d4e4      	bmi.n	8007d50 <_fflush_r+0xc>
 8007d86:	89a3      	ldrh	r3, [r4, #12]
 8007d88:	059b      	lsls	r3, r3, #22
 8007d8a:	d4e1      	bmi.n	8007d50 <_fflush_r+0xc>
 8007d8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d8e:	f7ff fb7f 	bl	8007490 <__retarget_lock_release_recursive>
 8007d92:	e7dd      	b.n	8007d50 <_fflush_r+0xc>

08007d94 <__swbuf_r>:
 8007d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d96:	460e      	mov	r6, r1
 8007d98:	4614      	mov	r4, r2
 8007d9a:	4605      	mov	r5, r0
 8007d9c:	b118      	cbz	r0, 8007da6 <__swbuf_r+0x12>
 8007d9e:	6a03      	ldr	r3, [r0, #32]
 8007da0:	b90b      	cbnz	r3, 8007da6 <__swbuf_r+0x12>
 8007da2:	f7ff fa6f 	bl	8007284 <__sinit>
 8007da6:	69a3      	ldr	r3, [r4, #24]
 8007da8:	60a3      	str	r3, [r4, #8]
 8007daa:	89a3      	ldrh	r3, [r4, #12]
 8007dac:	071a      	lsls	r2, r3, #28
 8007dae:	d501      	bpl.n	8007db4 <__swbuf_r+0x20>
 8007db0:	6923      	ldr	r3, [r4, #16]
 8007db2:	b943      	cbnz	r3, 8007dc6 <__swbuf_r+0x32>
 8007db4:	4621      	mov	r1, r4
 8007db6:	4628      	mov	r0, r5
 8007db8:	f000 f82a 	bl	8007e10 <__swsetup_r>
 8007dbc:	b118      	cbz	r0, 8007dc6 <__swbuf_r+0x32>
 8007dbe:	f04f 37ff 	mov.w	r7, #4294967295
 8007dc2:	4638      	mov	r0, r7
 8007dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dc6:	6823      	ldr	r3, [r4, #0]
 8007dc8:	6922      	ldr	r2, [r4, #16]
 8007dca:	1a98      	subs	r0, r3, r2
 8007dcc:	6963      	ldr	r3, [r4, #20]
 8007dce:	b2f6      	uxtb	r6, r6
 8007dd0:	4283      	cmp	r3, r0
 8007dd2:	4637      	mov	r7, r6
 8007dd4:	dc05      	bgt.n	8007de2 <__swbuf_r+0x4e>
 8007dd6:	4621      	mov	r1, r4
 8007dd8:	4628      	mov	r0, r5
 8007dda:	f7ff ffb3 	bl	8007d44 <_fflush_r>
 8007dde:	2800      	cmp	r0, #0
 8007de0:	d1ed      	bne.n	8007dbe <__swbuf_r+0x2a>
 8007de2:	68a3      	ldr	r3, [r4, #8]
 8007de4:	3b01      	subs	r3, #1
 8007de6:	60a3      	str	r3, [r4, #8]
 8007de8:	6823      	ldr	r3, [r4, #0]
 8007dea:	1c5a      	adds	r2, r3, #1
 8007dec:	6022      	str	r2, [r4, #0]
 8007dee:	701e      	strb	r6, [r3, #0]
 8007df0:	6962      	ldr	r2, [r4, #20]
 8007df2:	1c43      	adds	r3, r0, #1
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d004      	beq.n	8007e02 <__swbuf_r+0x6e>
 8007df8:	89a3      	ldrh	r3, [r4, #12]
 8007dfa:	07db      	lsls	r3, r3, #31
 8007dfc:	d5e1      	bpl.n	8007dc2 <__swbuf_r+0x2e>
 8007dfe:	2e0a      	cmp	r6, #10
 8007e00:	d1df      	bne.n	8007dc2 <__swbuf_r+0x2e>
 8007e02:	4621      	mov	r1, r4
 8007e04:	4628      	mov	r0, r5
 8007e06:	f7ff ff9d 	bl	8007d44 <_fflush_r>
 8007e0a:	2800      	cmp	r0, #0
 8007e0c:	d0d9      	beq.n	8007dc2 <__swbuf_r+0x2e>
 8007e0e:	e7d6      	b.n	8007dbe <__swbuf_r+0x2a>

08007e10 <__swsetup_r>:
 8007e10:	b538      	push	{r3, r4, r5, lr}
 8007e12:	4b29      	ldr	r3, [pc, #164]	@ (8007eb8 <__swsetup_r+0xa8>)
 8007e14:	4605      	mov	r5, r0
 8007e16:	6818      	ldr	r0, [r3, #0]
 8007e18:	460c      	mov	r4, r1
 8007e1a:	b118      	cbz	r0, 8007e24 <__swsetup_r+0x14>
 8007e1c:	6a03      	ldr	r3, [r0, #32]
 8007e1e:	b90b      	cbnz	r3, 8007e24 <__swsetup_r+0x14>
 8007e20:	f7ff fa30 	bl	8007284 <__sinit>
 8007e24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e28:	0719      	lsls	r1, r3, #28
 8007e2a:	d422      	bmi.n	8007e72 <__swsetup_r+0x62>
 8007e2c:	06da      	lsls	r2, r3, #27
 8007e2e:	d407      	bmi.n	8007e40 <__swsetup_r+0x30>
 8007e30:	2209      	movs	r2, #9
 8007e32:	602a      	str	r2, [r5, #0]
 8007e34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e38:	81a3      	strh	r3, [r4, #12]
 8007e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e3e:	e033      	b.n	8007ea8 <__swsetup_r+0x98>
 8007e40:	0758      	lsls	r0, r3, #29
 8007e42:	d512      	bpl.n	8007e6a <__swsetup_r+0x5a>
 8007e44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e46:	b141      	cbz	r1, 8007e5a <__swsetup_r+0x4a>
 8007e48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e4c:	4299      	cmp	r1, r3
 8007e4e:	d002      	beq.n	8007e56 <__swsetup_r+0x46>
 8007e50:	4628      	mov	r0, r5
 8007e52:	f7ff fb2d 	bl	80074b0 <_free_r>
 8007e56:	2300      	movs	r3, #0
 8007e58:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e5a:	89a3      	ldrh	r3, [r4, #12]
 8007e5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007e60:	81a3      	strh	r3, [r4, #12]
 8007e62:	2300      	movs	r3, #0
 8007e64:	6063      	str	r3, [r4, #4]
 8007e66:	6923      	ldr	r3, [r4, #16]
 8007e68:	6023      	str	r3, [r4, #0]
 8007e6a:	89a3      	ldrh	r3, [r4, #12]
 8007e6c:	f043 0308 	orr.w	r3, r3, #8
 8007e70:	81a3      	strh	r3, [r4, #12]
 8007e72:	6923      	ldr	r3, [r4, #16]
 8007e74:	b94b      	cbnz	r3, 8007e8a <__swsetup_r+0x7a>
 8007e76:	89a3      	ldrh	r3, [r4, #12]
 8007e78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007e7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e80:	d003      	beq.n	8007e8a <__swsetup_r+0x7a>
 8007e82:	4621      	mov	r1, r4
 8007e84:	4628      	mov	r0, r5
 8007e86:	f000 f84f 	bl	8007f28 <__smakebuf_r>
 8007e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e8e:	f013 0201 	ands.w	r2, r3, #1
 8007e92:	d00a      	beq.n	8007eaa <__swsetup_r+0x9a>
 8007e94:	2200      	movs	r2, #0
 8007e96:	60a2      	str	r2, [r4, #8]
 8007e98:	6962      	ldr	r2, [r4, #20]
 8007e9a:	4252      	negs	r2, r2
 8007e9c:	61a2      	str	r2, [r4, #24]
 8007e9e:	6922      	ldr	r2, [r4, #16]
 8007ea0:	b942      	cbnz	r2, 8007eb4 <__swsetup_r+0xa4>
 8007ea2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007ea6:	d1c5      	bne.n	8007e34 <__swsetup_r+0x24>
 8007ea8:	bd38      	pop	{r3, r4, r5, pc}
 8007eaa:	0799      	lsls	r1, r3, #30
 8007eac:	bf58      	it	pl
 8007eae:	6962      	ldrpl	r2, [r4, #20]
 8007eb0:	60a2      	str	r2, [r4, #8]
 8007eb2:	e7f4      	b.n	8007e9e <__swsetup_r+0x8e>
 8007eb4:	2000      	movs	r0, #0
 8007eb6:	e7f7      	b.n	8007ea8 <__swsetup_r+0x98>
 8007eb8:	20000058 	.word	0x20000058

08007ebc <_sbrk_r>:
 8007ebc:	b538      	push	{r3, r4, r5, lr}
 8007ebe:	4d06      	ldr	r5, [pc, #24]	@ (8007ed8 <_sbrk_r+0x1c>)
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	4604      	mov	r4, r0
 8007ec4:	4608      	mov	r0, r1
 8007ec6:	602b      	str	r3, [r5, #0]
 8007ec8:	f7f9 f9d6 	bl	8001278 <_sbrk>
 8007ecc:	1c43      	adds	r3, r0, #1
 8007ece:	d102      	bne.n	8007ed6 <_sbrk_r+0x1a>
 8007ed0:	682b      	ldr	r3, [r5, #0]
 8007ed2:	b103      	cbz	r3, 8007ed6 <_sbrk_r+0x1a>
 8007ed4:	6023      	str	r3, [r4, #0]
 8007ed6:	bd38      	pop	{r3, r4, r5, pc}
 8007ed8:	200030ec 	.word	0x200030ec

08007edc <__swhatbuf_r>:
 8007edc:	b570      	push	{r4, r5, r6, lr}
 8007ede:	460c      	mov	r4, r1
 8007ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ee4:	2900      	cmp	r1, #0
 8007ee6:	b096      	sub	sp, #88	@ 0x58
 8007ee8:	4615      	mov	r5, r2
 8007eea:	461e      	mov	r6, r3
 8007eec:	da0d      	bge.n	8007f0a <__swhatbuf_r+0x2e>
 8007eee:	89a3      	ldrh	r3, [r4, #12]
 8007ef0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007ef4:	f04f 0100 	mov.w	r1, #0
 8007ef8:	bf14      	ite	ne
 8007efa:	2340      	movne	r3, #64	@ 0x40
 8007efc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007f00:	2000      	movs	r0, #0
 8007f02:	6031      	str	r1, [r6, #0]
 8007f04:	602b      	str	r3, [r5, #0]
 8007f06:	b016      	add	sp, #88	@ 0x58
 8007f08:	bd70      	pop	{r4, r5, r6, pc}
 8007f0a:	466a      	mov	r2, sp
 8007f0c:	f000 f848 	bl	8007fa0 <_fstat_r>
 8007f10:	2800      	cmp	r0, #0
 8007f12:	dbec      	blt.n	8007eee <__swhatbuf_r+0x12>
 8007f14:	9901      	ldr	r1, [sp, #4]
 8007f16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007f1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007f1e:	4259      	negs	r1, r3
 8007f20:	4159      	adcs	r1, r3
 8007f22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007f26:	e7eb      	b.n	8007f00 <__swhatbuf_r+0x24>

08007f28 <__smakebuf_r>:
 8007f28:	898b      	ldrh	r3, [r1, #12]
 8007f2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f2c:	079d      	lsls	r5, r3, #30
 8007f2e:	4606      	mov	r6, r0
 8007f30:	460c      	mov	r4, r1
 8007f32:	d507      	bpl.n	8007f44 <__smakebuf_r+0x1c>
 8007f34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007f38:	6023      	str	r3, [r4, #0]
 8007f3a:	6123      	str	r3, [r4, #16]
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	6163      	str	r3, [r4, #20]
 8007f40:	b003      	add	sp, #12
 8007f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f44:	ab01      	add	r3, sp, #4
 8007f46:	466a      	mov	r2, sp
 8007f48:	f7ff ffc8 	bl	8007edc <__swhatbuf_r>
 8007f4c:	9f00      	ldr	r7, [sp, #0]
 8007f4e:	4605      	mov	r5, r0
 8007f50:	4639      	mov	r1, r7
 8007f52:	4630      	mov	r0, r6
 8007f54:	f7ff fb18 	bl	8007588 <_malloc_r>
 8007f58:	b948      	cbnz	r0, 8007f6e <__smakebuf_r+0x46>
 8007f5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f5e:	059a      	lsls	r2, r3, #22
 8007f60:	d4ee      	bmi.n	8007f40 <__smakebuf_r+0x18>
 8007f62:	f023 0303 	bic.w	r3, r3, #3
 8007f66:	f043 0302 	orr.w	r3, r3, #2
 8007f6a:	81a3      	strh	r3, [r4, #12]
 8007f6c:	e7e2      	b.n	8007f34 <__smakebuf_r+0xc>
 8007f6e:	89a3      	ldrh	r3, [r4, #12]
 8007f70:	6020      	str	r0, [r4, #0]
 8007f72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f76:	81a3      	strh	r3, [r4, #12]
 8007f78:	9b01      	ldr	r3, [sp, #4]
 8007f7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007f7e:	b15b      	cbz	r3, 8007f98 <__smakebuf_r+0x70>
 8007f80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f84:	4630      	mov	r0, r6
 8007f86:	f000 f81d 	bl	8007fc4 <_isatty_r>
 8007f8a:	b128      	cbz	r0, 8007f98 <__smakebuf_r+0x70>
 8007f8c:	89a3      	ldrh	r3, [r4, #12]
 8007f8e:	f023 0303 	bic.w	r3, r3, #3
 8007f92:	f043 0301 	orr.w	r3, r3, #1
 8007f96:	81a3      	strh	r3, [r4, #12]
 8007f98:	89a3      	ldrh	r3, [r4, #12]
 8007f9a:	431d      	orrs	r5, r3
 8007f9c:	81a5      	strh	r5, [r4, #12]
 8007f9e:	e7cf      	b.n	8007f40 <__smakebuf_r+0x18>

08007fa0 <_fstat_r>:
 8007fa0:	b538      	push	{r3, r4, r5, lr}
 8007fa2:	4d07      	ldr	r5, [pc, #28]	@ (8007fc0 <_fstat_r+0x20>)
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	4604      	mov	r4, r0
 8007fa8:	4608      	mov	r0, r1
 8007faa:	4611      	mov	r1, r2
 8007fac:	602b      	str	r3, [r5, #0]
 8007fae:	f7f9 f93a 	bl	8001226 <_fstat>
 8007fb2:	1c43      	adds	r3, r0, #1
 8007fb4:	d102      	bne.n	8007fbc <_fstat_r+0x1c>
 8007fb6:	682b      	ldr	r3, [r5, #0]
 8007fb8:	b103      	cbz	r3, 8007fbc <_fstat_r+0x1c>
 8007fba:	6023      	str	r3, [r4, #0]
 8007fbc:	bd38      	pop	{r3, r4, r5, pc}
 8007fbe:	bf00      	nop
 8007fc0:	200030ec 	.word	0x200030ec

08007fc4 <_isatty_r>:
 8007fc4:	b538      	push	{r3, r4, r5, lr}
 8007fc6:	4d06      	ldr	r5, [pc, #24]	@ (8007fe0 <_isatty_r+0x1c>)
 8007fc8:	2300      	movs	r3, #0
 8007fca:	4604      	mov	r4, r0
 8007fcc:	4608      	mov	r0, r1
 8007fce:	602b      	str	r3, [r5, #0]
 8007fd0:	f7f9 f939 	bl	8001246 <_isatty>
 8007fd4:	1c43      	adds	r3, r0, #1
 8007fd6:	d102      	bne.n	8007fde <_isatty_r+0x1a>
 8007fd8:	682b      	ldr	r3, [r5, #0]
 8007fda:	b103      	cbz	r3, 8007fde <_isatty_r+0x1a>
 8007fdc:	6023      	str	r3, [r4, #0]
 8007fde:	bd38      	pop	{r3, r4, r5, pc}
 8007fe0:	200030ec 	.word	0x200030ec

08007fe4 <_init>:
 8007fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fe6:	bf00      	nop
 8007fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fea:	bc08      	pop	{r3}
 8007fec:	469e      	mov	lr, r3
 8007fee:	4770      	bx	lr

08007ff0 <_fini>:
 8007ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff2:	bf00      	nop
 8007ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ff6:	bc08      	pop	{r3}
 8007ff8:	469e      	mov	lr, r3
 8007ffa:	4770      	bx	lr
